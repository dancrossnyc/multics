/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1988                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1981 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-04-19 by Thanh
     Nguyen. (see mrds #136)
  2) change(87-01-22,Hergert), approve(88-07-11,MCR7903),
     audit(88-07-06,Dupuis), install(88-08-01,MR12.2-1073):
     Changed references of sel_ptr to select_list_ptr for new parser.
  3) change(89-09-25,AWTaylor), approve(89-09-25,MCR8116),
     audit(89-10-12,Hussein), install(89-10-16,MR12.3-1093):	
     phx21249 - Created variable last_tuple_id to prevent redundant processing
     in do while loop
                                                   END HISTORY COMMENTS */


mrds_dsl_modify: modify: proc;

/* (database_index, selection_expression, values, code)

   BEGIN_DESCRIPTION

   The purpose of this procedure is to implement the dsl_$modify function.

   This  procedure  calls  translate  with the selection expression then calls
   search and mu_modify.



   INPUT CONDITIONS:

   database_index: is the index of the database the used wishes to modify.

   selection_expression:  is the expression supplied by the user to select the
   tuplies to be modified.

   values: are any values used by the selection expression.



   OUTPUT CONDITIONS:

   If no errors are encountered the deletion was performed.

   code = 0; If no errors are detected.

   code  =  mrds_error_$invalid_db_index;  If  no  dbcb_ptr  was found for the
   database index.

   code  =  mrds_error_$tuple_not_found; If no tuples satisying the se.  expr.
   were found.

   code = something else; If some other error was detected;


   If  less  then  3  arguments  were  passed  to this procedure the condition
   arg_error will be signaled.
   END_DESCRIPTION


   HISTORY:

   76-01-01 R. D. Lackey: Initially written.

   78-10-01 J. A. Weeldreyer: Modified for MR7.0.

   79-03-26 Al Kepner: Modified to add caller parameter to mrds_dsl_translate.

   79-08-06  Al  Kepner:  Modified to pick up the correct var_index for tuples
   being modified.

   80-02-01  Jim Gray : Modified to put allocations in non-freeing, extensible
   area managed by this routine.

   80-06-01  Jim  Gray  :  Modified  to  add  first_time_flag  to  util modify
   interface,  so  allocated  space  could  be  reused  for  large tuple count
   modifies.

   81-01-29 Jim Gray : removed references to mdbm_data_$current_version, using
   a constant instead so that future db version expansion is possible.

   81-03-24 Jim Gray : added capability for selection expression

   81-03-27 Jim Gray : changed dbi parameter to mu_modify to dbcb_ptr, as part
   of  removing  use  of  mus_ptr_man  to  be declared char varying as well as
   nonvarying.

   81-09-29  Rickie E.  Brinegar: fixed the setting of num_ptrs to come before
   the referencing of any elements of the argument_list arrays which use it as
   an array limit.

   82-09-20 Davids: Modified for the new DMS interface. Removed call to
   mu_modify and replaced in with calls to mu_cursor_manager_$get, and
   dbcb.relmgr_entries.modify_tuples_by_id. Modify_tuples_by_id is called
   with an array to 100 tuple_ids to reduce the number of calls. the checks
   on ready_mode and scope were moved from mu_modify to this routine.

   82-10-12 Davids: Modified so that module would compile. Used the new
   names of cursor_ptrs_storage_ptr and cursor_storage_area_ptr in the
   call to mu_cursor_manager_$get

   82-11-29 Davids: Modified so that if the selection expression is a -current
   then after the modify operation the copy of the tuple in the tuple_info
   str is updated, this way modify -current; retrieve -current retrieves the
   new values not the old values. Also corrected the loop that accumulates
   100 tuples_ids to be modified for the -current case. For the current case
   no looping is needed since only 1 tuple can be current.

   82-12-07 Roger Lackey : Removed dcl mu_modify not referenced and
                           added  dcl for addrel which was not declared.

   83-01-24 Davids: added transaction code

   83-05-04 Davids: Modified so that mu_define_area is called with a name
   of MRDS || dbi_pic. This will allow closes to be faster since all
   temp_segments with the name MRDS || dbi_pic can be deleted/freed in 1 call.
   the variable dbi_pic was created as an easy way to convert from fixed bin
   to character.

   83-05-31 Mike Kubicar : Updated relation manager calling sequence.

   83-06-20 Davids: Removed check for old version database and the call
   to v1 code if it was an old version db (old version dbs can no longer
   be opened)

   85-01-15 Thanh Nguyen:  Added code to create a special work area using 
   mu_define_area$define_spec_temp_dir_area.  For now, this work area is used
   by mu_retrieve and mu_get_data to "allocate" value_for_db and value_for_user
   thru function mrds_space_allocate and reinitialize the area thru subroutine
   mrds_area_initialize.
*/
%page;
	dbcb_ptr, area_ptr = null ();
	mstxn_txn_id = "0"b;

	call cu_$arg_list_ptr (al_ptr);		/* Get pointer to this proc arg list */
	if al_ptr = null then
	     signal arg_error;			/* This returns you to command level */

	nargs = arg_list.arg_count / 2;		/* Get the number of arguments to this proc */
	if nargs < 3 then
	     signal arg_error;			/* This returns to command level */


	call cu_$arg_ptr (nargs, cd_ptr, arg_len, icode); /* Get  pointer to callers return code */
	if icode ^= 0 then
	     signal arg_error;			/* This returns to command level */

	call cu_$arg_ptr (1, dbi_ptr, arg_len, icode);	/* Get pointer to database index */
	if icode ^= 0 then
	     call error (icode);

	call cu_$arg_ptr (2, se_ptr, se_len, icode);	/* Get pointer to selection expression */
	if icode ^= 0 then
	     call error (icode);

/* BEGIN CHANGE 81-03-24 *************************************** */

	if arg_list.code = 4 then do;
		num_ptrs = arg_list.arg_count;	/* Determine number of ptrs in arg list */
		desc_ptr = arg_list.arg_des_ptr (nargs + 2);
		adpl_ptr = addr (arg_list.arg_des_ptr (nargs + 3));
	     end;
	else do;
		num_ptrs = arg_list.arg_count + 1;
		desc_ptr = arg_list.arg_des_ptr (nargs + 3);
		adpl_ptr = addr (arg_list.arg_des_ptr (nargs + 4));
	     end;

	if descriptor.type = 22 then do;
		se_len_ptr = addrel (se_ptr, -1);	/* get current length of varying string */
		se_len = se_len_ptr -> se_len_ovrly;
	     end;

/* END CHANGE 81-03-24 **************************************** */


	appl_ptr = addr (arg_list.arg_des_ptr (3));	/* Get pointer to the beginning  */
						/*   of the arg_ptr_list for translate */
						/* Now get pointer to beginning of descriptor */
						/*   pointer list for translate */

	num_args = nargs - 3;			/* Number of args passed to translate */

	call
	     mu_database_index$get_resultant_model_pointer (database_index,
	     dbcb_ptr);				/* Get the dbcb pointer */
	if dbcb_ptr = null then
	     call error (mrds_error_$invalid_db_index);

	mstxn_transactions_needed = dbcb.transactions_needed;

	original_appl_ptr = appl_ptr;
	original_adpl_ptr = adpl_ptr;
	original_num_args = num_args;

	on cleanup call mstxn_cleanup;

	on any_other call mstxn_any_other;
%page;
%include mrds_start_transaction;

	if mstxn_code ^= 0
	then call error (mstxn_code);
%page;
	dbcb.user_started_transaction = user_started_transaction;
	dbi_pic = dbcb.dbi;
	call
	     mu_define_area$define_temp_dir_area (dbcb.modify_area_ptr, database_index, (sys_info$max_seg_size),
	     "MRDS" || dbi_pic, "0"b /* not extensible */,
	     "1"b /* no freeing */, "0"b, "0"b /* no zeroing */, icode);
	if icode ^= 0 then
	     call error (icode);
	area_ptr = dbcb.modify_area_ptr;
						/* Create a work area for mu_retrieve to allocate the value_for_users. */
	call mu_define_area$define_spec_temp_dir_area (dbcb.work_area_ptr, database_index, "MRDS" || dbi_pic, icode);
	if icode ^= 0 then call error (icode);

	call
	     mrds_dsl_translate (dbcb_ptr, area_ptr, mrds_data_$caller_modify,
	     se_ptr, se_len, appl_ptr, adpl_ptr, num_args, icode);
	if icode ^= 0 then
	     call error (icode);
	if ^dbcb.val_mod then
	     call error (mrds_error_$inval_mod_expr);

	ti_ptr = dbcb.ti_ptr;
	range_ptr = dbcb.range_ptr;
	if dbcb.current_flag then
	     select_list_ptr = dbcb.current_ptr;
	else select_list_ptr = dbcb.select_ptr;
	vi = select_list.item (1).var_index;		/* Pick up var_index for tuples to be modified. */
	rmri_ptr = range.tup_var.ri_ptr (vi);

	if rm_rel_info.ready_mode ^= SCOPE_UPDATE	/* check opening mode and scope to */
	then call error (mdbm_error_$inc_ready_mode);	/* be sure that the relation can be modified */
	if ^rm_rel_info.modify
	then call error (mdbm_error_$view_prevent);

	ntuples_modified = 0;
	done = "0"b;

	collection_id = rm_rel_info.rel_id;
	call mu_cursor_manager_$get (database_index, rmri_ptr, 0, collection_id,
	     dbcb.relmgr_entries.create_cursor, dbcb.relmgr_entries.open,
	     dbcb.cursor_ptrs_storage_ptr, dbcb.cursor_storage_area_ptr, cursor_ptr, icode);
	if icode ^= 0
	then call error (icode);

	call mu_build_tuple (rmri_ptr, area_ptr, dbcb.modify_vector_ptr, move_list_array.ml_ptr (1), "1"b, icode);
	if icode ^= 0
	then call error (icode);
	eil_number_of_elements = 100;
	allocate element_id_list in (wa);
	element_id_list.version = ELEMENT_ID_LIST_VERSION_1;

/* phx21249, AWTaylor. Init last_tuple_id */

	last_tuple_id = "0"b;

	do while ((icode = 0) & ^(done));		/* while we are still finding tuples */
	     if ^dbcb.current_flag			/* if selection expression is not -current */
	     then do;
		     element_id_list.number_of_elements = 0;
		     do i = 1 to 100 while (icode = 0);
			call mrds_dsl_search (dbcb_ptr, area_ptr, icode);
			if icode = 0
			then do;

/* phx21249, AT. Added a check to skip over redundant tuples */

			     if ((element_id_list.number_of_elements = 0) |

			     (tuple_info.tuple_id(vi) ^= last_tuple_id)) then do;
				element_id_list.number_of_elements = element_id_list.number_of_elements + 1;
				element_id_list.id (element_id_list.number_of_elements) = tuple_info.tuple.tuple_id (vi);
				end;
				last_tuple_id = tuple_info.tuple.tuple_id(vi);
			     end;
		     end;
		     if icode ^= mrds_error_$tuple_not_found & icode ^= 0
		     then call error (icode);
		     else if icode = mrds_error_$tuple_not_found
		     then do;
			     if (element_id_list.number_of_elements < 1) &
				(ntuples_modified < 1)
			     then call error (icode);
			     icode = 0;
			     done = "1"b;
			end;
		end;
	     else do;				/* selection expression is -current */
		     element_id_list.number_of_elements = 1;
		     call mrds_dsl_search (dbcb_ptr, area_ptr, icode);
		     if icode = 0
		     then element_id_list.id (element_id_list.number_of_elements) = tuple_info.tuple.tuple_id (vi);
		     else call error (icode);
		     done = "1"b;
		end;

	     call dbcb.relmgr_entries.modify_tuples_by_id
		(cursor_ptr, element_id_list_ptr, dbcb.modify_vector_ptr, number_of_tuples_modified, icode);
	     if icode ^= 0
	     then call error (icode);

	     ntuples_modified = ntuples_modified + number_of_tuples_modified;
	end;					/* modify loop */

	if icode ^= 0 then
	     call error (icode);
	else if ntuples_modified < 1 then
	     call error (icode);

	code = 0;

	if dbcb.current_flag			/* If this is -current, update the copy of the current */
	then do;					/* tuple to what it looks like after the modify */
		simple_typed_vector_ptr = tuple_info.tuple.tuple_ptr (vi);
		general_typed_vector_ptr = dbcb.modify_vector_ptr;
		do i = 1 to general_typed_vector.number_of_dimensions;
		     attr_no = general_typed_vector.dimension (i).identifier;
		     bit_length = rm_rel_info.attr_ptrs (attr_no) ->
			rm_attr_info.bit_length;
		     simple_typed_vector.dimension (attr_no).value_ptr -> bit_string =
			general_typed_vector.dimension (i).value_ptr -> bit_string;
		end;
	     end;
%page;
exit:
	if dbcb_ptr = null () then
	     ;
	else if dbcb.modify_area_ptr ^= null then
	     call mu_release_area (dbcb.modify_area_ptr);

	if code = mrds_error_$tuple_not_found
	then mftxn_code = 0;
	else mftxn_code = code;

%include mrds_finish_transaction;

	if mftxn_code ^= 0
	then code = mftxn_code;

	return;					/* Return to the caller with a code */


should_rollback: proc () returns (bit (1));

	return ("0"b);

/* No rollbacks requested by this module at this point in time. */

     end should_rollback;

restore_significant_data: proc;

	appl_ptr = original_appl_ptr;
	adpl_ptr = original_adpl_ptr;
	num_args = original_num_args;

	if dbcb_ptr ^= null ()
	then do;
		if dbcb.modify_area_ptr ^= null ()
		then do;
			call mu_release_area (dbcb.modify_area_ptr);
		     end;
	     end;

	return;

     end restore_significant_data;
%page;
error:
     proc (cd);					/* Internal error  procedure */

	dcl     cd		 fixed bin (35);

	code = cd;				/* Return the error code to caller */
	go to exit;

     end error;

%page;
%include mrds_dbcb;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mrds_range;
%page;
%include mrds_select_list;
%page;
%include mrds_tuple_info;
%page;
%include mdbm_arg_list;
%page;
%include mdbm_descriptor;
%page;
%include dm_element_id_list;
%page;
%include vu_typed_vector;
%page;

/* Multics subroutines */

	dcl     cu_$arg_list_ptr	 entry (ptr);
	dcl     cu_$arg_ptr		 entry (fixed bin, ptr, fixed bin, fixed bin (35));

	dcl     sys_info$max_seg_size	 ext fixed bin;


/*  DBM Routines */

	dcl     mrds_dsl_search	 entry (ptr, ptr, fixed bin (35));
	dcl     mrds_dsl_translate	 entry (ptr, ptr, fixed bin, ptr, fixed bin, ptr, ptr, fixed bin, fixed bin (35));
	dcl     mu_build_tuple	 entry (ptr, ptr, ptr, ptr, bit (1) aligned, fixed bin (35));
	dcl     mu_cursor_manager_$get entry (fixed bin (35), ptr, fixed bin (35), bit (36) aligned, entry, entry, ptr, ptr, ptr, fixed bin (35));
	dcl     mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr);


	dcl     mrds_data_$caller_modify fixed bin (17) ext;
	dcl     mrds_data_$max_attributes ext static fixed bin (35);
	dcl     mrds_data_$max_id_len	 ext fixed bin (35);

	dcl     (
	        mdbm_error_$inc_ready_mode,
	        mdbm_error_$view_prevent,
	        mrds_error_$tuple_not_found,
	        mrds_error_$inval_mod_expr,
	        mrds_error_$invalid_db_index
	        )			 ext fixed bin (35);

/* Based variable */

	dcl     code		 fixed bin (35) based (cd_ptr);
	dcl     database_index	 fixed bin (35) based (dbi_ptr);
	dcl     wa		 area (sys_info$max_seg_size) based (area_ptr);


/* Pointers */

	dcl     (
	        cursor_ptr,				/* points to the cursor to be used for the modify */
	        se_ptr,				/* Points to the selection expression */
	        appl_ptr,				/* Points to the list of arg pointers for translate */
	        adpl_ptr,				/* Points to the list of arg descriptors for translate */
	        cd_ptr,				/* Points to callers return code */
	        dbi_ptr
	        )			 ptr;		/* Points to the database index */


/* Others */

	dcl     SCOPE_UPDATE           static fixed bin options (constant) init (6);
						/* scope update ready mode */

	dcl     (
	        nargs,				/* Number of arguments passed to this proc */
	        arg_len,
	        se_len,				/* Selection expression length */
	        vi,				/* index of tuple_variable for relation being modified. */
	        num_args
	        )			 fixed bin;	/* Number of args passed to translate */


	dcl     icode		 fixed bin (35);	/* Internal error code */
	dcl     ntuples_modified	 fixed bin (35);	/* modified tuple counter */

	dcl     arg_error		 condition;	/* Condition signaled if less then 3 arguments
						   were passed to this proc */

	dcl     (addrel, null, addr, fixed, rel) builtin;
	declare mu_define_area$define_temp_dir_area
				 entry (ptr, fixed bin (35), fixed bin (18), char (11), bit (1) aligned,
				 bit (1) aligned, bit (1) aligned, bit (1) aligned, fixed bin (35));
	declare area_ptr		 ptr;
	declare mu_release_area	 entry (ptr);
	declare se_len_ptr		 ptr;		/* temp for getting varying se len */
	declare se_len_ovrly	 fixed bin (35) based;
	dcl     mu_define_area$define_spec_temp_dir_area entry (ptr, fixed bin (35), char (11), fixed bin (35));
dcl  last_tuple_id bit (36) aligned; /* Last tuple id used to check for redundancy */
	dcl     attr_no		 fixed bin;
	dcl     bit_length		 fixed bin (35);
	dcl     bit_string		 bit (bit_length) unal based;
	dcl     done		 bit (1);		/* true => mrds_dsl_search found no more tuples */
	dcl     i			 fixed bin;	/* loop counter */
	dcl     number_of_tuples_modified fixed bin (35); /* number of tuples by the call to modify_tuples_by_id */
	dcl     collection_id	 bit (36) aligned;	/* collection id with a declaration suitable for passing to mu_cursor_manager_ */

	dcl     cleanup		 condition;
	dcl     any_other		 condition;

	dcl     original_appl_ptr	 ptr;		/* original values stored so that we can start over */
	dcl     original_adpl_ptr	 ptr;		/* in case of rollback */
	dcl     original_num_args	 fixed bin;
	dcl     dbi_pic		 picture "999";

     end mrds_dsl_modify;
