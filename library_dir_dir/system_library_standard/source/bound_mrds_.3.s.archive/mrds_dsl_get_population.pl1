/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */


/****^  HISTORY COMMENTS:
  1) change(85-11-17,Dupuis), approve(85-12-16,MCR7314),
     audit(86-02-04,Brunelle), install(86-02-05,MR12.0-1013):
     This entry is being made to cover the change made on 85-04-19 by Thanh
     Nguyen. (see mrds #136)
                                                   END HISTORY COMMENTS */

/* HISTORY:

   Originally written by Jim Gray - - March 1981

   81-03-27 Jim Gray : added dbcb_ptr parameter to mu_get_rel_size
   as part of getting rid of mus_ptr_man module.

   81-06-01 Jim Gray : changed to use new resultant structure.

   81-12-15 R. Lackey : Modified to correcly search rm_rel_array for rel_name. TR11887.

   82-09-24 Davids: Modified to call mu_rel_statistics$return_tuple_count
   instead of mu_get_rel_size. This required testing rm_rel_info.opening_id
   and calling dbcb.relmgr_entries.open if the relation wasn't open yet,
   and that required including the mdbm_rm_rel_info include file.

   82-12-10 Davids: Modified the call to dbcb.relmgr_entries.open by
   enclosing the db_path in ()s. This was needed because the declaration
   of the relation manager entries in the dbcb was changed from options
   variable to reality. The db_path is declared as character aligned in
   the include file while the entry expects character unaligned.

   83-02-01 Mike Kubicar : added an "error" procedure and removed the horrible
   nestings used to handle error codes.  This was needed in order to insert
   the transaction processing include files.  Transaction processing was
   also added.

   83-02-18 Bert Moberg : Added check for relation names greater than 30 chars

   83-04-07 Davids: Explicitly declared the builtin function length.

   83-05-23 Mike Kubicar : converted for new mu_rel_statistics calling
   sequence.

   85-01-23 Delight Hurst : Maked sure that get_population calls to
   relmgr_entries.open with the model name and not to return as an error in
   a submodel opening.
*/

mrds_dsl_get_population: get_population: procedure ();

/* DESCRIPTION:

   This routine will return the current tuple count for either
   permanent or temporary relations. If the relation identifier
   given is numeric, or character and not starting with a letter,
   then a temp rel index is assumed, and the temp rel population
   routine is called, otherwise mu_rel_statistics$return_tuple_count
   is called for the permanent relation name.

*/
%page;
/* PARAMETERS:

   db_index - - (input) fixed bin(35), is the integer returned from
   a call to dsl_$open, for the desired opening of the database.

   relation_identifier - - (input) char or fixed bin(35), if this argument
   is fixed bin (35), or char and does not start with a letter, it is assumed
   to be a temporary relation index. If it is char starting with a letter,
   it is assumed to be a permanent relation name. In either case,
   it indicates which relation in this opening view is to have it's current
   tuple count returned.

   tuple_count - - (output) fixed bin(35), is the current tuple count
   of the relation specified by the relation_identifier

   error_code - - (output) is the standard status code. It will be 0 unless
   the relation or specified opening are unknown, or some other error occurs.

*/
%page;
/* initialize */

	error_code = 0;
	tuple_count = 0;
	mstxn_txn_id = "0"b;

/* make sure that we were called with 4 args,   and that the entry was declared options (variable) */

	call cu_$arg_list_ptr (al_ptr);
	nargs = arg_list.desc_count / 2;
	if nargs ^= 4 then do;
		call sub_err_ (error_table_$wrong_no_of_args, caller_name, continue, info_ptr, return_value, "^/^a ^d ^a^a",
		     "The number of arguments =", nargs,
		     "was not the required 4",
		     ", or the entry was not declared ""options (variable)"".");
		return;
	     end;

/* get the offset of the descriptors in the argument list */

	if arg_list.code = SPECIAL then
	     desc_index = nargs + 1;
	else desc_index = nargs;
	num_ptrs = desc_index + nargs;

/* get the database index argument */

	call mu_convert_parameter$convert_input_parameter (arg_list.arg_des_ptr (1),
	     arg_list.arg_des_ptr (desc_index + 1),
	     db_index_ptr, addr (fixed_bin_35_descr), addr (local_area), error_code);
	if error_code ^= 0 then do;
		call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
		     "The database index argument could not be converted to ""fixed binary (35) aligned"".");
		call error (error_code);
	     end;

/* check for a valid database index, and get the resultant model pointer */

	call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);
	if dbcb_ptr = null () then do;
		error_code = mrds_error_$invalid_db_index;
		call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a ^d ^a",
		     "The database index =", db_index,
		     "does not refer to a database that is currently open by this process.");
		call error (error_code);
	     end;

/* check that the database version is supported */

	rdbi_ptr = dbcb.rdbi_ptr;
	if rm_db_info.db_version < 4 then
	     call error (mrds_error_$version_not_supported);


/* Start transactions */
	mstxn_transactions_needed = dbcb.transactions_needed;
	on cleanup call mstxn_cleanup;
	on any_other call mstxn_any_other;
%include mrds_start_transaction;
	if mstxn_code ^= 0
	then call error (mstxn_code);

	dbcb.user_started_transaction = user_started_transaction;

/* get the relation identifier, and decide if we are
   to get the population of a temporary relation or a permanent relation
   first try converting the argument to a fixed bin (35) temp rel index */

	call mu_convert_parameter$convert_input_parameter
	     (arg_list.arg_des_ptr (2), arg_list.arg_des_ptr (desc_index + 2),
	     temp_rel_index_ptr, addr (fixed_bin_35_descr), addr (local_area), error_code);
	if error_code = 0 then
	     call mrds_dsl_define_temp_rel$get_temp_rel_population
		(db_index, temp_rel_index, tuple_count, error_code);
	else do;

/* not a temp rel index, check for character argument */

		error_code = 0;
		desc_ptr = arg_list.arg_des_ptr (desc_index + 2);
		if descriptor.type = 21 | descriptor.type = 22 then do;
			rel_name_ptr = arg_list.arg_des_ptr (2);
			if descriptor.type = 21 then
			     rel_name_len = fixed (string (descriptor.size));
			else do;			/* get current length for varying strings */
				rel_name_len_ptr = addrel (rel_name_ptr, -1);
				rel_name_len = rel_name_len_ptr -> fixed_bin_35_ovrly;
			     end;
			call get_perm_rel_population (db_index, dbcb_ptr, rel_name,
			     tuple_count, error_code);
		     end;
		else do;

/* bad relation identifier parameter */

			error_code = error_table_$bad_arg;
			call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a ^a",
			     "The relation identifier argument was not character,",
			     "and could not be converted to ""fixed binary (35) aligned"".");
			call error (error_code);
		     end;
	     end;

/* assign the output values for the error code and the tuple count */

	if arg_list.arg_des_ptr (desc_index + 3) -> bit_36_ovrly = fixed_bin_35_descr then
	     arg_list.arg_des_ptr (3) -> output_tuple_count = tuple_count;
	else do;
		error_code = error_table_$badcall;
		call sub_err_ (error_code, caller_name, continue, info_ptr, return_value,
		     "^/^a^/^a ^d",
		     "The tuple_count variable was not declared ""fixed bin (35) aligned"".",
		     "The tuple_count value is =", tuple_count);
		call error (error_code);
	     end;


exit:
	mftxn_code = error_code;
%include mrds_finish_transaction;
	if mftxn_code ^= 0
	then error_code = mftxn_code;
	if arg_list.arg_des_ptr (desc_index + 4) -> bit_36_ovrly = fixed_bin_35_descr then
	     arg_list.arg_des_ptr (4) -> output_error_code = error_code;
	else do;
		call convert_status_code_ (error_code, short_info, long_info);
		call sub_err_ (error_table_$badcall, caller_name, continue, info_ptr, return_value,
		     "^/^a^/^a^/^a",
		     "The error code (last) argument was not declared ""fixed bin (35) aligned"".",
		     "The error_code expands to the following message:", long_info);
	     end;
%page;
error:
     proc (cd);

	dcl     cd		 fixed bin (35);

	error_code = cd;
	goto exit;
     end error;

%page;
get_perm_rel_population: procedure (dbi, dbcb_ptr, relation, count, err_code);

/* routine to get the number of tuples currently stored in   a permanent relation, for the given opening
   PARAMETERS:
   dbi - - (input) fixed bin (35), the database opening index

   dbcb_ptr - - (input) pointer, pointer to the resultant model

   relation - - (input) char(*), the name of the permanent
   relation in the users view of the database for this opening

   count - - (output) fixed bin(35), the number of tuples currently
   stored in the given relation

   err_code - - (output) fixed bin(35), the error status encoding
*/

/* first check for a legal relation name, known in this opening */

	rmra_ptr = rm_db_info.ra_ptr;

/* BEGIN CHANGE 81-12-15 RDL ********************************************* */

	if length (rtrim (relation)) > 30 then call error (mrds_error_$rel_name_too_long);
	rel_name_32 = rtrim (relation);		/* Used to seach rel_array */
	i = index (string (rm_rel_array.name), "!" || rel_name_32);

/* END   CHANGE 81-12-15 RDL ********************************************* */

	if i = 0 then
	     err_code = mrds_error_$unknown_relation_name;
	else do;

		i = ((i - 1) / 33) + 1;		/* convert from char to array index */

/* good name, call to get the tuple count */

/*make sure you have the model name, not the submodel name */
		model_relation = rm_rel_array.rel_data.model_name (i);
		rel_ptr = rm_rel_array.rel_data.ri_ptr (i);
		if rel_ptr -> rm_rel_info.opening_id = "0"b
		then call dbcb.relmgr_entries.open ((rm_db_info.db_path), model_relation, rel_ptr -> rm_rel_info.opening_id, err_code);
		if err_code = 0
		then call mu_rel_statistics$return_tuple_count (
			db_index, dbcb.relmgr_entries.create_cursor,
			dbcb.relmgr_entries.open,
			dbcb.relmgr_entries.get_count,
			dbcb.cursor_ptrs_storage_ptr,
			dbcb.cursor_storage_area_ptr, rel_ptr,
			count, err_code);

	     end;
%page;
	dcl     dbcb_ptr		 ptr;		/* points to resultant model for opening */
	dcl     i			 fixed bin;	/* array index */
	dcl     model_relation	 char (30);	/* name of relation in model */
	dcl     mrds_error_$unknown_relation_name fixed bin (35) ext; /* name not in view */
	dcl     mrds_error_$rel_name_too_long fixed bin (35) ext; /* name too long */
	dcl     mu_rel_statistics$return_tuple_count entry (fixed bin (35), entry, entry, entry, ptr, ptr, ptr,
				 fixed bin (35), fixed bin (35));
	dcl     rel_ptr		 ptr;		/* points to rm_rel_info structure */
	dcl     dbi		 fixed bin (35);	/* database opening index */
	dcl     relation		 char (*);	/* name of relation in users view */
	dcl     count		 fixed bin (35);	/* current tuple count */
	dcl     err_code		 fixed bin (35);	/* error status encoding */

     end;
%page;
/***********
*
*   These routines are used by the transaction processing include files.
*   Restore_significant_data is called to reinitialize variables in case
*   of a rollback.  Should_rollback determines whether a transaction should
*   be rolled back or aborted on error.  Currently, it is always aborted.
*
**********/


restore_significant_data:
     proc;
     end restore_significant_data;



should_rollback:
     proc returns (bit (1));
	return ("0"b);
						/* No intention of rolling back any transactions at this point. */
     end should_rollback;
%page;
	dcl     SPECIAL		 fixed bin init (8);/* extra point in arg list */
	dcl     (addrel, index, null, fixed, addr,
	        rel, string, empty, length, rtrim) builtin;
	dcl     any_other		 condition;
	dcl     bit_36_ovrly	 bit (36) based;	/* overlay for looking at argument descriptors */
	dcl     caller_name		 char (32) init ("mrds_dsl_get_population"); /* name of calling routine */
	dcl     cleanup		 condition;
	dcl     continue		 char (1) init ("c"); /* dont stop after printing mesg */
	dcl     convert_status_code_	 entry (fixed bin (35), char (8) aligned, char (100) aligned); /* gets error code message */
	dcl     cu_$arg_list_ptr	 entry (ptr);	/* gets pointer to arg list */
	dcl     db_index		 fixed bin (35) based (db_index_ptr); /* database opening index */
	dcl     db_index_ptr	 ptr;		/* points to database index arg */
	dcl     desc_index		 fixed bin;	/* offset of descriptors in arg list array */
	dcl     error_code		 fixed bin (35);	/* error status encoding */
	dcl     error_table_$bad_arg	 fixed bin (35) ext;/* rel id not temp rel index or rel name */
	dcl     error_table_$badcall	 fixed bin (35) ext;/* variables not fixed bin(35) */
	dcl     error_table_$wrong_no_of_args fixed bin (35) ext; /* arg count ^= 4 */
	dcl     fixed_bin_35_descr	 bit (36) init ("100000100000000000000000000000100011"b); /* descriptor for FB35 variable */
	dcl     fixed_bin_35_ovrly	 fixed bin (35) based; /* overlay for 35 variable */
	dcl     info_ptr		 ptr init (null ());/* unused */
	dcl     local_area		 area (1024);	/* space for parameter conversion */
	dcl     long_info		 char (100) aligned;/* long error code mesg */
	dcl     mu_convert_parameter$convert_input_parameter entry (ptr, ptr, ptr, ptr, ptr, fixed bin (35)); /* gets user data */
	dcl     mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* checks for good db index */
	dcl     mrds_dsl_define_temp_rel$get_temp_rel_population entry
				 (fixed bin (35), fixed bin (35), fixed bin (35), fixed bin (35)); /* gets temp rel tuple count */
	dcl     mrds_error_$invalid_db_index fixed bin (35) ext; /* index not to open db */
	dcl     mrds_error_$version_not_supported fixed bin (35) ext; /* not version 4 db */
	dcl     nargs		 fixed bin;	/* number of arguments */
	dcl     output_error_code	 fixed bin (35) based; /* for assigning users error code */
	dcl     output_tuple_count	 fixed bin (35) based; /* for assigning users tuple count */
	dcl     rel_name		 char (rel_name_len) based (rel_name_ptr); /* perm rel name */
	dcl     rel_name_len	 fixed bin (21);	/* length of perm rel name */
	dcl     rel_name_len_ptr	 ptr;		/* points to count field of varyingf string */
	dcl     rel_name_ptr	 ptr;		/* points to perm rel name arg */
	dcl     rel_name_32		 char (32);	/* Used to search rm_rel_array */
	dcl     return_value	 fixed bin (35) init (0); /* unused */
	dcl     short_info		 char (8) aligned;	/* short error code mesg */
	dcl     sub_err_		 entry options (variable); /* reports error details */
	dcl     sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment size */
	dcl     temp_rel_index	 fixed bin (35) based (temp_rel_index_ptr); /* temp rel indicator */
	dcl     temp_rel_index_ptr	 ptr;		/* points to temp rel index */
	dcl     tuple_count		 fixed bin (35);	/* number of tuples in perm or temp rel */
%page;
%include mdbm_descriptor;
%page;
%include mdbm_arg_list;
%page;
%include mrds_dbcb;
%page;
%include mdbm_rm_rel_array;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_db_info;


     end;
