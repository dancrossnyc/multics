/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

mrds_dsl_db_openings: list_dbs: procedure (a_area_ptr, database_list_ptr);

/* DESCRIPTION:

   This routine has two entries, list_dbs  which  is  obsolete,  and
   list_openings  which extends the returned info to include opening
   mode and type of opening (model or submodel). this  routine  will
   return  an  array  of  database  indexes, and pathnames for those
   databases that are currently open by this process.  if  none  are
   open, a null pointer is returned. an area must be provided by the
   user that is a minimum 50 words for  each  open  database,  or  a
   maximum 4800 words, not counting the area header overhead of 24+2
   words for 1 database

*/

/* PARAMETERS:

   ===== list_dbs entry

   area_ptr - - (input) pointer to an area in which to allocate  the
   database_list  structure  of open database pathnames and indexes.
   it should be declared 4800 words long to handle the general case.

   database_list_ptr -  -  (output)  pointer  to  the  database_list
   structure  which  is an array of pathnames, database indexes, and
   opening modes for the databases open in this process. the pointer
   is    null   if   none   are   open.   use   the   include   file
   mrds_database_list.incl.pl1 for the returned structure.


   ===== get_openings entry

   area_ptr - - (input) pointer to a user supplied area large enough
   to hold the expected number of open database information details.

   structure_version - - (input) fixed bin, the desired  version  of
   the open information structure.

   mrds_database_openings_ptr - - (output) pointer,  points  to  the
   structure       defined       in       the      include      file
   mrds_database_openings.incl.pl1 which has been allocated  in  the
   users area.

   error_code - - (output) fixed bin(35), error status  encoding,  0
   unless an error occured. No error is returned if no databases are
   currently open, the structure is  still  allocated,  but  with  a
   number  open of 0. If the error code is not 0, then the structure
   is not allocated, and the pointer will be null.

*/

/* HISTORY:

   79-07-01 Jim Gray: Initially written.

   80-12-08 Rickie E. Brinegar: The opening mode was  added  to  the
   mrds_dbs_modes_list.incl.pl1 include file and the new entry point
   list_dbs_with_modes was added.

   80-12-12 Jim Gray : Added separate entry parameters for the  area
   pointer,  because occasionaly the wrong parameter list was looked
   at for getting this pointer, and the result was a bunch  of  null
   characters  for a database path. Also increased size of area from
   3200 to 4800 to handle additional mode info for the possible  max
   of  64 open dbs, each with 168 char paths. Also found that the do
   loop in the second entry was using number_of_openings, which  was
   never    initialized    in   that   entry,   instead   of   using
   number_of_db_open.

   81-01-30   Jim   Gray   :   changed   name   of   routine    from
   mrds_dsl_list_dbs  to  mrds_dsl_db_openings,  and  name  of entry
   list_dbs_with_modes to list_openings to be compatibile  with  new
   include file mrds_database_openings replacing mrds_dbs_modes_list
   as part of effort to  make  the  user  interface  extensible  and
   maintainable.  The  interface  was  also  changed  to  agree with
   project standards.

   81-04-24 Jim Gray : changed  area  size  to  be  proportional  to
   mrds_data_$max_dbs
*/

	number_of_openings = mu_database_index$get_number_open_dbs ();

	if number_of_openings = 0 then
	     database_list_ptr = null ();
	else do;

		area_ptr = a_area_ptr;		/* get local version for this entry */
		allocate database_list set (database_list_ptr) in (based_area);

		database_list.number_open = number_of_openings;

		number_found = 0;
		do db_index = 1 by 1 to mrds_data_$max_dbs while (number_found < number_of_openings);

		     call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);

		     if dbcb_ptr = null () then ;	/* not valid index */
		     else do;

			     rdbi_ptr = dbcb_ptr -> dbcb.rdbi_ptr;
			     if rdbi_ptr = null () then
				pathname = "PATH NOT AVAIABLE";
			     else pathname = rdbi_ptr -> rm_db_info.sm_path;

			     number_found = number_found + 1;

			     database_list (number_found).index = db_index;
			     database_list (number_found).path = pathname;
			end;

		end;

	     end;

	return;

list_openings: entry (b_area_ptr, structure_version, mrds_database_openings_ptr, error_code);

/* initialize */

	error_code = 0;
	mrds_database_openings_ptr = null ();

	mrds_database_openings_num_open_init = mu_database_index$get_number_open_dbs ();

/* check the users arguments */

	if structure_version ^= mrds_database_openings_structure_version then
	     error_code = error_table_$unimplemented_version;
	else if b_area_ptr = null () then
	     error_code = error_table_$badcall;
	else do;

		area_ptr = b_area_ptr;		/* get local version for this entry */
		unspec (my_area_info) = "0"b;
		my_area_info.version = 1;
		my_area_info.areap = area_ptr;

		call area_info_ (addr (my_area_info), error_code);
		if error_code ^= 0 then ;
		else if my_area_info.no_freeing then
		     error_code = mrds_error_$not_freeing_area;
		else do;

/* fill in the users structure */

			on area begin;
				error_code = error_table_$area_too_small;
				goto skip_allocate;
			     end;

			on cleanup begin;
				if mrds_database_openings_ptr ^= null () then do;
					free mrds_database_openings in (based_area);
					mrds_database_openings_ptr = null ();
				     end;
			     end;

			allocate mrds_database_openings set (mrds_database_openings_ptr) in (based_area);

			revert area;

			unspec (mrds_database_openings) = "0"b;
			mrds_database_openings.version = mrds_database_openings_structure_version;
			mrds_database_openings.number_open = mrds_database_openings_num_open_init;

			number_found = 0;
			do db_index = 1 by 1 to mrds_data_$max_dbs
			     while (number_found < mrds_database_openings_num_open_init);

			     call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);

			     if dbcb_ptr = null () then ; /* not valid index */
			     else do;

				     rdbi_ptr = dbcb_ptr -> dbcb.rdbi_ptr;
				     if rdbi_ptr = null () then
					pathname = "PATH NOT AVAIABLE";
				     else pathname = rdbi_ptr -> rm_db_info.sm_path;

				     number_found = number_found + 1;

				     mrds_database_openings (number_found).index = db_index;
				     mrds_database_openings (number_found).path = pathname;
				     if dbcb.dsm_sw then
					mrds_database_openings (number_found).submodel = "1"b;
				     else mrds_database_openings (number_found).model = "1"b;

/* set the mode argument */

				     mode_code = fixed (dbcb.open_mode);
				     if mode_code = 0 then
					mrds_database_openings (number_found).mode = "Mode not available";
				     else if mode_code = 1 then
					mrds_database_openings (number_found).mode = "retrieval";
				     else if mode_code = 2 then
					mrds_database_openings (number_found).mode = "update";
				     else if mode_code = 3 then
					mrds_database_openings (number_found).mode = "exclusive_retrieval";
				     else if mode_code = 4 then
					mrds_database_openings (number_found).mode = "exclusive_update";
				     else mrds_database_openings (number_found).mode = "Unknown opening mode";


				end;

			end;

		     end;

	     end;

skip_allocate:

	return;

	declare a_area_ptr		 ptr;		/* for main entry */
	declare area		 condition;	/* signaled if space too small */
	declare area_info_		 entry (ptr, fixed bin (35)); /* gets area details */
	declare area_ptr		 ptr;		/* pointer to users area */
	declare b_area_ptr		 ptr;		/* for get_path_info entry */
	declare based_area		 area (60 * mrds_data_$max_dbs) based (area_ptr); /* overlay for users area */
	declare cleanup		 condition;
	declare db_index		 fixed bin (35);	/* database index loop control */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare error_table_$area_too_small fixed bin (35) ext; /* not enough space for structure */
	declare error_table_$badcall	 fixed bin (35) ext;/* null area ptr */
	declare error_table_$unimplemented_version fixed bin (35) ext; /* unknown structure version */
	declare mu_database_index$get_number_open_dbs entry returns (fixed bin); /* gets count of db's open by this process */
	declare mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* get dbcb ptr from table */
	declare mode_code		 fixed bin;	/* code for the opening mode */
	declare mrds_data_$max_dbs	 fixed bin (35) ext;/* max number of allowed openings */
	declare mrds_error_$not_freeing_area fixed bin (35) ext; /* area not freeable */
	declare number_found	 fixed bin;	/* current count of found database openings */
	declare pathname		 char (168);	/* pathname of database model/submodel opening */
	declare structure_version	 fixed bin;	/* desired structure version */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment size */
	declare (addr, fixed, null, rel, unspec) builtin;
	declare 1 my_area_info	 like area_info;	/* local copy */

%include mrds_database_list;
%page;
%include mrds_database_openings;
%page;
%include mrds_dbcb;
%page;
%include mdbm_rm_db_info;
%page;
%include area_info;

     end;
