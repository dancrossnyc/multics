/****^  ********************************************
        *                                          *
        * Copyright, (C) Honeywell Bull Inc., 1988 *
        *                                          *
        ******************************************** */

mrds_dsl_func_:
    proc ();

/* NOTES:

   This  procedure translates a function reference within a -where clause into
   a  tabular representation easily processed by mrds_dsl_search.  An argument
   list  and  entry  pointer are set up so that the function may be called via
   cu_$gen_call.  Also, assign_ data is supplied to simplify conversions.



   HISTORY:

   77-06-01 J. A. Weeeldreyer: Initially written.

   78-02-01  J.   A.   Weeldreyer:  Modified to properly handle expr.  without
   variables.

   79-02-01 J. A. Weeldreyer: Modified for MR7.0.

   79-06-27 Al Kepner: Modified to use select_area.

   80-02-01 Jim Gray : Modified to add area_ptr parameter.

   80-09-24  Davids:  added  to the code that handles attributes a check to be
   sure  that  the  user has read permission on the attribute, if not the code
   dies  with  an  incorrect  access  error.   also removed declared but never
   referenced variables that did not occur in an include file.

   80-11-05  Jim Gray : Modified to "and" the mdbm_secured bit with the r_perm
   bit in the attr_info, so that secure_mrds_db turns on this check.

   81-05-06  Rickie  E.  Brinegar: Modified to use the modified rm_domain_info
   structure.

   81-06-01 Jim Gray : changed to use new resultant.


   81-06-23 Jim Gray : added call to mrds_dsl_get_builtins to get builtin
   scalar function definitions only on an as needed basis.

   81-07-20 Jim Gray : fixed search loop for scalar function  names,
   so that an unknown function name did not erference through a null
   ptr.

   83-09-13 R. Harvey : added knowledge of the range structure so that the
   needed_bits could be set. Also removed a / operator from automatic storage
   initialization.

   84-09-20 Hergert: Made -compiled and .X. illegal tokens in functions.

   84-11-01 John Hergert: added call to mu_print_error for error reporting.

*/

/****^  HISTORY COMMENTS:
  1) change(87-01-22,Hergert), approve(88-05-19,MCR7903),
     audit(88-07-05,Dupuis), install(88-08-01,MR12.2-1073):
     For new parser.
                                                   END HISTORY COMMENTS */


init:
    entry (psi_ptr,dbcb_ptr, fn_name, a_sfi_ptr, a_select_area_ptr, level, code);

dcl     a_sfi_ptr		 ptr parameter;

        sfi_ptr = a_sfi_ptr;
        select_area_ptr = a_select_area_ptr;
        done = "0"b;
        do while (^done);
	  if sfi_ptr = null ()
	  then done = "1"b;
	  else if fn_name = scalfn_info.name
	       then done = "1"b;
	       else sfi_ptr = scalfn_info.fwd_ptr;
        end;

        if sfi_ptr = null
        then					/* if didnt find it */
	   call error (mrds_error_$undef_fun, LOUD, 0, WCF_TYPE,
	        "Cannot find the function '" || fn_name || "'.");

        nsf_args_init = mrds_data_$max_sf_args;		/* all ok, alloc. fn. structure */
        allocate scalfn in (select_area);		/*  Allocations in select_area are never freed.  This area
						   is reinitialized for each new selection expression. */

        scalfn.nargs = 0;				/* initialize */
        scalfn.arg_list_ptr = null;
        scalfn.entry_ptr = scalfn_info.entry_ptr;

        if level=1 then allocate sfptrs in (parser_work_area);

        sfn_ptrs (level) = sfn_ptr;
        sfi_ptrs (level) = sfi_ptr;

        return;

build_attribute:
    entry (psi_ptr,dbcb_ptr, range_ptr, rel_index, ai_ptr, level, code);
						/* tuple attribute */

dcl     ai_ptr		 ptr;
dcl     rel_index		 fixed bin;

        sfn_ptr = sfn_ptrs (level);

        if scalfn.nargs >= mrds_data_$max_sf_args
        then					/* check for overflow */
	   call error (mrds_error_$max_sf_args, LOUD, 0, WCF_TYPE, "");

        rai_ptr = ai_ptr;
        if rm_attr_info.mdbm_secured & ^(rm_attr_info.read_perm)
						/* if you don't have read access to an attribute */
        then call error (mdbm_error_$inc_attr_acc, LOUD, 0, AV_TYPE,
	        "You must have read access to use an attribute in a function."
	        );				/* it shouldn't be in a function */
        rdi_ptr = rm_attr_info.domain_ptr;

/* Say this attribute is needed */
        range.tup_var (rel_index).needed_bits
	   .attr (rm_attr_info.defn_order) = "1"b;

        li.encd_proc = "0"b;
        li.src_ptr,
	   li.srcd_ptr,
	   li.encdd_ptr = null;

        li.litd_ptr = addr (rm_domain_info.user_desc);
        li.encd_blen = 0;
        call mrds_dsl_make_literal$alloc (dbcb_ptr, addr (li), code);
        if code ^= 0 then call error (code, LOUD, 0, WCF_TYPE, "");

        scalfn.nargs = scalfn.nargs + 1;		/* add tuple attr. arg. */
        scalfn.arg.type (scalfn.nargs) = DATABASE;
        scalfn.arg.must_convert (scalfn.nargs) = "0"b;	/* for now */
        scalfn.arg.desc (scalfn.nargs) = li.litd_ptr -> bit36;
        scalfn.arg.loc_index (scalfn.nargs) = li.lit_offset;
        scalfn.arg.bit_length (scalfn.nargs) = li.lit_blen;
        scalfn.arg.ai_ptr (scalfn.nargs) = rai_ptr;
        scalfn.arg.ef_ptr (scalfn.nargs) = null;
        scalfn.arg.assn_ptr (scalfn.nargs) = li.lit_ptr;

        return;

build_expr_func:
    entry (psi_ptr,dbcb_ptr, efd_ptr, expression, level, code);

/* Procedure to fill in argument information, fiven the info in ef_data. */

dcl     expression		 aligned bit (1);

        sfn_ptr = sfn_ptrs (level);

        if scalfn.nargs >= mrds_data_$max_sf_args
        then					/* check for overflow */
	   call error (mrds_error_$max_sf_args, LOUD, 0, WCF_TYPE, "");


        scalfn.nargs = scalfn.nargs + 1;		/* add the argument */

        if expression
        then scalfn.arg.type (scalfn.nargs) = EXPR;
        else scalfn.arg.type (scalfn.nargs) = SCAL_FUN;

        scalfn.arg.must_convert (scalfn.nargs) = "0"b;
        scalfn.arg.desc (scalfn.nargs) = exp_fun_data.descriptor;
        scalfn.arg.loc_index (scalfn.nargs) = exp_fun_data.loc_index;
        scalfn.arg.bit_length (scalfn.nargs) = exp_fun_data.bit_length;
        scalfn.arg.assn_ptr (scalfn.nargs) = exp_fun_data.assn_ptr;
        scalfn.arg.ai_ptr (scalfn.nargs) = null;
        scalfn.arg.ef_ptr (scalfn.nargs) = exp_fun_data.ef_ptr;


        return;

build_literal:
    entry (psi_ptr,dbcb_ptr, a_ptr, d_ptr, level, code);

/* Procedure to add a literal argument to the function structure */

dcl     (a_ptr, d_ptr)	 ptr;

        sfn_ptr = sfn_ptrs (level);

        if scalfn.nargs >= mrds_data_$max_sf_args
        then					/* check for overflow */
	   call error (mrds_error_$max_sf_args, LOUD, 0, WCF_TYPE, "");

        scalfn.nargs = scalfn.nargs + 1;		/* add the literal arg. */
        scalfn.arg.type (scalfn.nargs) = LITERAL;
        scalfn.arg.must_convert (scalfn.nargs) = "0"b;
        scalfn.arg.desc (scalfn.nargs) = d_ptr -> bit36;
        scalfn.arg.ai_ptr (scalfn.nargs),
	   scalfn.arg.ef_ptr (scalfn.nargs) = null;
        li.src_ptr = a_ptr;				/* get place to put it, and move it in */
        li.srcd_ptr,
	   li.litd_ptr = d_ptr;

        li.encd_proc = "0"b;
        li.encdd_ptr = null;

        li.encd_blen = 0;
        call mrds_dsl_make_literal (dbcb_ptr, addr (li), code);
        if code ^= 0 then call error (code, LOUD, 0, WCF_TYPE, "");
        scalfn.arg.assn_ptr (scalfn.nargs) = li.lit_ptr;

        return;

finish:
    entry (psi_ptr,dbcb_ptr, a_select_area_ptr, area_ptr, efd_ptr, level, code);


        select_area_ptr = a_select_area_ptr;
        wa_ptr = area_ptr;
        sfi_ptr = sfi_ptrs (level);
        sfn_ptr = sfn_ptrs (level);
        dbcb.possible_op = "0"b;			/* arith. oper. not possible here */

/* At this point, the entire function arg list has been parsed.  We now finish the
   argument list. */

        if scalfn_info.info_ent_ptr ^= null then do;	/* function accepts variable input */
	  allocate arg_descs in (work_area);
	  do i = 1 to arg_descs.ndescs;		/* fill in descriptors for info entry */
	      arg_descs.desc (i) = scalfn.arg.desc (i);
	  end;
	  call cu_$ptr_call (scalfn_info.info_ent_ptr, ad_ptr,
	       scalfn.rslt_desc);			/* get descriptor for result */
	  if scalfn.rslt_desc = "0"b
	  then call error (mrds_error_$unaccep_fn_args, LOUD, 4, WCF_TYPE,
		  "Could not determine data type of function result.");
	  ad_ptr = null;
	  do i = 1 to scalfn.nargs;
	      scalfn.arg.must_convert (i) = "0"b;	/* no need to convert in this case */
	  end;
        end;					/* if function accepts variable input */

        else do;					/* if function accepts fixed args */
	  if scalfn.nargs ^= scalfn_info.nargs
	  then do;
	      call ioa_$rsnnl (
		 "^d argument^[ was^;s were^] supplied, ^d ^[was^;were^] expected.",
		 err_msg, err_msg_len,
		 scalfn.nargs, (scalfn.nargs = 1),
		 scalfn_info.nargs, (scalfn_info.nargs = 1));
	      call error (mrds_error_$unaccep_fn_args, LOUD, 4, WCF_TYPE,
		 err_msg);
	  end;
	  scalfn.rslt_desc = scalfn_info.rslt_desc;	/* get descriptor of result */
	  do i = 1 to scalfn.nargs;			/* check conversion requirements of each arg. */
	      if scalfn_info.arg_desc (i) ^= scalfn.arg.desc (i) then do;
						/* if needs conversion */
		scalfn.arg.must_convert (i) = "1"b;	/* remember to convert */

		li.encd_proc = "0"b;
		li.src_ptr,			/* make space for converted value */
		     li.srcd_ptr,
		     li.encdd_ptr = null;


		li.litd_ptr = addr (scalfn_info.arg_desc (i));
		li.encd_blen = 0;
		call mrds_dsl_make_literal$alloc (dbcb_ptr, addr (li),
		     code);
		if code ^= 0
		then call error (code, LOUD, 4, WCF_TYPE, "");
		scalfn.arg.arg_desc (i) = scalfn_info.arg_desc (i);
						/* required descriptor */
		scalfn.arg.arg_assn_ptr (i) = li.lit_ptr;
	      end;				/* if conversion required */
	      else scalfn.arg.must_convert (i) = "0"b;
	  end;					/* loop through args */
        end;					/* if fixed args */

        li.encd_proc = "0"b;
        li.src_ptr,					/* save space for result */
	   li.srcd_ptr,
	   li.encdd_ptr = null;

        li.litd_ptr = addr (scalfn.rslt_desc);
        li.encd_blen = 0;
        call mrds_dsl_make_literal$alloc (dbcb_ptr, addr (li), code);
        if code ^= 0 then call error (code, LOUD, 4, WCF_TYPE, "");
        exp_fun_data.descriptor = scalfn.rslt_desc;	/* fill in result info */
        exp_fun_data.assn_ptr = li.lit_ptr;
        exp_fun_data.ef_ptr = sfn_ptr;
        exp_fun_data.loc_index = li.lit_offset;
        exp_fun_data.bit_length = li.lit_blen;

        nargs = scalfn.nargs + 1;			/* allocate and build arg list for calling function */
        num_ptrs = 2 * nargs;
        allocate arg_list in (select_area);		/* Allocations in select_area are never freed.  This area
						   is reinitialized for each new selection expression. */
        scalfn.arg_list_ptr = al_ptr;
        arg_list.arg_count,				/* fill in arg list header */
	   arg_list.desc_count = num_ptrs;
        arg_list.code = NORM;
        arg_list.pad = 0;
        do i = 1 to scalfn.nargs;			/* fill in arg and desc pointers for all input args */
	  if scalfn.arg.must_convert (i) then do;	/* if separate arg pointers */
	      arg_list.arg_des_ptr (i) =
		 set_arg_ptr (scalfn.arg.arg_assn_ptr (i),
		 (scalfn.arg.arg_desc (i)));
	      arg_list.arg_des_ptr (i + nargs) =
		 addr (scalfn.arg.arg_desc (i));
	  end;
	  else do;				/* no separate arg pointers */
	      arg_list.arg_des_ptr (i) =
		 set_arg_ptr (scalfn.arg.assn_ptr (i),
		 (scalfn.arg.desc (i)));
	      arg_list.arg_des_ptr (i + nargs) = addr (scalfn.arg.desc (i));
	  end;
        end;					/* loop through input args */
        arg_list.arg_des_ptr (nargs) =
	   set_arg_ptr (exp_fun_data.assn_ptr, (exp_fun_data.descriptor));
						/* fill in info for result */
        arg_list.arg_des_ptr (2 * nargs) = addr (scalfn.rslt_desc);

        sfn_ptrs (level) = null;
        code = 0;					/* give caller good news */
        return;

set_arg_ptr:
    proc (a_ptr, a_desc) returns (ptr);

/* procedure to return a valid arg pointer given an internal pointer, i.e.
   resolves the var. str. problem. */

dcl     a_ptr		 ptr;
dcl     r_ptr		 ptr;
declare a_desc		 bit (36);

        if addr (a_desc) -> descriptor.type = 20
	   | addr (a_desc) -> descriptor.type = 22
        then
	   r_ptr = addrel (a_ptr, 1);
        else r_ptr = a_ptr;
        return (r_ptr);

    end set_arg_ptr;

error:
    proc (cd, loud, stack_offset, error_type, message);

dcl     cd		 fixed bin (35);		/* standard error code */
dcl     loud		 bit (1) aligned;		/* OFF => dont print or signal error */
dcl     stack_offset	 fixed bin;		/* offset from ls_top of where token is in lex stack */
dcl     error_type		 char (*);
dcl     message		 char (*);

        se_info_ptr = dbcb.se_info_ptr;

        code = cd;

        se_info.loud = loud;
        se_info.error_type = error_type;
        se_info.token_start = 0;
        se_info.stack_offset = stack_offset;		/* save this for semantics */
        se_info.error_msg = message;
        se_info.error_info_supplied = "1"b;		/* so no one else handles it */

        goto exit;

    end error;

%include mrds_dbcb;
%page;
%include mrds_se_info;
%page;
%include mrds_exp_fun_data;
%page;
%include mrds_expressions;
%page;
%include mdbm_arg_list;
%page;
%include mrds_scalfn_info;
%page;
%include mrds_lit_info;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_rm_domain_info;
%page;
%include mrds_range;
%page;
%include mrds_select_area;
%page;
%include mdbm_seg_area;
%page;
%include mdbm_descriptor;

dcl     (
        nargs,					/* number of args in arg list */
        i						/* internal index */
        )			 fixed bin;		/* id of current token */

dcl     (
        wa_ptr,					/* pointer to work area */
        ad_ptr,
        a_select_area_ptr
        )			 ptr;			/* pointer to list of descriptors for info entry */

dcl     (
        code					/* Output:  status code */
        )			 fixed bin (35);		/* internal status code */

dcl     fn_name		 char (*);		/* Input:  name of functions */

dcl     1 arg_descs		 aligned based (ad_ptr),	/* list of descriptors for fn info entry */
	2 ndescs		 fixed bin,
	2 desc		 (scalfn.nargs refer (arg_descs.ndescs))
			 bit (36);

dcl     bit36		 bit (36) based;
dcl     work_area		 area (sys_info$max_seg_size) based (wa_ptr);
dcl     1 li		 aligned like lit_info;

dcl     NORM		 fixed bin (17) int static init (4)
			 options (constant);

dcl     (
        mrds_data_$max_attributes,
        mrds_data_$max_expr_stack_size,
        mrds_data_$max_id_len,
        mrds_data_$max_sf_args,
        mrds_error_$max_sf_args,
        mrds_error_$undef_fun,
        mrds_error_$unaccep_fn_args,
        mdbm_error_$inc_attr_acc,
        sys_info$max_seg_size
        )			 fixed bin (35) ext;

dcl     (null,
        addr,
        fixed,
        rel,
        addrel)		 builtin;

dcl     cu_$ptr_call	 entry options (variable);
dcl     mrds_dsl_make_literal	 entry (ptr, ptr, fixed bin (35));
dcl     mrds_dsl_make_literal$alloc
			 entry (ptr, ptr, fixed bin (35));
declare done		 bit (1);			/* on => get out of loop */
declare area_ptr		 ptr;
dcl     err_msg		 char (256);
dcl     err_msg_len		 fixed bin;
dcl     level		 fixed bin;
dcl     LOUD		 bit (1) aligned internal static
			 options (constant) init ("1"b);
dcl     se_info_ptr		 ptr;
dcl     1 sfptrs aligned based(parser_static_info.sfptrs_ptr),
          2 stack (mrds_data_$max_expr_stack_size),
            3 sfn_ptrs ptr,
            3 sfi_ptrs ptr;
dcl     ioa_$rsnnl		 entry () options (variable);
exit:
    end mrds_dsl_func_;
