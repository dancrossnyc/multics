/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

mrds_dsl_get_builtins: procedure (dbcb_ptr, error_code);

/*
                   BEGIN_DESCRIPTION
   This routine builds a threaded list of known mrds builtin
   scalar functions from the object mrds_builtin_ and puts the
   head of that list in a pointer at dbcb.sfi_ptr.
                   END_DESCRIPTION
*/

/* PARAMETERS:

   dbcb_ptr - - (input) pointer, pointer to the dbcb structure (mrds_dbcb.incl.pl1)
   for the database opening involved.

   error_code - - (output) fixed bin (35), status error code

*/

/* HISTORY:

   81-06-23 Jim Gray : moved code from mrds_dsl_open  into  separate
   routine,  to  be  called  only  when  a builtin function is first
   referenced, for performance purposes.

   81-09-15 Davids: changed declaration of caller_name to char  (21)
   from  char  (15)  since caller name is 21 characters and the code
   will not compile when -prefix stringsize is used.

   81-09-21 Davids: modified code to determine if external entry  is
   a  function to first check the length of the name and if its less
   than 6 characters assume its a  function  name  since  since  all
   _info  entries  are  at  least  6  characters.  This  prevents  a
   stringrange error from occuring when a subtr is done on the  name
   to determine if the last 5 characters are _info

   83-02-28 Davids: explicitly declared variables that were declared by
   context of implication and removed declarations to variables that
   were never referenced.
*/


	call cu_$decode_entry_value (mrds_builtin_, mb_ptr, ptr_sink); /* get pointer to mrds_builtin_ object */
	if mb_ptr = null () then do;
		error_code = mrds_error_$bad_builtin_obj;
		call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
		     "No mrds_builtin_ object segment was found.");
	     end;
	else do;					/* if found segment */

/* get the object info for the segment */

		mb_ptr = ptr (mb_ptr, 0);		/* point to base of seg */

		call hcs_$status_mins (mb_ptr, mb_type, mb_bc, error_code); /* get bit count */
		if error_code ^= 0 then
		     call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
			"Unable to get bit count of mrds_builtin_ object segment.");
		else do;

			call object_info_$brief (mb_ptr, mb_bc, addr (obj_info), error_code); /* get object data */
			if error_code ^= 0 then
			     call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
				"Unable to get the object data for mrds_builtin_ object segment.");
			else do;

/* find the mrds_builtin_ definition in the object segment */

				found = "0"b;
				end_of_def = "0"b;
				do d_ptr = addrel (obj_info.defp, obj_info.defp -> bit18) /* search for class 3 defn */
				     repeat addrel (obj_info.defp, d_ptr -> definition.value)
				     while (^found & ^end_of_def);

				     if addrel (obj_info.defp, d_ptr -> definition.symbol) -> acc.string = MB then do;
					     found = "1"b;
					     saved_d_ptr = d_ptr;
					end;
				     else if addrel (obj_info.defp, d_ptr -> definition.forward) -> bit18 ^= "0"b then ;
				     else end_of_def = "1"b;

				end;

				if ^found then do;
					error_code = mrds_error_$bad_builtin_obj;
					call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
					     "Unable to find a definition for mrds_builtin_ in the object segment.");
				     end;
				else do;

/* look through all entry points in this block */

					d_ptr = saved_d_ptr;

					do d_ptr = addrel (obj_info.defp, d_ptr -> definition.segname)
					     repeat addrel (obj_info.defp, d_ptr -> definition.forward)
					     while (d_ptr -> definition.class ^= SEG
					     & error_code = 0 & d_ptr -> definition.forward ^= "0"b);

/* is this an external entry point */

					     if d_ptr -> definition.class ^= TEXT
						| d_ptr -> definition.flags.ignore
						| ^d_ptr -> definition.flags.entry then ;
					     else do; /* if external entry point */

/* is this external entry a function */

						     acc_ptr = addrel (obj_info.defp, d_ptr -> definition.symbol); /* entry ptr */

/* BEGIN CHANGE 81-09-21 */

						     flag = "0"b;
						     if acc.len < 6
						     then flag = "1"b;
						     else
							if substr (acc.string, acc.len - 4, 5) ^= "_info" & acc.string ^= MB
						     then flag = "1"b;

						     if flag
						     then do; /* if not info or mrds_builtin_ entry */

/* END    CHANGE 81-09-21 */

/* entry = function, thread it onto the list */

							     call mrds_dsl_thread_fn_list (dbcb_ptr,
								addrel (obj_info.textp, d_ptr -> definition.value), error_code);
							     if error_code = 0 then ;
							     else call sub_err_ (error_code, caller_name, continue,
								     info_ptr, return_value, "^/^a",
								     "Unable to add a function info to the list of builtins.");
							end; /* if true function entry */
						end; /* if text entry */
					end;	/* entry point loop */

/* make sure at least one function was defined */

					if dbcb.sfi_ptr ^= null | error_code ^= 0 then ;
					else do;	/* if did not find any builtins */
						error_code = mrds_error_$bad_builtin_obj;
						call sub_err_ (error_code, caller_name, continue, info_ptr, return_value, "^/^a",
						     "No builtin function definitions were found in the object mrds_builtin_.");
					     end;
				     end;
			     end;
		     end;
	     end;					/* if builtin segment found */

	dcl     1 acc		 aligned based (acc_ptr), /* template for acc string */
		2 len		 fixed bin (8) unal,
		2 string		 char (0 refer (acc.len)) unal;

	dcl     SEG		 init ("011"b) bit (3) int static options (constant);
	dcl     TEXT		 init ("000"b) bit (3) int static options (constant);

	declare mb_ptr		 ptr;
	declare d_ptr		 ptr;
	declare ptr_sink		 ptr;
	declare acc_ptr		 ptr;
	declare found		 bit (1);		/* on => class 3 definition for mrds_builtin_ found */
	declare end_of_def		 bit (1);		/* on => end of definition section */
	declare saved_d_ptr		 ptr;		/* temporary storage for pointer to found definition */
	declare MB		 char (13) init ("mrds_builtin_"); /* name of object definition */
	declare sub_err_		 entry options (variable); /* error reporting routine */
	declare caller_name		 char (21) init ("mrds_dsl_get_builtins");
						/* CHANGE 81-09-15 name of calling routine */
	dcl     flag		 bit (1) unal;	/* CHANGE 81-09-21 a decision flag */
	declare continue		 char (1) init ("c"); /* don't stop after printing */
	declare info_ptr		 ptr init (null ());/* unused */
	declare return_value	 fixed bin (35) init (0); /* unused */
	declare error_code		 fixed bin (35);	/* error status encoding */
	dcl     object_info_$brief	 entry (ptr, fixed bin (24), ptr, fixed bin (35));
	dcl     hcs_$status_mins	 entry (ptr, fixed bin (2), fixed bin (24), fixed bin (35));
	dcl     cu_$decode_entry_value entry (entry, ptr, ptr);
	declare mrds_builtin_	 entry ();
	dcl     mrds_dsl_thread_fn_list entry (ptr, ptr, fixed bin (35));
	declare mrds_error_$bad_builtin_obj fixed bin (35) ext;
	declare sys_info$max_seg_size	 fixed bin (35) ext;
	declare (fixed, addr, addrel, rel, null, ptr, substr) builtin;

	dcl     bit18		 bit (18) based;	/* template */
	dcl     mb_bc		 fixed bin (24);	/* bit count of builtin seg */
	dcl     mb_type		 fixed bin (2);	/* seg type code for mrds_builtin_ */
	dcl     1 obj_info		 aligned like object_info;

%include mrds_dbcb;
%page;
%include definition;
%page;
%include object_info;

     end;
