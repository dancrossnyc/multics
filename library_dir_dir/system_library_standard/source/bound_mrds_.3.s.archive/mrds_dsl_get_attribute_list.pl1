/* ***********************************************************
   *                                                         *
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *                                                         *
   *********************************************************** */

mrds_dsl_get_attribute_list: get_attribute_list: procedure (db_index, relation_name, area_ptr,
	structure_version, mrds_attribute_list_ptr, error_code);

/* DESCRIPTION:

   Given a database opening index, and a pointer to a freeing area,
   and the name of a relation for which information is desired,
   this routine will return a structure containing the names
   of all the attributes in the model that the opening has in it's view.
   It indicates whether this was a submodel
   opening, and returns submodel alias names as well in that case.
   The name of the attributes domain is returned, along with
   descriptors for both the database and user views of the data type
   (these will be the same unless a domain -decode_dcl was used in the CMDB source)
   It also indicates whether the attribute can be used as indexed.
*/

/* PARAMETERS:

   db_index - - (input) fixed bin(35), the database opening index as returned from dsl_$open,
   this may be an opening through either a model or submodel of any version.

   relation_name - - (input) char(*), the name of the relation for which attriubtes
   detailed information is to be returned. If this is a submodel opening,
   then the submodel name of the relation should be used.

   area_ptr - - (input) ptr, pointer to a freeing area in which the returned
   structure is to be allocated. Allow about 40 words per expected attribute for the area size.

   structure_version - - (input) fixed bin, the desired version of the structure
   that is to be returned.

   mrds_attribute_list_ptr - - (output) ptr, points to the allocated structure
   as defined in the include file mrds_attribute_list.incl.pl1

   error_code - - (output) fixed bin(35), the error status encoding, 0 unless an error occured.
*/

/* HISTORY:

   Originally written by Jim Gray - - March 1981

   81-06-01 Jim Gray : modified to use new resultant structure.

   81-12-15 R. Lackey : Modified to search rm_rel_array for full name. TR11887

   83-02-18 B. G. Moberg : Added check to detect long relation names

   83-04-07 Davids: Explicitly declared the builtin function length.
*/

/* initialize */

	error_code = 0;
	mrds_attribute_list_ptr = null ();
	clean_up_condition = "0"b;

	on cleanup begin;
		clean_up_condition = "1"b;
		call clean_up ();
	     end;

/*  check for a valid opening index */

	call mu_database_index$get_resultant_model_pointer (db_index, dbcb_ptr);
	if dbcb_ptr = null () then
	     error_code = mrds_error_$invalid_db_index;
	else do;

/* good opening index, check for a good area */

		if area_ptr = null () then
		     error_code = error_table_$badcall;
		else do;
			unspec (my_area_info) = "0"b;
			my_area_info.version = 1;
			my_area_info.areap = area_ptr;

			call area_info_ (addr (my_area_info), error_code);
			if error_code ^= 0 then ;	/* couldn't get area info */
			else if my_area_info.no_freeing then
			     error_code = mrds_error_$not_freeing_area;
			else do;

/* check for a known structure version */

				if structure_version ^= mrds_attribute_list_structure_version then
				     error_code = error_table_$unimplemented_version;
				else do;

/* check for a supported database version */

					rdbi_ptr = dbcb.rdbi_ptr;
					if rm_db_info.db_version ^= 4 then
					     error_code = mrds_error_$version_not_supported;
					else do;

/* check on the user class for secured databases */

						call mrds_dm_authorization$get_user_class
						     (rtrim (rm_db_info.db_path), addr (local_area),
						     mrds_authorization_structure_version, mrds_authorization_ptr, error_code);

/* check for a known relation name */

						if error_code = 0 then
						     call check_relation ();

						if error_code = 0 then do;

/* set up for too small an area given */

							on area begin;
								error_code = error_table_$area_too_small;
								goto skip_allocate;
							     end;

/* fill in the info in a structure in the users area */

							mrds_attribute_list_num_attrs_init = rm_rel_info.num_attr;
							allocate mrds_attribute_list set (mrds_attribute_list_ptr) in (users_area);
							revert area;

							unspec (mrds_attribute_list) = "0"b;
							mrds_attribute_list.version = mrds_attribute_list_structure_version;
							mrds_attribute_list.num_attrs_in_view = mrds_attribute_list_num_attrs_init;
							mrds_attribute_list.submodel_view = dbcb.dsm_sw;

							if rm_db_info.mdbm_secured then
							     mrds_attribute_list.access_info_version = 5;
							else mrds_attribute_list.access_info_version = 4;

/* fill in the details for each attribute in the view */

							do i = 1 to mrds_attribute_list_num_attrs_init;

							     call get_attribute_data ();

							end;

						     end;
					     end;
				     end;
			     end;
		     end;
	     end;

skip_allocate:

	return;

check_relation: procedure ();

/* routine to check for a good relation name, and get the
   acl's set on it for use as the attribute acl */

	rmra_ptr = rm_db_info.ra_ptr;
	i = 1;

/* see if the given name is in this view of the database */


/* BEGIN CHANGE 81-12-15 RDL ********************************************** */

	if length (rtrim (relation_name)) > 30
	then do;
		error_code = mrds_error_$rel_name_too_long;
		return;
	     end;
	rel_name_32 = rtrim (relation_name);
	i = index (string (rm_rel_array.name), "!" || rel_name_32);

/* BEGIN CHANGE 81-12-15 RDL ********************************************** */


	if i = 0 then
	     error_code = mrds_error_$unknown_relation_name;
	else do;

		i = ((i - 1) / 33) + 1;		/* convert from char to array index */

/* good relation name, get it's multics acls */

		rmri_ptr = rm_rel_array.rel_data (i).ri_ptr;

		call mu_get_relation_acl (rtrim (rm_db_info.db_path),
		     rtrim (rm_rel_info.model_name),
		     mrds_authorization.administrator,
		     read_acl, write_acl, error_code);

		if error_code = 0 then do;

			multics_access_string = "";

			if read_acl then
			     multics_access_string = multics_access_string || "r";

			if write_acl then
			     multics_access_string = multics_access_string || "w";

			if multics_access_string = "" then
			     multics_access_string = "n";
		     end;

	     end;

     end;

get_attribute_data: procedure ();

/* routine to get the data for an individual attribute in the users view */

	rai_ptr = rm_rel_info.attr_ptrs (i);
	mrds_attribute_list.attribute (i).submodel_name = rm_attr_info.name;
	rdi_ptr = rm_attr_info.domain_ptr;
	mrds_attribute_list.attribute (i).user_data_type =
	     rm_domain_info.user_desc;
	mrds_attribute_list.attribute (i).indexed =
	     ((rm_attr_info.index_attr) |
	     ((rm_attr_info.key_attr) & (rm_attr_info.key_order = 1)));

/* only DBA's can know model names in a secured db */

	if rm_db_info.mdbm_secured & ^mrds_authorization.administrator then do;
		mrds_attribute_list.attribute (i).domain_name = " ";
		mrds_attribute_list.attribute (i).model_name = " ";
	     end;
	else do;
		mrds_attribute_list.attribute (i).model_name = rm_attr_info.model_name;
		mrds_attribute_list.attribute (i).domain_name = rm_domain_info.name;
	     end;

/* find out what the multics acls are on this attribute */

	mrds_attribute_list.attribute (i).system_acl = multics_access_string;

	if mrds_attribute_list.access_info_version = 4 then
	     mrds_attribute_list.attribute (i).mrds_access,
		mrds_attribute_list.attribute (i).effective_access =
		mrds_attribute_list.attribute (i).system_acl;

/* fill in the access for submodel security */

	else do;					/* version 5 submodel security */

		mrds_access_string = "";

		if rm_attr_info.read_perm then
		     mrds_access_string = mrds_access_string || "r";
		if rm_attr_info.modify_perm then
		     mrds_access_string = mrds_access_string || "m";
		if mrds_access_string = "" then
		     mrds_access_string = "n";

		mrds_attribute_list.attribute (i).mrds_access = mrds_access_string;

/* fill in the effective access for attribute level security */

		if write_acl then
		     mrds_attribute_list.attribute (i).effective_access = mrds_access_string;
		else if read_acl &
			index (mrds_access_string, "r") ^= 0 then
		     mrds_attribute_list.attribute (i).effective_access = "r";
		else mrds_attribute_list.attribute (i).effective_access = "n";
	     end;
     end;

clean_up: procedure ();

/* routine to get rid of allocated space, if an error
   occurs, or cleanup is signaled */

	if clean_up_condition then do;

		if mrds_attribute_list_ptr ^= null () then do;

			free mrds_attribute_list_ptr -> mrds_attribute_list in (users_area);

			mrds_attribute_list_ptr = null ();

		     end;

	     end;

     end;

	declare area		 condition;	/* happens when space too small */
	declare area_info_		 entry (ptr, fixed bin (35)); /* gets details on the area */
	declare area_ptr		 ptr;		/* points to a freeing area */
	declare clean_up_condition	 bit (1);		/* set on if cleanup signaled */
	declare cleanup		 condition;	/* occurs upon quit/release */
	declare db_index		 fixed bin (35);	/* database opening index */
	declare error_code		 fixed bin (35);	/* error status encoding */
	declare error_table_$area_too_small fixed bin (35) ext; /* area too small error */
	declare error_table_$badcall	 fixed bin (35) ext;/* null area ptr */
	declare error_table_$unimplemented_version fixed bin (35) ext; /* unknown structure version */
	declare i			 fixed bin;	/* loop index */
	declare local_area		 area (1024);	/* space for return args */
	declare mu_get_relation_acl	 entry (char (*), char (*),
				 bit (1), bit (1), bit (1), fixed bin (35)); /* gets Multics acl's */
	declare mu_database_index$get_resultant_model_pointer entry (fixed bin (35), ptr); /* gets pointer to resultant model */
	declare mrds_access_string	 char (4) varying;	/* mrds access encoding */
	declare mrds_dm_authorization$get_user_class entry (char (*), ptr, fixed bin, ptr, fixed bin (35)); /* gets user class */
	declare mrds_error_$invalid_db_index fixed bin (35) ext; /* bad opening index */
	declare mrds_error_$not_freeing_area fixed bin (35) ext; /* area without freeing attribute */
	declare mrds_error_$rel_name_too_long fixed bin (35) ext; /* name too long */
	declare mrds_error_$unknown_relation_name fixed bin (35) ext; /* name not in opening view */
	declare mrds_error_$version_not_supported fixed bin (35) ext; /* not version 4 or later */
	declare multics_access_string	 char (4) varying;	/* multics access encoding */
	declare read_acl		 bit (1);		/* on => "r" Multics acl on relation data */
	declare relation_name	 char (*);	/* name of relation for which info is desired */
	dcl     rel_name_32		 char (32);	/* Used to search rm_rel_array */
	declare structure_version	 fixed bin;	/* desired version of structure */
	declare sys_info$max_seg_size	 fixed bin (35) ext;/* largest segment */
	declare users_area		 area (sys_info$max_seg_size) based (area_ptr); /* overlay for input area */
	declare write_acl		 bit (1);		/* on => "w" Multics acl on relation data */
	declare (addr, empty, fixed, index, null,
	        rel, rtrim, string, length, unspec) builtin;
	declare 1 my_area_info	 like area_info;	/* local storage for area details */

%include mrds_attribute_list;
%page;
%include mdbm_rm_attr_info;
%page;
%include mdbm_rm_domain_info;
%page;
%include mrds_authorization;
%page;
%include mrds_dbcb;
%page;
%include mdbm_rm_rel_info;
%page;
%include mdbm_rm_rel_array;
%page;
%include mdbm_rm_db_info;
%page;
%include area_info;

     end;
