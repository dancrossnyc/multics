/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-08-20,DGHowe), approve(86-08-20,MCR7391),
     audit(86-08-01,Schroth), install(86-11-20,MR12.0-1222):
     removed unrequired declarations.
                                                   END HISTORY COMMENTS */


/* format: style2 */
cross_ring_io_:
     procedure;

/* CROSS_RING_IO_ - Handle iox attachments which cross ring boundaries.

   This module runs in the inner ring. It is called by a gate
   whose name depends on the inner target ring sought.

   THVV 2/77 */


/* Modified November 1981 by Benson I. Margulies to fix resused and misused
		 attachment index bug. */
/* Modified 9/10/82 by R. Lamson to fix syn_ attachments. */
/* Modified 10/82 BIM to keep table of valid indices to avoid construction */
/*	        of bogus blocks in mailboxes. */


/* parameters */

	dcl     iocb_ptr		 ptr;		/* pointer to outer ring iocb */
	dcl     inner_iocbp		 ptr;		/* ptr to switch in inner ring */
	dcl     blp		 ptr;		/* ptr to attachment permission block */

	dcl     switchname		 char (*);

	dcl     return_code		 fixed bin (35);
	dcl     open_mode		 fixed bin;	/* open mode for open call only */
	dcl     dummy		 bit (1) aligned;	/* extend sw for open call only */
	dcl     control_arg		 char (*);	/* arg for control call */
	dcl     control_ptr		 ptr;		/* arg for control call */
	dcl     old_modes		 char (*);	/* arg for modes call */
	dcl     new_modes		 char (*);	/* arg for modes call */
	dcl     (char_cnt, char_cnt1)	 fixed bin (21);	/* character count on iox call */
	dcl     char_ptr		 ptr;		/* character pointer on iox call */
	dcl     postype		 fixed bin;
	dcl     poscount		 fixed bin (21);
	dcl     key		 char (256) var;
	dcl     reclth		 fixed bin (21);


/* automatic storage */

	declare was_found		 bit (1) aligned;
	declare node_ptr		 pointer;
	dcl     save_level		 fixed bin;
	dcl     inner_index		 bit (72) aligned;
	declare i			 fixed bin;

	declare 1 inner_index_struc	 aligned,
		2 iocb_ptr	 pointer unaligned,
		2 block_ptr	 pointer unaligned;

/* entry variables */

	dcl     set_ext_variable_	 entry (character (*), pointer,
				 pointer, bit (1) aligned, pointer,
				 fixed binary (35));
	dcl     get_ring_		 entry () returns (fixed bin);
	dcl     cu_$level_get	 entry (fixed bin);
	dcl     cu_$level_set	 entry (fixed bin);

/* built in fuctions */

	dcl     (addr, hbound, null, rtrim, stackbaseptr, unspec)
				 builtin;


	dcl     1 block		 based (blp) aligned,
		2 sentinel	 character (16) aligned,
		2 name		 char (32) unaligned,
		2 head_ptr	 pointer,		/* will be correct ringno */
		2 validation	 fixed bin,
		2 permission_granted bit (1) aligned,
		2 i_opened	 bit (1),
		2 attach_count	 fixed bin,
		2 open_count	 fixed bin;

	declare BLOCK_SENTINEL	 character (16) init ("Cross Ring I/O") internal static options (constant);
	declare any_other		 condition;

	declare cross_ring_io_block_table_ptr_
				 ptr unaligned external static init (null ());
	declare 1 block_table	 aligned based (cross_ring_io_block_table_ptr_),
		2 count		 fixed bin,
		2 known		 (block_table_count refer (block_table.count)) bit (72) aligned;
						/* ""b if free */

	declare block_table_count	 fixed bin;


	dcl     error_table_$io_no_permission
				 fixed bin (35) ext;

%include iocb;
%include system_link_names;
%include iox_entries;
%include cross_ring_attach_data_;


/* helper for attach */

find_attachment:
     entry (switchname, inner_index, return_code);

	call setup;
	if addr (block_table) = null
	then do;
		block_table_count = 4;
		allocate block_table;
		block_table.known = ""b;
	     end;

/* cann't create it so pass null init iinfo and null seg ptr */

	call set_ext_variable_ (rtrim (var_name (switchname)), null (), 
	     stackbaseptr (), was_found, node_ptr, return_code);
	if ^was_found | return_code ^= 0
	then do;

NO_GO_ATTACHMENT:
		return_code = error_table_$io_no_permission;
		go to exit;
	     end;
	blp = node_ptr -> variable_node.vbl_ptr;


	call iox_$find_iocb (switchname, inner_iocbp, return_code);
	if return_code ^= 0
	then go to NO_GO_ATTACHMENT;			/* censor code*/

	if save_level > block.validation
	then go to NO_GO_ATTACHMENT;
	block.attach_count = block.attach_count + 1;
	inner_index_struc.block_ptr = blp;
	inner_index_struc.iocb_ptr = inner_iocbp;
FILL_IN:
	do i = 1 to hbound (block_table.known, 1);
	     if block_table.known (i) = ""b
	     then do;
		     block_table.known (i) = unspec (inner_index_struc);
		     go to FILLED_IN;
		end;
	end;
	call grow_block_table;
	go to FILL_IN;

FILLED_IN:
	inner_index = block_table.known (i);

	return_code = 0;
exit:
	call cu_$level_set (save_level);
	return;

/* helper for detach */

release_attachment:
     entry (inner_index, return_code);

	call setup;
	unspec (inner_index_struc) = inner_index;
	call validate_index (unspec (inner_index_struc), (null ()));

	block.attach_count = block.attach_count - 1;
	do i = 1 to hbound (block_table.known, 1);
	     if block_table.known (i) = unspec (inner_index_struc)
	     then do;
		     block_table.known (i) = ""b;
		     go to exit;
		end;
	end;
	go to exit;

/* helper for open */

open:
     entry (inner_index, open_mode, dummy, return_code);

	call setup;
	call validate_index (inner_index, inner_iocbp);

	block.open_count = block.open_count + 1;
	if inner_iocbp -> iocb.open_descrip_ptr = null
	then do;
		call iox_$open (inner_iocbp, open_mode, dummy, return_code);
		if return_code = 0
		then block.i_opened = "1"b;
		else block.open_count = block.open_count - 1;
	     end;
	go to exit;

/* helper for close */

close:
     entry (inner_index, return_code);

	call setup;
	call validate_index (inner_index, inner_iocbp);

	block.open_count = block.open_count - 1;
	if block.open_count > 0
	then go to exit;
	if block.i_opened
	then call iox_$close (inner_iocbp, return_code);
	block.i_opened = "0"b;
	go to exit;

/* control entry point */

control:
     entry (iocb_ptr, control_arg, control_ptr, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);

	call iox_$control (inner_iocbp, control_arg, control_ptr, return_code);
	go to exit;

/* modes entry */

modes:
     entry (iocb_ptr, new_modes, old_modes, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	call iox_$modes (inner_iocbp, new_modes, old_modes, return_code);
	go to exit;

/* read_key entry */

read_key:
     entry (iocb_ptr, key, reclth, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	call iox_$read_key (inner_iocbp, key, reclth, return_code);
	go to exit;

/* read_length entry */

read_length:
     entry (iocb_ptr, reclth, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	call iox_$read_length (inner_iocbp, reclth, return_code);
	go to exit;

/* delete_record entry */

delete_record:
     entry (iocb_ptr, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	call iox_$delete_record (inner_iocbp, return_code);
	go to exit;

/* entry point for put_chars. */

put_chars:
     entry (iocb_ptr, char_ptr, char_cnt, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	call iox_$put_chars (inner_iocbp, char_ptr, char_cnt, return_code);
	go to exit;

/* entry point for get_chars. */

get_chars:
     entry (iocb_ptr, char_ptr, char_cnt, char_cnt1, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	char_cnt1 = 0;
	call iox_$get_chars (inner_iocbp, char_ptr, char_cnt, char_cnt1, return_code);
	go to exit;

/* entry point for get_line. */

get_line:
     entry (iocb_ptr, char_ptr, char_cnt, char_cnt1, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	char_cnt1 = 0;
	call iox_$get_line (inner_iocbp, char_ptr, char_cnt, char_cnt1, return_code);
	go to exit;

/* entry point for read_record. */

read_record:
     entry (iocb_ptr, char_ptr, char_cnt, char_cnt1, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	char_cnt1 = 0;
	call iox_$read_record (inner_iocbp, char_ptr, char_cnt, char_cnt1, return_code);
	go to exit;

/* entry point for write_record. */

write_record:
     entry (iocb_ptr, char_ptr, char_cnt, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	call iox_$write_record (inner_iocbp, char_ptr, char_cnt, return_code);
	go to exit;

/* entry point for rewrite_record. */

rewrite_record:
     entry (iocb_ptr, char_ptr, char_cnt, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	call iox_$rewrite_record (inner_iocbp, char_ptr, char_cnt, return_code);
	go to exit;

/* entry point for position. */

position:
     entry (iocb_ptr, postype, poscount, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	return_code = 0;
	call iox_$position (inner_iocbp, postype, poscount, return_code);
	go to exit;

/* entry point for seek_key. */

seek_key:
     entry (iocb_ptr, key, char_cnt, return_code);

	call setup;
	inner_iocbp = validate_io (iocb_ptr);
	call iox_$seek_key (inner_iocbp, key, char_cnt, return_code);
	go to exit;


allow_cross:
     entry (x, v_arg, return_code);

	dcl     x			 char (*);
	dcl     v_arg		 fixed bin;


	begin;

%include system_link_init_info;
	     declare size		      builtin;	/* avoid confusion with structure component */
	     init_size = 0;
	     allocate init_info;
	     init_info.size = size (block);
	     init_info.type = NO_INIT;
	     was_found = "0"b;

/* no ptr init so pass null seg ptr */

	     call set_ext_variable_ (rtrim (var_name (x)), addr (init_info),
		stackbaseptr (), was_found, node_ptr, return_code);
	     if return_code ^= 0
	     then go to exit;
	     blp = node_ptr -> variable_node.vbl_ptr;
	end;

	if ^was_found
	then do;
		block.open_count, block.attach_count = 0;
		block.sentinel = BLOCK_SENTINEL;
		block.head_ptr = addr (block);
	     end;
	block.name = x;
	block.permission_granted = "1"b;
	block.validation = v_arg;


	return;


setup:
     proc;

	call cu_$level_get (save_level);
	call cu_$level_set (get_ring_ ());
	return_code = 0;

     end setup;

validate_io:
     procedure (iocbp) returns (pointer);
	declare iocbp		 pointer;
	declare inner_iocb		 pointer;

	call validate_index (iocbp -> iocb.actual_iocb_ptr -> iocb.attach_data_ptr -> attach_data.inner_index,
	     inner_iocb);
	return (inner_iocb);
     end validate_io;

validate_index:
     procedure (bits, iocb_ptr);
	declare bits		 bit (72) aligned;
	declare iocb_ptr		 pointer;

	declare 1 val_data		 aligned like inner_index_struc;

	unspec (val_data) = bits;
	on any_other go to BAD_POINTER;

	if cross_ring_io_block_table_ptr_ = null ()
	then goto BAD_POINTER;

	if ^found_block (unspec (val_data)) | val_data.block_ptr -> block.validation < save_level
						/** **/
	     | val_data.block_ptr -> block.name ^= val_data.iocb_ptr -> iocb.name
						/** **/
	     | val_data.block_ptr -> block.sentinel ^= BLOCK_SENTINEL
						/** **/
	     | ^val_data.block_ptr -> block.permission_granted
	then do;
BAD_POINTER:
		return_code = error_table_$io_no_permission;
		go to exit;
	     end;
	iocb_ptr = val_data.iocb_ptr;
	blp = val_data.block_ptr;			/* global */
	return;

found_block:
     procedure (ix) returns (bit (1) aligned);
	declare ix		 bit (72) aligned;
	declare i			 fixed bin;
	do i = 1 to hbound (block_table.known, 1);
	     if block_table.known (i) = ix
	     then return ("1"b);
	end;
	return ("0"b);
     end found_block;

     end validate_index;

grow_block_table:
     procedure;
	declare new_bt_p		 pointer;
	declare i			 fixed bin;

	block_table_count = block_table.count * 2;
	allocate block_table set (new_bt_p);
	new_bt_p -> block_table.known = ""b;
	do i = 1 to hbound (block_table.known, 1);	/* old one */
	     new_bt_p -> block_table.known (i) = block_table.known (i);
	end;
	free block_table;
	cross_ring_io_block_table_ptr_ = new_bt_p;
	return;
     end grow_block_table;

var_name:
     procedure (sname) returns (character (64));

	declare sname		 character (*);
	return ("cross_ring_io_." || sname);
     end var_name;
     end cross_ring_io_;
