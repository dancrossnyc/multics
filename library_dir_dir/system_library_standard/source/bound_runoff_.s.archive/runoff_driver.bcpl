//  This is the command interface for runoff.
//  Last modified on 06/23/74 at 19:16:49 by R F Mabee.
//
//  Routines defined herein are:
//	RunoffCommand	This implements the runoff command described in the MPM.
//	RfEntry		For the command abbreviation "rf". Ugh.
//	FindInput		To open an input stream. Removes .runoff suffix.
//	PrintErrorFile	Dump out error messages saved during console output.
//	Cleanup		Close streams, delete temporaries, etc.
//  The last two mentioned are not external to this part of the program.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "runoff_head"
get "head"

external
     $(	RunoffCommand = "runoff"
	RfEntry = "rf"
	TtyInfo = "user_info_$tty_data"
	IosWritePtr = "ios_$write_ptr"
     $)
global
     $(	Streams : 300
	EntryNames : 301
	Sn : 302

	ArgITS : 26		//  Multics save sequence leaves argument list pointer here (two words).
     $)

//  This routine is called directly from command level to execute the runoff command.
//  Its parameters (all character strings) are intermingled options and pathnames of
//  source files.  Its usage is described in the MPM runoff command writeup.

let RunoffCommand () be main
     $(	MONITOR := Open (StreamName + Write, "error_output")	//  Errors, etc. written here.
	OUTPUT, CONSOLE, ChStream, Errorstream := 0, 0, 0, 0
	Errcode, ProgramID := 0, "runoff"
	From, To, Start, Stopsw, Charsw, Device := 1, 999999, 1, false, false, 0
	NoPaging, Hyphenating, Passes, Waitsw := false, false, 1, false
	PrintLineNumbers, ExtraMargin, Parameter := false, -1, ""
	NoControl, NoFill := false, false
	Filesw := false
	Streams, EntryNames, Sn := vec 100, vec 100, 0
	ErrorTempID := 0
	let Xvec = vec 10000
	NewvecInit (Xvec, 10000)
	let w = vec 2
	TimeNow := TimeToSeconds (RawClockTime (w))

	let Cvec = vec 20
	SetHandler ("cleanup", Cleanup, Cvec)	//  Set up for release of streams.

//  Scan command arguments.

	ArgIndex := 1
	let Names = list "file", "segment", "sm", "chars", "character",
			"ch", "stop", "sp", "wait", "wt",
			"pagination", "pgnt", "npgn", "hyphenate", "hph",
			"number", "nb", "control", "fill", "parameter",
			"pm", "pass", "margin", "indent", "in",
			"from", "fm", "to", "start", "page",
			"pg", "ball", "bl", "device", "dv"
	and Pointers = list lv Filesw, lv Filesw, lv Filesw, lv Charsw, lv Charsw,
			lv Charsw, lv Stopsw, lv Stopsw, lv Waitsw, lv Waitsw,
			lv NoPaging, lv NoPaging, lv NoPaging, lv Hyphenating, lv Hyphenating,
			lv PrintLineNumbers, lv PrintLineNumbers, lv NoControl, lv NoFill, DoParam,
			DoParam, lv Passes, lv ExtraMargin, lv ExtraMargin, lv ExtraMargin,
			lv From, lv From, lv To, lv Start, lv Start,
			lv Start, lv Device, lv Device, lv Device, lv Device
	and Flags = table OptNegatable, OptNegatable, OptNegatable, OptNegatable, OptNegatable,
			OptNegatable, OptNegatable, OptNegatable, OptNegatable, OptNegatable,
			OptNegatable | OptNegate, OptNegatable | OptNegate, 0, OptNegatable, OptNegatable,
			OptNegatable, OptNegatable, OptNegatable | OptNegate, OptNegatable | OptNegate, OptCallOut | OptGetNext,
			OptCallOut | OptGetNext, OptConvert, OptConvert, OptConvert, OptConvert,
			OptConvert, OptConvert, OptConvert, OptConvert, OptConvert,
			OptConvert, OptConvert, OptConvert, OptConvert, OptConvert

	OptionParse (GetNextCommandArg, 35, Names, Pointers, Flags, DoName)

	if Sn = 0 do Complain ("Pathnames of input segments expected.  Options:*n^a*n^a",
			   "-file  -stop  -wait  -chars  -no_pagination  -hyphenate  -number  -no_control  -no_fill",
			   "-from <n>  -to <n>  -start <n>  -device <n>  -pass <n>  -margin <n>")


//  Determine default device type.

	test Filesw
	then $(	if Device = 0 do Device := 202
		Errorstream := MONITOR
	     $)
	or   $(	OUTPUT := Open (StreamName + Write, "user_output", 1000, 0)	//  Big buffer, no delimiter.
		unless Errcode = 0 do Complain ("user_output")
		if Device = 0 do
		     $(	let x, y = 0, 0
			call TtyInfo (lv x char 0, lv y)
			Device := y le 2 | y = 6 -* 963, 37
		     $)
	     $)

	if ExtraMargin < 0 do ExtraMargin := (Device = 202 | Device = 300) & Filesw -> 20, 0

	unless Device = 1050 | Device = 2741 | Device = 963		//  "Normal" IBM type codes.
	     | Device = 012 | Device = 015 | Device = 041		//  IBM terminal with office typewriter element.
	     | Device = 088
	     | Device = 37 | Device = 202 | Device = 300 do		//  Full ASCII device.
		Complain ("Illegal device type specified.  Legal devices:*n1050 2741 37 202 300 963 012 015 041 088")

	let FromX, ToX, StartX, StopswX, CharswX, DeviceX = From, To, Start, Stopsw, Charsw, Device
	and NoPagingX, HyphenatingX, PassesX, WaitswX = NoPaging, Hyphenating, Passes, Waitsw
	and PrintLineNumbersX, ExtraMarginX, ParameterX = PrintLineNumbers, ExtraMargin, Parameter
	and NoControlX, NoFillX = NoControl, NoFill

//  Process input files, one at a time.

	for i = 1 to Sn do
	     $(	FileName := EntryNames!i
		if Filesw do
		     $(	let w = vec 20
			OUTPUT := Open (EntryName + Write + MultiSegmentFile, Concatenate (w, 32, FileName, ".runout"))
			unless Errcode = 0 do Complain (w)
		     $)

		From, To, Start, Stopsw, Charsw, Device := FromX, ToX, StartX, StopswX, CharswX, DeviceX
		NoPaging, Hyphenating, Passes := NoPagingX, HyphenatingX, PassesX
		PrintLineNumbers, ExtraMargin := PrintLineNumbersX, ExtraMarginX
		Parameter := StoreString (ParameterX)
		NoControl, NoFill := NoControlX, NoFillX
		Waitsw := WaitswX | StopswX

	//  Invoke runoff main program for each source segment.

		Roff (lv Streams!(i - 1), 1, OUTPUT)

		if Filesw do
		     $(	Close (OUTPUT)
			OUTPUT := 0
		     $)

		unless ChStream = 0 do
		     $(	Close (ChStream)
			ChStream := 0
		     $)
	     $)

//  Finished with all source files, clean up and return to command level.

	if Stopsw do Wait ()

	unless Filesw do
	     $(	Close (OUTPUT)
		OUTPUT := 0
	     $)

	PrintErrorFile ()

	Cleanup ()
     $)
and RfEntry () be main
	Pl1Call (RunoffCommand, BCPLaddr (lv ArgITS))

and DoName (Arg) be			//  Called by OptionParse to process file-name argument.
     $(	Streams!(Sn + 1) := FindInput (Arg, 0)
	Sn := Sn + 1
	unless Errcode = 0 do Complain ("^a.runoff", Arg)
	let w, D, E = vec 50, vec 50, vec 10
	SplitPathname (ExpandPathname (Arg, w), D, E)
	EntryNames!Sn := StoreString (MakeBcplString (E, 32, w))
     $)
and DoParam (Arg) be			//  Called by OptionParse to process "-parameter" option.
	Parameter := StoreString (Arg)

and FindInput (Name, ParentStream) = valof		//  BEWARE! This routine is defined to update its argument.
     $(	let v = vec 50
	let l = Length (Name)
	if l ge 8 do
	     $(	Substr (v, Name, l - 6)
		if EqualString (v, ".runoff") do
		     $(	Substr (v, Name, 1, l - 7)
			CopyString (v, Name)
		     $)
	     $)

	Concatenate (v, 168, Name, ".runoff")
	resultis ParentStream = 0 -> Open (PathName + Read + MultiSegmentFile, v),
				Open (SearchName + Read + MultiSegmentFile, v, ParentStream)
     $)
and PrintErrorFile () be
     $(	if Errorstream = 0 | Filesw return
	unless OUTPUT = 0 do Writeout (OUTPUT)
	let l = StreamOffset (Errorstream)
	Close (Errorstream)
	Errorstream := 0
	let v, Zero = vec 2, 0
	call IosWritePtr (ITS (ErrorfilePointer, v), lv Zero, lv l)
     $)

and Cleanup () be
     $(	while Sn > 0 do
	     $(	Sn := Sn - 1
		Close (Streams!(Sn + 1))
	     $)
	unless OUTPUT = 0 | Filesw do
	     $(	ResetStream (OUTPUT, 0)
		Close (OUTPUT)
		OUTPUT := 0
	     $)
	unless CONSOLE = 0 do Close (CONSOLE)
	CONSOLE := 0
	ChStream := 0
	unless Errorstream = 0 | Filesw do Close (Errorstream)
	Errorstream := 0
	Close (MONITOR)
	NewvecCleanup ()
	unless ErrorTempID = 0 do DeleteTempSeg (ErrorTempID, "error_messages")
     $)
