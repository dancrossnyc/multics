//		ROFF for Multics
//
//  Last modified on 08/29/74 at 19:23:28 by R F Mabee.
//
//  This file contains the following routines for printing text:
//	Text		process a line of text
//      * Fill		make a complete line if possible
//      *	TrytoHyphenate	break word if possible
//      *	Adjust		print a line, right-adjusted
//	Width		return the width of a character
//	Break		break text, emptying buffers
//	Spacing		prepare to upspace paper
//	Eject		finish printing a page
//      *	Center		print a line, centered
//      *	Equation		print an equation line
//  Routines marked * are not external.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "runoff_head"	//  Declarations for ROFF.

external
     $(	HyphenateWord = "hyphenate_word_"  $)

//  Text is called after a line of text has been read into
//	Rawchar[1] ... Rawchar[Nr]
//  It arranges to print the text, as required.

let Text () be
     {	if Nr = 0 do { Break (); Spacing (); Newline (1); return }	//  Blank line produces break and blank output line.
	if Rawchar[1] = '*s' do Break ()	//  Line indented is automatic break.
	if Eq > 0 do { Equation (); return }	//  Print an equation.
	for i = 1 to Nr do Char[Nc + i] := Rawchar[i]	//  Move text to output buffer.
	Nc := Nc + Nr
	if Ce>0 do { Center (); return }	//  Center a line.
	unless Fi do { Break (); return }	//  Fill.

//  Nothing special is happening, so do the work.

	Fill ()				//  Loops while enough text to fill line.

//  Not enough to fill line, prepare for next to be concatenated.
	while Nc > 0 & Char!Nc = '*s' do Nc := Nc - 1
	if Nc > 0 do
	     $(	let x, y = Char!(Nc - 1), Char!Nc
		if y = '.' | y = ':' | y = ';' | y = '!' | y = '?'
			| (y = '"' | y = ')') & (x = '.' | x = '!' | x = '?') do
			     $(	Nc := Nc + 1		//  Two spaces after period, etc.
				Char!Nc := '*s'
			     $)
		Nc := Nc + 1			//  And anyway one.
		Char!Nc := '*s'
	     $)
     }

and Fill () be		//  Routine to print out as much as will fit on one line.
     $(	if Nc < Ll - Un return	//  Not enough to possibly fill line.

	let Ne = 0		//  Elements (character positions) so far.
	let Nc1, Ne1 = 0, 0		//  Characters and elements at previous gap.
	let Nco = 0		//  Characters in undented part.

	let Usable = Ll - Un	//  Remaining elements on line.
	and Undent = In - Un	//  Elements at left exempt from adjusting.

	Char!(Nc + 1) := '*s'
	for i = 1 to Nc + 1 do
	     $(	test Char!i = '*s'
		then $(	if Ne le Usable | Ne1 = 0 do Nc1, Ne1 := i, Ne
			if Ne ge Usable do
			     $(	unless Hyphenating & Ne > Usable break
				let x = TryToHyphenate (Nc1, i, Usable - Ne1)
				while Nc1 < x do
				     $(	Ne1 := Ne1 + Width (Char!Nc1)
					Nc1 := Nc1 + 1
				     $)
				break
			     $)
			while i le Nc do
			     $(	Ne := Ne + 1		//  Width ('*s')
				unless Char!(i + 1) = '*s' break
				i := i + 1
			     $)
		     $)
		or Ne := Ne + Width (Char!i)

		if Nco = 0 & Ne ge Undent do Nco := i + 1
	     $)
	if Ne < Usable return

//  Now print a line.
	Spacing ()
	if Print | Ft do
	     $(	PrinterIndent ()
		Blank (Un)	//  Leading blanks for indent.
		test Ad & Ne1 < Usable
		then	test Undent = 0
			then Adjust (1, Nc1 - 1, Usable - Ne1)
			or   $(	PadLeft := false
				if Nco = 0 | Nco > Nc1 do Nco := Nc1
				for i = 1 to Nco - 1 do WriteChar (Char!i)
				Adjust (Nco, Nc1 - 1, Usable - Ne1)
			     $)
		or for i = 1 to Nc1 - 1 do WriteChar (Char!i)
	     $)
	Newline (1)

//  Now move unprinted stuff in Char to the left.
	while Char!(Nc1 + 1) = '*s' & Nc1 < Nc do Nc1 := Nc1 + 1
	Nc := Nc - Nc1
	if Nc < 0 do Nc := 0
	for i = 1 to Nc do Char!i := Char!(Nc1 + i)
	Un := In
	Fill ()		//  Print more if possible.
     $)


//  This routine attempts to break a word across lines.
//  It calls a user-supplied hyphenation procedure to determine
//  where and whether the word can be broken.
//  It moves text around in Char to insert a hyphen,
//  and returns the offset to the new breaking place.

and TryToHyphenate (Begin, End, Space) = valof
     $(	while Char!Begin = '*s' & Begin le Nc do Begin, Space := Begin + 1, Space - 1
	let Len = End - Begin
	if Space < 3 | Len < 4 resultis 0
	let v, w = vec Maxline, vec Maxline / 4
	for i = 1 to Len do v!i := Char!(Begin + i - 1)
	v!0 := Len
	Packstring (v, w)
	let h = 0
	call HyphenateWord (w string, lv Space, lv h)
	if h le 0 | h ge Len resultis 0
	for i = Nc + 1 to Begin + h by -1 do Char!(i + 2) := Char!i
	Char!(Begin + h), Char!(Begin + h + 1) := '-', '*s'
	Nc := Nc + 2
	resultis Begin + h + 1
     $)


//  This routine prints a line, with right-adjustment.  It alternates
//  between putting extra blanks on the right and on the left.
//  It operates on the text between Begin and End in Char.
//  Pad is the number of spaces which must be inserted into the line.

and Adjust (Begin, End, Pad) be
     $(	let Gaps = 0
//  Find out how many gaps there are with which to stretch line.
	for i = Begin to End if Char!i = '*s' do
	     $(	if i > Begin do Gaps := Gaps + 1
		while Char!(i + 1) = '*s' & i < End do i := i + 1
	     $)
	let s, k = 0, -1
	unless Gaps = 0 do
	     $(	s := Pad / Gaps
		k := Pad - s * Gaps
	     $)

	for i = Begin to End do
	     {	WriteChar ( Char[i] )	//  Print next character.
		if Char[i + 1] = '*s' & Char[i] ne '*s' & i < End do	//  We have just encountered a gap.
		     {	Blank (s)		//  Most of the space required.
			test PadLeft	//  Where to put the extra space?
			then if k > 0 do { WriteChar ('*s'); k := k - 1 }
			else test k < Gaps then k := k + 1 or WriteChar ('*s')
		     }
	     }
	PadLeft := not PadLeft
     $)


and Width (Char) =	//  How many print positions does Char take?
	$8040 le Conv!Char le $8176 -* 1,	//  Most characters take 1.
	Conv!Char = '*b' -* -1,	//  Backspace takes -1.
	0	//  Anything else takes 0.


//  Break in the text, so print out anything already read.

and Break () be
     {	if Fi do Fill ()
	while Nc > 0 & Char!Nc = '*s' do Nc := Nc - 1
	if Nc > 0 do
	     $(	Spacing ()	//  Do we need some upspacing?
		if Print | Ft do
		     $(	PrinterIndent ()
			Blank (Un)	//  Leading blanks, for indented lines.
			for i = 1 to Nc do WriteChar ( Char[i] )	//  Print the line.
		     $)
		Newline (1)	//  and upspace.
		Un := In	//  Back to the usual indenting.
	     $)
	Nc := 0	//  Nothing more to print.
     }


//  This routine is called just before any up-spacing.  It does
//  two things for us:
//	1. It takes care of double spacing.
//	2. If we are about to complete a page, it does head
//	   and foot printing, and such.

and Spacing () be
     {	if Nl > 0 do	//  Have we printed yet on this page?
	     $(	Newline (MinI (Ms - 1, LinesLeft + Fl))
		if LinesLeft ge Ms logor Ft logor Flp do
		     $(	Flp := false		//  Clear switch indicating footnote reference.
			return
		     $)
		Eject ()		//  Close to bottom, so to work...
	     $)

	if Ft return

	if Waitsw & Print do $( Wait (); Waitsw := Stopsw $)

	OddPage := Np rem 2 ne 0

	//  Skip lines above the header.
	if Printersw do Nl := Nl + 3			//  Defect in printer DIM - can't use first three lines on page.
	Newline (Ma1 - Nl)
	for i = 1 to Maxheads do Title ((OddPage -> Oh, Eh)!i)

	Newline (Ma2)	//  Space below the header.
	if LinesLeft + Fl le 0 do LinesLeft := 1 - Fl	//  Make sure at least some text appears on page.

	if Pi = 0 return	//  No lines waiting for picture.
	//  Now print space required for pictures to be drawn.
	if Pi ge LinesLeft do
	     $(	Newline (LinesLeft + Fl)
		if Pi > Pl * 10 do Pi := Pi rem (Pl * 10)
		Pi := Pi - Pl
		Flp := false
		Spacing ()
		return
	     $)
	Newline (Pi)
	Pi := 0
     }

and Eject () be	//  Eject paper, first printing footer and footnotes.
     {	if Ft return			//  Can happen.
	unless Fl = 0 do PrintFootnotes ()	//  If there are footnotes to print do it now.
	if Nl = 0 return	//  Page empty, don't print footers or count page.
	Newline (NoPaging -> Ma3, Pl - Nl - Ma4 - (OddPage -> Of, Ef)!0)	//  Skip down to footer.
	for i = Maxheads to 1 by -1 do Title ((OddPage -> Of, Ef)!i)
	test Printersw & ^ NoPaging
	then for i = 1 to MultiplePagecount do WriteChar ('*f')
	or Newline (NoPaging -> Ma4, Pl - Nl)
	Nl := 0
	LinesLeft := Pl		//  Soon reset by Spacing.
	if Fr do Foot := 1		//  Reset footnote counter if required.
	Np := NNp; NNp := NNp + 1
	Print := Fp le Np le Lp & Passes le 1
     }

and Center () be		//  Print current line, centered.
     {	let Ne = 0
	for i = 1 to Nc do Ne := Ne+Width (Char[i])
	Spacing ()
	PrinterIndent ()
	Blank ( (Ll-In-Ne)/2 + In)
	for i = 1 to Nc do WriteChar (Char[i])
	Newline (1)
	Nc := 0
	Ce := Ce - 1
     }

//  The next routine prints a line as an equation.  An
//  equation is like a title, and is of the form
//		'aaa'bbb'ccc'
//  (where ' is the first non-blank character on the line).
//  aaa is printed at the left margin, ccc at the right and bbb centered.

and Equation () be
     {	Spacing ()
	Nrx := 1
	let v = vec Maxline
	Title (Readhead (v))
	Eq := Eq - 1
     }
