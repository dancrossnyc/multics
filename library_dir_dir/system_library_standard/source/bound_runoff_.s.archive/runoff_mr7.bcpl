//		Roff for Multics
//
//  Last modified on 05/30/74 at 18:45:47 by R F Mabee.
//
//  This file contains the routines needed to create the ".chars" file
//  that contains lines unprintable with the device being used:
//
//	WrChInit		Initializes things-called from mr1.
//	WrCh		Called from Write to process a character.
//	Wrline		Write a complete line.
//	Store		Store a character.
//  The first two are external, the others not.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "runoff_head"	//  Declarations for Mulrof.


global			//  The following are used by all of these routines:
{	LineC	: 330	//  Line counter on page.
	LineP	: 331	//  Character position on line.
	FF	: 332	//  Unprintable character on line so far?
	LPW	: 333	//  Last page number written on.
	Buff	: 334	//  Buffer for the line.
	Red	: 335	//  Was the last character stored red?
}

let WrChInit () be		//  Initialize the static quantities
{	Buff := Newvec (Maxline)	//  Storage for the line
	LPW := -1
	LineC := 1
	LineP := 0
	FF := false
	Red := false

	for i = 0 to 127 do CharsTable!i := '*s'
	let T1 = table '[', ']', '{', '}', '~', '`'
	and T2 = table '<', '>', '(', ')', 't', '*''
	for i = 0 to 5 do CharsTable!(T1!i) := T2!i
}
and WrCh (c) be	// Write out character c.
     $(	test CharsTable!c = '*s'
	then $(	if Red do
		     $(	Store ('*k')
			Red := false
		     $)
		Store (c)
	     $)
	or   $(	unless Red do
		     $(	Store ('*d')
			Red := true
		     $)
		Store (CharsTable!c)
		FF := true
	     $)
	if c = '*n' do
	     $(	if FF do Wrline ()
		LineP, FF, Red := 0, false, false
	     $)
     $)
and Wrline () be
     $(	if Red do Store ('*k')
	if LPW ne Np do		// First line printed on this page.
	     $(	WriteS (ChStream, "*n*n*nPage ")
		WriteN (ChStream, Np)
		WriteS (ChStream, "*n*n*n")
		LPW := Np
	     $)
	if Nl < 10 do Writech (ChStream, '*s')
	WriteN (ChStream, Nl)
	Writech (ChStream, '*t')
	for i = 1 to LineP do Writech (ChStream, Buff[i])
     $)
and Store (c) be
     $(	LineP := LineP + 1
	Buff[LineP] := c
     $)
