//		ROFF for Multics
//
//  Last modified on 05/30/74 at 18:44:49 by R F Mabee.
//
//  This file contains the following miscellaneous routines used for ROFF:
//
//	Need		Eject paper if less than n lines at current spacing on page.
//	NeedSS		Eject paper if less than n lines on page.
//	Newline		Upspace paper n lines.
//	SetLinesLeft	Keep track of lines left on page.
//	Blank		Store n blanks into output.
//	WriteChar		Write a character.
//	PrinterIndent	Make output for printer start indented twenty spaces.
//	StoreArabic	Convert number to character, decimal arabic numerals.
//	StoreRoman	Convert number to roman numeral representation.
//	StoreDate		Convert current date to character representation.
//	ReadName		Read name from control line and pack into vector.
//	Skiptolabel	Scan through input for particular label line.
//	InsertFile	Use new input file.
//  All are declared external.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "runoff_head"	// Declarations for ROFF.


let Need (n) be	// Eject paper if less than n lines left.
	if n * Ms > LinesLeft do Eject ()

and NeedSS (n) be	// Need for n lines, regardless of double spacing
	if n > LinesLeft do Eject ()

and Newline (n) be	// Print n 'newline' characters.
     {	for i = 1 to n do 
	     {	test Ft
		then $(	let P = Newvec (Fc + 1)
			for j = 1 to Fc do P!(j + 1) := Footbuf!j
			P!0, P!1 := 0, Fc
			test FootListBase = 0
			then FootListBase := P
			or FootList!0 := P
			FootList := P
			Fl := Fl + 1
			Fc := 0
		     $)
		or   $(	WriteChar ('*n')
			Nl := Nl + 1
		     $)
	     }
	SetLinesLeft ()
     }

and SetLinesLeft () be
	LinesLeft := Pl - Nl - Ma3 - Ma4 - Fl - (OddPage -> Of, Ef)!0

and Blank (n) be
	for i = 1 to n do WriteChar ('*s')

and WriteChar (c) be	// Write 'c' into output stream or footnote buffer.
     {	test Ft
	then {	Footbuf[Fc + 1] := c
		Fc := Fc + 1
	     }
	else if Print do
	     {	if Charsw do WrCh (TrTable!c)
		let Cc = Conv[c]
		if Cc = Skip return
	//  Partially canonicalize output by eliminating space-backspace pairs.
	//  This is necessary because the printer DIM can't handle them.
	//  Whenever a space or backspace arrives, we delay printing it
	//  until the next character arrives.  Then if the two form a space-backspace
	//  pair, we don't put out either.  If the second is some other character,
	//  the held character has to be forced out first.
		test Cc = '*s' | Cc = '*b'
		then test SavedCc = 0
			then $(	SavedCc := Cc
				return
			     $)
			or if SavedCc ne Cc do
			     $(	SavedCc := 0
				return
			     $)
		or unless SavedCc = 0 do
		     $(	Writech (Output, SavedCc)
			SavedCc := 0
		     $)
		Writech (Output, Cc)
	      }
     }


and PrinterIndent () be
  if Print logor Ft do
     $(	let p = 0
	if PrintLineNumbers do
	     $(	let v = vec 20
		StoreArabic (InputLines, v)
		p := v!0
		for i = p to 5 do WriteChar ('*s')
		for i = 1 to p do WriteChar (v!i)
		if p < 10 do
		     $(	WriteChar ('*t')
			p := 10
		     $)
	     $)
	unless ExtraMargin = 0 do
	     $(	while p / 10 < ExtraMargin / 10 do
		     $(	WriteChar ('*t')
			p := p + 10 - p rem 10
		     $)
		while p < ExtraMargin do
		     $(	WriteChar ('*s')
			p := p + 1
		     $)
	     $)
     $)

and StoreArabic (n, v) be
     $(	let w = vec 20
	Unpackstring (ConvertNtoS (n, w), v)
     $)
and StoreRoman (n, v) be
     $(	let i, Wa, Wb = 0, vec 3, vec 3
	let Ta, Tb = (table 'i', 'x', 'c', 'm') - 1, (table 'v', 'l', 'd') - 1
	if n < 0 do n := -n
	for j = 1 to 3 do
	     $(	let r = n rem 10
		Wa!j, Wb!j := r rem 5, r / 5
		n := n / 10
	     $)
	if n > 20 do n := 20

	for j = 1 to n do
	     $(	i := i + 1
		v!i := 'm'
	     $)
	for j = 3 to 1 by -1 do
		test Wa!j = 4
		then $(	i := i + 1
			v!i := Ta!j
			i := i + 1
			v!i := Wb!j = 0 -> Tb!j, Ta!(j + 1)
		     $)
		or   $(	unless Wb!j = 0 do
			     $(	i := i + 1
				v!i := Tb!j
			     $)
			for k = 1 to Wa!j do
			     $(	i := i + 1
				v!i := Ta!j
			     $)
		     $)
	v!0 := i
     $)

let StoreDate (v) be
     $(	let w = vec 10
	FormDate (TimeNow, w, false)
	v!1, v!2 := w!0 / 10 + '0', w!0 rem 10 + '0'
	v!3 := '/'
	v!4, v!5 := w!2 / 10 + '0', w!2 rem 10 + '0'
	v!6 := '/'
	v!7, v!8 := w!3 / 10 rem 10 + '0', w!3 rem 10 + '0'
	v!0 := 8
     $)
and ReadName (v) = valof
     $(	let i = 0
	let w = vec Maxline
	while Nrx < Nr & Rawchar!Nrx ne '*s' do
	     $(	i := i + 1
		w!i := Rawchar!Nrx
		Nrx := Nrx + 1
	     $)
	while Nrx < Nr & Rawchar!Nrx = '*s' do Nrx := Nrx + 1
	w!0 := i
	Packstring (w, v)
	resultis i
     $)
let Skiptolabel (Forward) be
     $(	let L, v = Nr - 1, vec Maxline
	for i = 1 to L do v!i := Rawchar!i
	v!2, v!3 := 'l', 'a'
	JumpLine := InputLines
	unless Forward do Nx_reset ()

Loop:	Nr := 0
	Readline ()
	if JumpLine < 0 do
	     $(	Nr := Nr + 1
		Report ("Target label not found")
		return
	     $)
	unless Nr = L goto Loop
	for i = 1 to L do unless v!i = Rawchar!i goto Loop
	JumpLine := -1
     $)
let InsertFile () be
     $(	let v = vec Maxline / 4
	if ReadName (v) = 0 do
	     $(	Report ("Missing file name")
		return
	     $)
	Nx_open (v)
	if Nrx < Nr do UpdateSymbol ("Parameter")
     $)
