//		ROFF for Multics
//
//  Last modified on 05/30/74 at 18:45:20 by R F Mabee.
//
//  This file contains the following routines for processing
//  headers, footers, etc.:
//
//	Readhead		Read a header into a vector.
//	Gethead		Allocate a new vector and call Readhead.
//	Sethead		Set a header or a footer from control line.
//	Freeheads		Free up one set of headers or footers.
//	Title		Print a header or a footer.
//  All are declared external.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "runoff_head"	// Declarations for ROFF.


let Readhead (Head) = valof	// Read in head or foot.
     $(	let l = Nr - Nrx
	for i = 1 to l do Head!(i + 2) := Rawchar!(i + Nrx - 1)
	Head!0, Head!1, Head!2 := Ll, In, l		//  Save line length and indenting by definition.
	resultis Head
     $)

and Gethead () = Nrx = Nr -* 0, Readhead (Newvec (Nr - Nrx + 2))

and Sethead (EOhf) be
     $(	let OldNrx = Nrx
	test Nrx = Nr
	then Freeheads (EOhf)
	or   $(	let Fline = 0
		test '0' le Rawchar!Nrx le '9'
		then $(	Fline := ReadNumber (10)
			unless 0 < Fline le Maxheads do
			     $(	Report ("Bad header number")
				Fline := 1
			     $)
			unless EOhf!Fline = 0 do Freevec (EOhf!Fline)
			EOhf!Fline := 0
		     $)
		or   $(	Fline := 1
			Freeheads (EOhf)
		     $)
		if Nrx < Nr do EOhf!Fline := Gethead ()
	     $)
	let h = 0
	for i = 1 to Maxheads unless EOhf!i = 0 do h := h + 1
	EOhf!0 := h
	Nrx := OldNrx
     $)
and Freeheads (EhOf) be
     $(	for i = 1 to Maxheads unless EhOf!i = 0 do
		     $(	Freevec (EhOf!i)
			EhOf!i := 0
		     $)
	EhOf!0 := 0
     $)

and Title (Head) be
     $(	if Head = 0 return
	unless Print logor Ft goto Out
	let w = vec Maxline
	let Ll, In, l = Head!0, Head!1, Head!2
	for i = 1 to l do
	     $(	w!i := Head!(i + 2)
		if w!i = Spec_char do
		     $(	l := Use_ref (Head + 2, w, l)
			break
		     $)
	     $)
	let Delim, Count = w!1, 0
	for i = 1 to 4 do
	     $(	l := l + 1
		w!l := Delim
	     $)
	let Start, Lengths = vec 3, vec 3
	for i = 1 to l do if w!i = Delim do
	     $(	Lengths!Count := i - Start!Count - 1
		Count := Count + 1
		Start!Count := i
		if Count ge 4 break
	     $)

	if Lengths!3 = 0 & Lengths!2 = 0 & Lengths!1 = 0 goto Out
	let Widths, Gaps = vec 3, vec 3
	for i = 1 to 3 do
	     $(	let p, k, c = w + Start!i, Lengths!i, 0
		for j = 1 to k do c := c + Width (p!j)
		Widths!i := c
	     $)

	Gaps!1 := In
	test Lengths!2 = 0
	then Gaps!2, Gaps!3 := 0, Ll - Widths!3 - Widths!1 - In
	or   $(	Gaps!2 := MaxI (0, (Ll - In - Widths!2) / 2 - Widths!1)
		Gaps!3 := Ll - Widths!3 - Widths!2 - Gaps!2 - Widths!1 - In
	     $)

	if Lengths!3 = 0 do Gaps!3 := 0

	PrinterIndent ()
	for i = 1 to 3 do
	     $(	Blank (Gaps!i)
		let p = w + Start!i
		for j = 1 to Lengths!i do WriteChar (p!j)
	     $)

  Out:	Newline (1)
     $)
