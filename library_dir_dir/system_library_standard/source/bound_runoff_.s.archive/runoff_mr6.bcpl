//		 ROFF for Multics
//
//  Last modified on 06/23/74 at 19:31:29 by R F Mabee.
//
//  This file contains the routines peculiar to the processing of footnotes:
//
//	Foot_begin	Start processing a footnote.
//	Foot_end		Finish processing a footnote.
//	PrintFootnotes	Print out the saved footnotes at the bottom of a page.
//  All are declared external.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "runoff_head"

// Foot_begin starts processing footnotes.

let Foot_begin () be
     {	NeedSS (NoFtNo -> 3, 4)		//  Make sure room enough for some part of footnote.
	unless NoFtNo do		//  Insert numbers into text and footnote unless requested not to.
	     $(	let B = false
		Nc := Nc - 1		//  Remove trailing blanks from previous line.
		if Char!Nc = '*s' do
		     $(	B := true		//  B indicates that line ended with . so extra space goes after number.
			Nc := Nc - 1
		     $)

		let v = vec Maxline		//  Expand user-settable footnote number reference.
		Unpackstring (TextRef, v)
		Nr := Use_ref (v, Rawchar, v!0)
		if B do
		     $(	Nr := Nr + 1
			Rawchar!Nr := '*s'
		     $)
		for i = 1 to Nr do Char!(Nc + i) := Rawchar!i
		Nc := Nc + Nr

		Unpackstring (FootRef, v)
		Nr := Use_ref (v, Rawchar, v!0)
		Again := Nr > 0
	     $)

	Fd, Findent, Fundent := Ms, In, Un	//  Remember parameters re-used by footnotes.
	Ms, In, Un := 1, 0, 0
	PadLeft := false
	Ft := true	// Say we are now processing a footnote
	if Fl = 0 do Fl := 1	//  Count footnote demarcation line.
	Newline (1)		//  Blank line to begin footnote.
	for i = 1 to Nc do Temp[i] := Char[i]	// Save unprinted stuff in Char
	Tempc := Nc
	Nc := 0
     }


// Foot_end finishes processing footnotes

and Foot_end () be
     {	Break()		// Finishes last line of footnote
	Ft := false	// No longer processing footnote
	Ms, In, Un := Fd, Findent, Fundent	//  Restore text parameters.
	for i = 1 to Tempc do Char[i] := Temp[i]	//Restore Char
	Nc := Tempc
	Flp := not NoFtNo	// Print the next text line regardless of room.
			// It contains the reference to a footnote to be
			// printed on this page.
	NoFtNo := false
	Foot := Foot + 1
     }

// PrintFootnotes puts out as much footnote text as will fit.

and PrintFootnotes () be
      {	if Nl = 0 do Spacing ()
	let Lleft = LinesLeft + Fl	//  Number of lines available for footnotes on this page.
	let Ftp = MinI (Fl, Lleft)	//  Number to print this page.
	if Ftp = Fl - 1 > 3 do Ftp := Fl - 2		//  Never leave just one line unprinted.
	if Ftp le 1 return
	Newline (NoPaging -> 1, Lleft - Ftp)

	test Fth = 0
	then $(	PrinterIndent ()
		for i = 1 to Ll do WriteChar ('_')	//  Default separator.
		Newline (1)
	     $)
	or Title (Fth)

	for i = 2 to Ftp unless FootListBase = 0 do
	     $(	for j = 1 to FootListBase!1 do WriteChar (FootListBase!(j + 1))
		Newline (1)
		let t = FootListBase
		FootListBase := FootListBase!0
		Freevec (t)
		Fl := Fl - 1
	     $)
	if Fl le 1 | FootListBase = 0 | FootList = 0 do Fl, FootListBase, FootList := 0, 0, 0
     }
