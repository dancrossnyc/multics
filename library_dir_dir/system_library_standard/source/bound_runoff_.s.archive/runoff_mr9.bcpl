//		ROFF for Multics
//
//  Last modified on 05/30/74 at 18:45:56 by R F Mabee.
//
//	Tree_search	Find a named symbol in the symbol table.
//	GetSymbol		Return value and type of a named symbol.
//	SetSymbol		Assign new value and type to a named symbol.
//	SetCtable		Update any character translation table.
//	StoreCtable	Evaluate translation table as string.
//	UpdateSymbol	Set value and type of named symbol from control line.
//	Set_ref		Process a .sr control line.
//	Use_ref		Perform substitutions for named symbols.
//	Check_ref		Implicit .ur for expression beginning with %.
//  Only Tree_search, GetSymbol, and SetSymbol are not declared external.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"
get "runoff_head"

global
     $(	Global	: 0  $)

manifest
     $(	NUMBER = 1
	STRING = 2
	CTABLE = 3
	FUNCTION = 4
	COUNTER = 5
	BUILTIN = 8
	SETS_PRINT = 16
	READ_ONLY = 32
	RELOCATE = 64
     $)


let Tree_search (Name, Create) = valof
     $(	let x = Name!0
	let k = LengthInWords (Name) - 1
	let P, Q = 0, lv TreeRoot
	     $(	P := rv Q
		if P = 0 break
		let d = P!4 - x
		if d = 0 for i = 1 to k do
		     $(	d := P!(i + 4) - Name!i
			unless d = 0 break
		     $)
		if d = 0 resultis P
		Q := d < 0 -> lv P!3, lv P!2
	     $)	repeat

	unless Create resultis 0

	P := Newvec (k + 4)
	for i = 0 to k do P!(i + 4) := Name!i
	P!0, P!1, P!2, P!3 := 0, NUMBER, 0, 0
	rv Q := P
	resultis P
     $)

let GetSymbol (Name, Space) be		//  Return value of named symbol as unpacked string.
     $(	let P = Tree_search (Name, false)
	if P = 0 do		//  Undefined name - value is null string by definition.
	     $(	Space!0 := 0
		return
	     $)

	let Value, Flags = lv P!0, P!1
	if (Flags & BUILTIN) ne 0 do
	     $(	Value := rv Value
		if (Flags & RELOCATE) ne 0 do Value := Value + (lv Global)
	     $)
	switchon Flags & 7 into			//  Dispatch on Type.
	     $(	case NUMBER:
			StoreArabic (rv Value, Space)
			return

		case STRING:
			Unpackstring (rv Value, Space)
			return

		case FUNCTION:
			Value (Space, false)
			return

		case CTABLE:
			StoreCtable (Value, Space)
			return

		case COUNTER:
			rv Value := rv Value + 1
			StoreArabic (rv Value - 1, Space)
			return
	     $)
     $)

and SetSymbol (Name, Type, Value) be
     $(	let P = Tree_search (Name, true)
	let OldValue, Flags = lv P!0, P!1
	if (Flags & BUILTIN) ne 0 & (Flags & READ_ONLY) = 0 do
	     $(	OldValue := rv OldValue
		if (Flags & RELOCATE) ne 0 do OldValue := OldValue + (lv Global)
		switchon Flags & 7 into			//  Dispatch on old Type.
		     $(	case NUMBER:
			case COUNTER:
				unless Type = NUMBER goto UserCell
				rv OldValue := Value
				if (Flags & SETS_PRINT) ne 0 do Print := Fp le Np le Lp & Passes le 1
				return

			case STRING:
				unless Type = STRING goto UserCell
				Freevec (rv OldValue)
				rv OldValue := Value
				return

			case CTABLE:
				unless Type = STRING goto UserCell
				SetCtable (OldValue, Value)
				return

			case FUNCTION:
				unless Type = NUMBER goto UserCell
				OldValue (Value, true)
				return
		     $)
	     $)

	if Flags = STRING do Freevec (P!0)
UserCell:
	P!0, P!1 := Value, Type
     $)
and SetCtable (Table, Value) be
     $(	let w = vec 512
	Unpackstring (Value, w)
	let l = w!0
	if l > 128 do l := 128
	while l < 128 do
	     $(	l := l + 1
		w!l := '*s'
	     $)
	for i = 0 to 127 do Table!i := w!(i + 1)
	Freevec (Value)
     $)
and StoreCtable (Table, v) be
     $(	let j = 0
	for i = 0 to 127 do
	     $(	j := j + 1
		let c = Table!i
		c := valof switchon c into
		     $(	case '*b':resultis 'b'
			case '*n':resultis 'n'
			case '*t':resultis 't'
			case '**':resultis '**'
			case '"':	resultis '"'
			default:
				if $8040 le c le $8176 do
				     $(	v!j := c
					loop
				     $)
				v!j := '**'
				v!(j + 1) := 'c'
				v!(j + 2) := c / 100 + '0'
				v!(j + 3) := c / 10 rem 10 + '0'
				v!(j + 4) := c rem 10 + '0'
				j := j + 4
				loop
		     $)
		v!j := '**'
		v!(j + 1) := c
		j := j + 1
		loop
	     $)
	v!0 := j
     $)

let UpdateSymbol (Name) be
     $(	Check_ref ()		//  Do substitutions if necessary.
	let Type, Value = 0, 0
	test Rawchar!Nrx = '"'
	then Type, Value := STRING, GetString ()
	or   $(	let v = vec Maxline
		ExpError := false
		Type, Value := NUMBER, ReadExp (0, v)
		if ExpError | Nrx < Nr do Report ("Malformed expression")
	     $)
	SetSymbol (Name, Type, Value)
     $)

and Set_ref () be
     $(	let v = vec Maxline / 4
	if ReadName (v) = 0 return
	UpdateSymbol (v)
     $)

and Use_ref (In, Out, Inl) = valof	// = Outl
     $(	let Ini, Outi = 0, 0
	let v = vec Maxline * 2
	while Ini < Inl & Outi < Maxline do
	     $(	Ini := Ini + 1
		unless In!Ini = Spec_char do
		     $(	Outi := Outi + 1
			Out!Outi := In!Ini
			loop
		     $)
		if In!(Ini + 1) = Spec_char do	//  Double escape turns to single in output.
		     $(	Ini := Ini + 1
			Outi := Outi + 1
			Out!Outi := Spec_char
			loop
		     $)
		for i = Ini + 1 to Inl do
		     $(	let c = In!i
			if c = Spec_char do
			     $(	let w = vec Maxline
				for j = 1 to i - Ini - 1 do v!j := In!(Ini + j)
				v!0 := i - Ini - 1
				Packstring (v, w)
				GetSymbol (w, v)
				Ini := i
				goto StoreS
			     $)
			unless 'a' le c le 'z' logor 'A' le c le 'Z' logor '0' le c le '9' logor c = '_' break
		     $)
		(Roman -> StoreRoman, StoreArabic) (Np, v)
	StoreS:	for i = 1 to v!0 do Out!(Outi + i) := v!i
		Outi := Outi + v!0
	     $)
	resultis Outi
     $)


and Check_ref () be		//  Do symbol substitution for control line if first or second character is %.
     $(	unless Rawchar!Nrx = Spec_char logor Rawchar!(Nrx + 1) = Spec_char return
	let w = vec Maxline
	for i = 1 to Nr do w!i := Rawchar!i
	let OldRoman = Roman
	Roman := false
	Nr := Use_ref (w + Nrx - 1, Rawchar + Nrx - 1, Nr - Nrx + 1) + Nrx - 1
	Roman := OldRoman
     $)

let InitializeSymbolTree () be		//  Set up symbol table with built-in names.
     $(	TreeRoot := 0

	Define ("Ad", lv Ad, NUMBER | RELOCATE)
	Define ("Ce", lv Ce, NUMBER | RELOCATE)
	Define ("Eq", lv Eq, NUMBER | RELOCATE)
	Define ("Fi", lv Fi, NUMBER | RELOCATE)
	Define ("Fr", lv Fr, NUMBER | RELOCATE)
	Define ("Ft", lv Ft, NUMBER | RELOCATE)
	Define ("Ll", lv Ll, NUMBER | RELOCATE)
	Define ("Ms", lv Ms, NUMBER | RELOCATE)
	Define ("Nl", lv Nl, NUMBER | RELOCATE)
	Define ("Pi", lv Pi, NUMBER | RELOCATE)
	Define ("Pl", lv Pl, NUMBER | RELOCATE)
	Define ("To", lv To, NUMBER | RELOCATE)
	Define ("Un", lv Un, NUMBER | RELOCATE)
	Define ("Ma1", lv Ma1, NUMBER | RELOCATE)
	Define ("Ma2", lv Ma2, NUMBER | RELOCATE)
	Define ("Ma3", lv Ma3, NUMBER | RELOCATE)
	Define ("Ma4", lv Ma4, NUMBER | RELOCATE)  
	Define ("NNp", lv NNp, NUMBER | RELOCATE)
	Define ("Foot", lv Foot, NUMBER | RELOCATE)
	Define ("From", lv From, NUMBER | RELOCATE)
	Define ("Print", lv Print, NUMBER | RELOCATE)
	Define ("Start", lv Start, NUMBER | RELOCATE)
	Define ("Roman", lv Roman, NUMBER | RELOCATE)
	Define ("NoFtNo", lv NoFtNo, NUMBER | RELOCATE)
	Define ("Stopsw", lv Stopsw, NUMBER | RELOCATE)
	Define ("Waitsw", lv Waitsw, NUMBER | RELOCATE)
	Define ("PadLeft", lv PadLeft, NUMBER | RELOCATE)
	Define ("ExtraMargin", lv ExtraMargin, NUMBER | RELOCATE)
	Define ("Hyphenating", lv Hyphenating, NUMBER | RELOCATE)
	Define ("PrintLineNumbers", lv PrintLineNumbers, NUMBER | RELOCATE)
	Define ("MultiplePagecount", lv MultiplePagecount, NUMBER | RELOCATE)

	Define ("Fp", lv Fp, NUMBER | SETS_PRINT | RELOCATE)
	Define ("Lp", lv Lp, NUMBER | SETS_PRINT | RELOCATE)
	Define ("Passes", lv Passes, NUMBER | SETS_PRINT | RELOCATE)

	Define ("In", lv In, NUMBER | READ_ONLY | RELOCATE)
	Define ("Np", lv Np, NUMBER | READ_ONLY | RELOCATE)
	Define ("Selsw", lv Selsw, NUMBER | READ_ONLY | RELOCATE)
	Define ("Time", lv TimeNow, NUMBER | READ_ONLY | RELOCATE)
	Define ("Filesw", lv Filesw, NUMBER | READ_ONLY | RELOCATE)
	Define ("LinesLeft", lv LinesLeft, NUMBER | READ_ONLY | RELOCATE)
	Define ("Printersw", lv Printersw, NUMBER | READ_ONLY | RELOCATE)
	Define ("InputLines", lv InputLines, NUMBER | READ_ONLY | RELOCATE)
	Define ("NestingDepth", lv NestingDepth, NUMBER | READ_ONLY | RELOCATE)

	Define ("Eqcnt", lv Eqcnt, COUNTER | RELOCATE)

	Define ("FootRef", lv FootRef, STRING | RELOCATE)
	Define ("TextRef", lv TextRef, STRING | RELOCATE)
	Define ("Parameter", lv Parameter, STRING | RELOCATE)

	Define ("FileName", lv FileName, STRING | READ_ONLY | RELOCATE)
	Define ("InputFileName", lv InputFileName, STRING | READ_ONLY | RELOCATE)

	Define ("ConvTable", Conv, CTABLE)
	Define ("TrTable", TrTable, CTABLE)
	Define ("CharsTable", CharsTable, CTABLE)
	Define ("DeviceTable", DeviceTable, CTABLE)

	Define ("Date", StoreDate, FUNCTION | READ_ONLY)
	Define ("Console", ConsoleReadline, FUNCTION | READ_ONLY)

	Define ("NoPaging", NoPagingFUNCTION, FUNCTION)
	Define ("Charsw", CharswFUNCTION, FUNCTION)
	Define ("Device", DeviceFUNCTION, FUNCTION)
     $)
and Define (Name, Value, Flag) be
     $(	let P = Tree_search (Name, true)
	if (Flag & RELOCATE) ne 0 do Value := Value - (lv Global)
	P!0, P!1 := Value, Flag | BUILTIN
     $)

and NoPagingFUNCTION (Arg, SetSw) be
	test SetSw
	then SetPaging (Arg)
	or StoreArabic (NoPaging, Arg)

and CharswFUNCTION (Arg, SetSw) be
	test SetSw
	then SetCharsw (Arg)
	or StoreArabic (Charsw, Arg)

and DeviceFUNCTION (Arg, SetSw) be
	test SetSw
	then SetDevice (Arg)
	or StoreArabic (Device, Arg)
