//  Expression reading routines for runoff.
//  Last modified on 05/30/74 at 18:45:50 by R F Mabee.
//
//  Routines defined in this module:
//	ReadNumber	Scan and evaluate numeric field of control line.
//	MakeN		Convert string to number (character constant).
//	ReadExp		Scan and evaluate arbitrary expression in control line.
//	Skip		Advance pointer to next non-blank.
//	ReadParam		Evaluate expression setting or adding to old value.
//	ReadString	Scan string constant.
//	GetString		Read string and store in free storage vector.
//	SubscriptString	Evaluate substring expression.
//  Only ReadNumber, ReadExp, ReadParam, ReadString, and GetString are external.

//  Copyright (c) 1974 by Massachusetts Institute of Technology and Honeywell Information Systems, Inc.

//  General permission is granted to copy and use this program, but not to sell it, provided that the above
//  copyright statement is given.  Contact Information Processing Services, MIT, for further information.
//  Please contact R F Mabee at MIT for information on this program and versions for other machines.

get "head"
get "runoff_head"


let ReadNumber (b) = valof		//  Read and evaluate a number, base b.
     $(	let n = 0
	while 0 le Rawchar!Nrx - '0' < b & Nrx < Nr do	//  For all digits.
	     $(	n := n * b + Rawchar!Nrx - '0'	//  Add in digit.
		Nrx := Nrx + 1
	     $)
	while Rawchar!Nrx = '*s' & Nrx < Nr do Nrx := Nrx + 1	//  Skip over following white space.
	resultis n
     $)
and MakeN (v) = valof		//  Convert string to character (number).
     $(	let x = 0
	for i = 1 to Length (v) do x := x lshift ByteBits logor Subch (v, i)
	resultis x
     $)

let ReadExp (n, v) = valof		//  Read and evaluate a subexpression of precedence n.
				//  v is work space for strings.
     $(	if Nrx ge Nr do
	     $(	ExpError := true	//  Null expression is error.
		resultis 0
	     $)
	let String = false
	let A = valof switchon Rawchar!Nrx into		//  Get primary expression.
	     $(	case '^':	Skip ()
			resultis ^ ReadExp (3, v)
		case '-':	Skip ()
			resultis - ReadExp (5, v)
		case '(':	Skip ()
			A := ReadExp (0, v)
			test Rawchar!Nrx = ')'
			then Skip ()
			or ExpError := true
			resultis A
		case '0': case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			resultis ReadNumber (10)
		case '#':	Skip ()
			resultis ReadNumber (8)
		case '"':	String := true
			ReadString (v)
			resultis MakeN (v)

		default:	ExpError := true		//  Unrecognizable character, must be error.
			resultis 0
	     $)

	while Nrx < Nr do		//  Read possible multiple operators at this precedence.
	     $(	let Op = Rawchar!Nrx
		let NewNrx = Nrx
		if Rawchar!(Nrx + 1) = '*b' do
		     $(	Op := (Op lshift ByteBits logor '*b') lshift ByteBits logor Rawchar!(Nrx + 2)
			NewNrx := NewNrx + 2
		     $)

		let p = valof switchon Op into	//  Get precedence of current operator.
		     $(	case '=_':
			case '|':	resultis 2
			case '&':	resultis 3
			case '=': case '<': case '>':
			case '/=': case '<_': case '>_':
				resultis 4
			case '+': case '-':
				resultis 5
			case '**': case '/': case '\':
				resultis 6
			case '#':	unless String break
				A := Length (v)
				Nrx := NewNrx
				Skip ()
				String := false
				loop
			default:	break		//  Not a known operator, end of expression.
		     $)
		if p le n break		//  Operator less binding, return.
	
		Nrx := NewNrx
		Skip ()			//  Over operator.
		let B = 0
		test String & Rawchar!Nrx = '"' & p = 4		//  Check for string comparison.
		then $(	let w = vec Maxline
			ReadString (w)
			A := CompareStrings (v, w)
		     $)
		or B := ReadExp (p, v)
		String := false

		A := valof switchon Op into		//  Apply the operator.
		     $(	case '|':	resultis A | B
			case '=_':	resultis A eqv B
			case '&':	resultis A & B
			case '=':	resultis A = B
			case '<':	resultis A < B
			case '>':	resultis A > B
			case '/=':	resultis A ne B
			case '<_':	resultis A le B
			case '>_':	resultis A ge B
			case '+':	resultis A + B
			case '-':	resultis A - B
			case '**':resultis A * B
			case '/':	resultis B = 0 -> 0,  A / B
			case '\':	resultis B = 0 -> 0,  A rem B
		     $)
	     $)			//  Repeat until done.

	resultis A
     $)
and Skip () be		//  Skip over current character and following blank space.
	Nrx := Nrx + 1 repeatwhile Rawchar!Nrx = '*s' & Nrx < Nr
and ReadParam (P) = valof	//  Read parameter where leading + or - means add or subtract from current value.
     $(	ExpError := false
	let v = vec Maxline

	test Rawchar!Nrx = '+'	//  Adding.
	then $(	Skip ()
		P := P + ReadExp (4, v)
	     $)
	or test Rawchar!Nrx = '-'	//  Subtracting.
	then $(	Skip ()
		P := P - ReadExp (4, v)
	     $)
	or P := ReadExp (0, v)	//  Or just setting.
	if ExpError | Nrx < Nr do Report ("Malformed expression")
	resultis P
     $)
and ReadString (w) be		//  Read string expression into vector.
     $(	let i, v = 0, vec Maxline
	     $(	Nrx := Nrx + 1
		let c = Rawchar!Nrx
		test c = '**'		//  Escape convention.
		then $(	Nrx := Nrx + 1
			c := valof switchon Rawchar!Nrx into
			     $(	case 'n':	resultis '*n'
				case 't':	resultis '*t'
				case 's':	resultis '*s'
				case 'b':	resultis '*b'
				case 'c':	c := 0
					for i = 1 to 3 do
					     $(	unless '0' le Rawchar!(Nrx + 1) le '9' break
						Nrx := Nrx + 1
						c := c * 10 + Rawchar!Nrx - '0'
					     $)
					resultis c & $8177
				default:	resultis Rawchar!Nrx
			     $)
		     $)
		or if c = '"' do		//  End of string.
		     $(	Skip ()
			while Nrx < Nr & Rawchar!Nrx = '(' do i := SubscriptString (v, i)
			if Nrx < Nr & Rawchar!Nrx = '"' loop
			break
		     $)
		i := i + 1
		v!i := c
	     $)	repeatwhile Nrx < Nr		//  Gather characters of string until end of line.

	v!0 := i
	Packstring (v, w)
     $)
and GetString () = valof	//  Read string and store in new vector.
     $(	let v = vec Maxline
	ExpError := false
	ReadString (v)
	if ExpError | Nrx < Nr do Report ("Malformed string expression")
	resultis StoreString (v)
     $)
and SubscriptString (v, i) = valof		//  Take substring, read subscript expression.
     $(	Skip ()
	let w = vec Maxline
	let a = MinI (ReadExp (4, w), i + 1)	//  Character index for beginning of substring.
	if a < 0 do a := a + i + 1		//  Negative first indicates offset from end.
	if a le 0 do a := 1
	let b = i - a + 1
	if Rawchar!Nrx = ',' do
	     $(	Skip ()			//  Second operand, length of substring.
		b := MinI (ReadExp (4, w), b)
		if b < 0 do b := MaxI (b + i - a + 2, 0)
	     $)
	if Rawchar!Nrx ne ')' do
	     $(	ExpError := true
		resultis i
	     $)
	for i = 1 to b do v!i := v!(a + i - 1)		//  Take the indicated substring.
	Skip ()
	resultis b
     $)
