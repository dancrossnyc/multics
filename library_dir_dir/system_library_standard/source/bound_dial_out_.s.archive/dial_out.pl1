/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1991   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        *********************************************************** */

/* format: style4,delnl,insnl,ifthenstmt,indnoniterend */
dial_out:
     procedure options (variable);

/* dial_out: make a dial_out connection for a user. */
/* Written by C. Hornig, March 1980. */
/* Modified for installation by C. Hornig, April 1982 */
/* Modified January 1983 by C. Hornig for new features */
/* Modified April 1983 for connect entrypoint. */


/****^  HISTORY COMMENTS:
  1) change(91-08-16,Schroth), approve(91-09-09,MCR8247),
     audit(92-04-24,WAAnderson), install(92-04-24,MR12.5-1012):
     Added 'force' mode to modes string for -8bit connections.
  2) change(91-08-19,JRGray), approve(91-09-09,MCR8247),
     audit(92-04-24,WAAnderson), install(92-04-24,MR12.5-1012):
     Modified to note that 'dial_out_' prevents cleanup of profile_ptr
     after ssu_ takes responsibility for it. (Communications 457)
  3) change(91-08-19,JRGray), approve(91-09-09,MCR8247),
     audit(92-04-24,WAAnderson), install(92-04-24,MR12.5-1012):
     Modified to add 'force' to the mode string for '-8bit' communication.
     This allows communication on those connections that don't support
     'no_outp' mode.
                                                   END HISTORY COMMENTS */



dcl  error_table_$bad_arg fixed bin (35) ext static;
dcl  error_table_$badopt fixed bin (35) ext static;
dcl  error_table_$io_no_permission fixed bin (35) ext static;
dcl  error_table_$wrong_no_of_args fixed bin (35) ext static;

dcl  com_err_ options (variable);
dcl  com_err_$suppress_name entry () options (variable);
dcl  cu_$arg_count_rel entry (fixed bin, ptr, fixed bin (35));
dcl  cu_$arg_list_ptr entry returns (ptr);
dcl  cu_$arg_ptr_rel entry (fixed bin, ptr, fixed bin (21), fixed bin (35), ptr);
dcl  dial_out_ entry (ptr, fixed bin (35));
dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  get_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  hcs_$initiate entry (char (*), char (*), char (*), fixed bin (1), fixed bin (2), ptr, fixed bin (35));
dcl  hcs_$terminate_noname entry (ptr, fixed bin (35));
dcl  ioa_ entry options (variable);
dcl  ioa_$rsnnl entry options (variable);
dcl  release_temp_segment_ entry (char (*), ptr, fixed bin (35));
dcl  requote_string_ entry (char (*)) returns (char (*));
dcl  unique_chars_ entry (bit (*)) returns (char (15));

dcl  alp ptr;
dcl  dial_not_connect bit (1) aligned;
dcl  1 doi aligned like dial_out_info;
dcl  code fixed bin (35);
dcl  user_request_length fixed bin (21);
dcl  user_request_ptr ptr;

dcl  cleanup condition;

dcl  (addr, codeptr, index, length, null, rtrim, string, substr) builtin;

dcl  connect_request char (doi.request_length) based (doi.request_ptr);
dcl  user_request char (user_request_length) based (user_request_ptr);
%page;
	dial_not_connect = "1"b;
	doi.command_name = "dial_out";
	goto dial;

connect:
     entry options (variable);
	dial_not_connect = "0"b;
	doi.command_name = "connect";
	goto dial;

dial:
	doi.version = DIAL_OUT_INFO_VERSION_2;
	doi.cmd_version = "2";
	doi.net_iocb = null ();
	doi.request_table_ptr = null ();
	doi.request_ptr, doi.profile_ptr, doi.modes_ptr = null ();
	user_request_ptr = null ();
	doi.request_length, doi.modes_len = 0;
	doi.esc_char = "!";
	string (doi.flags) = ""b;
	if ^dial_not_connect then doi.no_startup_sw = "1"b;
	doi.flags.raw_sw = "1"b;

	on cleanup call cleaner;

	if ^dial_not_connect then do;
	     call get_temp_segment_ (doi.command_name, doi.request_ptr, code);
	     if doi.request_ptr = null () then do;
		call com_err_ (code, doi.command_name, "Getting temp segment.");
		go to return_to_caller;
		end;
	     end;

	alp = cu_$arg_list_ptr ();

	begin options (non_quick);			/* save stack space */

dcl  arg char (al) based (ap);

dcl  ap ptr;
dcl  al fixed bin (21);
dcl  nargs fixed bin;
dcl  i fixed bin;
dcl  (phone_given, bit8_sw) bit (1) aligned;
dcl  channel char (32);
dcl  phone varying char (48);
dcl  resource varying char (64);
dcl  atd char (168);
dcl  dirname char (168);
dcl  ename char (32);
dcl  1 stti aligned like set_term_type_info;

	     call cu_$arg_count_rel (nargs, alp, code);
	     if code ^= 0 then do;
		call com_err_ (code, doi.command_name);
		goto return_to_caller;
		end;

	     channel, phone, stti.name, resource = "";
	     phone_given, bit8_sw = "0"b;

	     do i = 1 to nargs;
		call cu_$arg_ptr_rel (i, ap, al, code, alp);

		if index (arg, "-") = 1
		then if (arg = "-raw") | (arg = "-send_cr") | (arg = "-line") then ;

		     else if arg = "-echo" then doi.echo_sw = "1"b;

		     else if arg = "-8bit" then bit8_sw = "1"b;

		     else if (arg = "-escape") | (arg = "-esc") then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then do;
			     call com_err_ (code, doi.command_name, "Missing escape character.");
			     goto return_to_caller;
			     end;
			if length (arg) ^= 1 then do;
			     call com_err_ (error_table_$bad_arg, doi.command_name,
				"Escape sequence must be one character.");
			     goto return_to_caller;
			     end;
			doi.esc_char = arg;
			end;

		     else if (arg = "-terminal_type") | (arg = "-ttp") then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then do;
			     call com_err_ (code, doi.command_name, "Missing terminal type.");
			     goto return_to_caller;
			     end;
			stti.name = arg;
			end;

		     else if (arg = "-resource") | (arg = "-rsc") then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then do;
			     call com_err_ (code, doi.command_name, "Missing resource description.");
			     goto return_to_caller;
			     end;
			resource = arg;
			end;

		     else if (arg = "-request") | (arg = "-rq") then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then do;
			     call com_err_ (code, doi.command_name, "Missing request.");
			     goto return_to_caller;
			     end;
			user_request_ptr = ap;
			user_request_length = al;
			end;

		     else if arg = "-modes" then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then do;
			     call com_err_ (code, doi.command_name, "Missing modes.");
			     goto return_to_caller;
			     end;
			doi.modes_ptr = ap;
			doi.modes_len = al;
			end;

		     else if (arg = "-abbrev") | (arg = "-ab") then doi.flags.abbrev_sw = "1"b;

		     else if (arg = "-profile") then do;
			i = i + 1;
			call cu_$arg_ptr_rel (i, ap, al, code, alp);
			if code ^= 0 then do;
			     call com_err_ (code, doi.command_name, "Missing profile pathname.");
			     goto return_to_caller;
			     end;
			call expand_pathname_$add_suffix (arg, "profile", dirname, ename, code);
			if code ^= 0 then do;
			     call com_err_ (code, doi.command_name, "^a", arg);
			     goto return_to_caller;
			     end;
			doi.flags.abbrev_sw = "1"b;
			call hcs_$initiate (dirname, ename, "", 0, 0, doi.profile_ptr, code);
			if doi.profile_ptr = null () then do;
			     call com_err_ (code, doi.command_name, "^a>^a", dirname, ename);
			     goto return_to_caller;
			     end;
			end;

		     else if (arg = "-brief") | (arg = "-bf") then doi.flags.brief_sw = "1"b;

		     else if (arg = "-no_start_up") | (arg = "-nsu") | (arg = "-ns")
		     then doi.flags.no_startup_sw = "1"b;

		     else do;
			call com_err_ (error_table_$badopt, doi.command_name, "^a", arg);
			goto return_to_caller;
			end;

		else if /* case */ channel = "" then channel = arg;

		else if ^phone_given then do;
		     phone = arg;
		     phone_given = "1"b;
		     end;

		else do;
		     call com_err_ (error_table_$wrong_no_of_args, doi.command_name, "^a", arg);
		     goto return_to_caller;
		     end;
	     end;

	     if ^doi.raw_sw then doi.echo_sw = "1"b;

	     if channel = "" then do;
		call com_err_$suppress_name (0, doi.command_name, "Usage: ^a CHANNEL {DEST} {-control_args}",
		     doi.command_name);
		goto return_to_caller;
		end;

	     phone = requote_string_ ((phone));

	     if ^dial_not_connect then do;
		doi.request_length = 3;
		connect_request = "ec ";
		if phone_given then do;
		     doi.request_length = 3 + length (phone);
		     substr (connect_request, 4) = phone;
		     end;
		else do;
		     doi.request_length = 3 + length (rtrim (channel));
		     substr (connect_request, 4) = channel;
		     end;
		if user_request_ptr ^= null () then do; /* add user command to this */
		     doi.request_length = doi.request_length + 1;
		     substr (connect_request, doi.request_length, 1) = ";";
		     doi.request_length = doi.request_length + user_request_length;
		     substr (connect_request, doi.request_length - user_request_length + 1) = user_request;
		     end;
		end;
	     else do;
		doi.request_ptr = user_request_ptr;
		doi.request_length = user_request_length;
		end;

	     call ioa_$rsnnl ("tty_ ^a^[ -destination ^a^;^s^]^[ -resource ^a^;^s^]", atd, (0), channel, phone_given,
		phone, (resource ^= ""), requote_string_ ((resource)));
	     call iox_$attach_name ("dial_out." || unique_chars_ (""b), doi.net_iocb, atd, codeptr (dial_out), code);
	     if code ^= 0 then do;
		call com_err_ (code, doi.command_name, "Attaching ^a.", atd);
		goto return_to_caller;
		end;

	     call iox_$open (doi.net_iocb, Stream_input_output, "0"b, code);
	     if code ^= 0 then do;
		call com_err_ (code, doi.command_name, "Opening ^a.", atd);
		goto return_to_caller;
		end;

	     if stti.name ^= "" then do;
		stti.version = stti_version_1;
		string (stti.flags) = ""b;
		stti.flags.set_modes, stti.flags.send_initial_string = "1"b;
		call iox_$control (doi.net_iocb, "set_term_type", addr (stti), code);
		end;
	     else do;
		call iox_$modes (doi.net_iocb, "force,init,rawi,rawo,breakall,ctl_char,^ll,fulldpx", (""), code);
		end;
	     if code ^= 0 then do;
		call com_err_ (code, doi.command_name, "Setting terminal type.");
		goto return_to_caller;
		end;

	     if bit8_sw then do;
		call iox_$modes (doi.net_iocb, "force,8bit,no_outp", (""), code);
		end;
	end;

	call dial_out_ (addr (doi), code);

	if code = error_table_$io_no_permission then do;
	     if ^doi.flags.brief_sw then call ioa_ ("dial_out: Connection closed.");
	     end;
	else if code ^= 0 then call com_err_ (code, doi.command_name);

return_to_caller:
	call cleaner;
	return;


cleaner:
     procedure;

	if doi.net_iocb ^= null () then do;
	     call iox_$close (doi.net_iocb, code);
	     call iox_$detach_iocb (doi.net_iocb, code);
	     call iox_$destroy_iocb (doi.net_iocb, code);
	     doi.net_iocb = null ();
	     end;
	/* COM 457: Note that dial_out_ sets profile_ptr to null() after ssu_ takes responsibility for it */
	if doi.profile_ptr ^= null () then do;
	     call hcs_$terminate_noname (doi.profile_ptr, code);
	     doi.profile_ptr = null ();
	     end;
	if ^dial_not_connect then call release_temp_segment_ (doi.command_name, doi.request_ptr, code);
	return;
     end cleaner;
%page;
%include dial_out_info;
%include iox_dcls;
%include iox_modes;
%include set_term_type_info;

     end dial_out;
