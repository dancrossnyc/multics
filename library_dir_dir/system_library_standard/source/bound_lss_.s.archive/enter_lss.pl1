/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


enter_lss: procedure options (variable);

/* This command forces the command processor to transform commands using
   a LSS command table.

   Usage: enter_lss {table path}

   Written by C. Hornig, October 1979
   Modified by C Spitzer. Jan 1984. attempt to verify the goodness of the
	  command list.
*/

dcl 1 lss_header based (lssp) aligned,
      2 ratio fixed bin (17),
      2 interval fixed bin (17),
      2 number_of_names fixed bin (71),
      2 names (lss_header.number_of_names) char (32) aligned,
      2 pointers (lss_header.number_of_names) aligned,
        3 where fixed bin (17),
        3 length fixed bin (17);

dcl 1 lss based (lssp) aligned,
      2 ratio fixed bin (17),
      2 interval fixed bin (17),
      2 number_of_names fixed bin (71),
      2 names (lss.number_of_names) char (32) aligned,
      2 pointers (lss.number_of_names) aligned,
        3 where fixed bin (17),
        3 length fixed bin (17),
      2 paths char (path_length) aligned;

dcl  ME char (9) init ("enter_lss") static options (constant);

dcl  com_err_ entry options (variable);
dcl  command_processor_$setup_lss entry (pointer);
dcl  cu_$arg_count entry returns (fixed bin);
dcl  cu_$arg_ptr entry (fixed bin, pointer, fixed bin (24), fixed bin (35));
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  initiate_file_ entry (char(*), char(*), bit(*), ptr, fixed bin(24), fixed bin(35));
dcl  start_governor_ entry (fixed bin, fixed bin);
dcl  pathname_ entry (char(*), char(*)) returns(char(168));

dcl  fixedoverflow condition;

dcl (currentsize, divide, null) builtin;

dcl  bit_count fixed bin (24);
dcl  path_length fixed bin (21);
dcl  dirname char (168);
dcl  ename char (32);
dcl  ap ptr;
dcl  al fixed bin (24);
dcl  argument character (al) based (ap);
dcl  code fixed bin (35);
dcl  lssp ptr;
dcl  i fixed bin;

/* * * * * * * * * * ENTER_LSS * * * * * * * * * */

	if cu_$arg_count () ^= 1 then do;		/* program misused */
	     call com_err_ (0, ME, "Usage: enter_lss {table pathname}");
	     return;
	end;

	call cu_$arg_ptr (1, ap, al, code);		/* get the taBle path */
	if code ^= 0 then do;
	     call com_err_ (code, ME);
	     return;
	end;

	call expand_pathname_ (argument, dirname, ename, code);
	if code ^= 0 then do;			/* bad pathname */
	     call com_err_ (code, ME, "^a.", argument);
	     return;
	end;
	call initiate_file_ (dirname, ename,"100"b, lssp, bit_count, code); /* initiate the LSS */
	if lssp = null () then do;
	     call com_err_ (code, ME, "Initiating ^a.", pathname_ (dirname, ename));
	     return;
	end;

	on fixedoverflow goto bad_input_segment;
	if lss.number_of_names * 9 > divide (bit_count, 36, 21, 0)
	then goto bad_input_segment;			/* 9 is the size in words of 1 entry in lss */

          path_length = divide (bit_count, 9, 21, 0) - (currentsize (lss_header)*4);
	do i = 1 to lss.number_of_names;
	     if lss.where (i) + lss.length (i) > path_length + 1 then do;
bad_input_segment:	call com_err_ (0, ME, "The input command list is not a validly compiled LSS table. ^a", pathname_ (dirname, ename));
		return;
	     end;
	end;

	revert fixedoverflow;

	call command_processor_$setup_lss (lssp);	/* tell the CP */
	call start_governor_ (lss.ratio, lss.interval);	/* enforce the governor */
     end enter_lss;
