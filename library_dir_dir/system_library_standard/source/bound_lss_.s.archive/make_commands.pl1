/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


make_commands: procedure ();

/*

   Coded for the Limited Service System May 1970 by R. Frankston
   Modified by Dan Bricklin Nov 1970
   Updated 7/22/76 to current version PL/I by S. Herbst
   Modified March 1977 by M. R. Jordan to correct errors and update to use expand_pathname_  (MCR #2576)

*/



/*

   make_commands, mc

   Usage:

   make_commands <input_path>

   Where:

   <input_path> is the pathname of the input segment. The .ct suffix may
   be included but is not necessary (it will be assumed). The
   make_commands command will build a command table from the ASCII input
   segment to be used by transform_command_ whenever the
   command_processor_ recieves a command from the listen_ procedure. The
   table built is named <input_seg> where <input_seg> is the entry name
   of <input_path> with the .ct suffix removed and is located in the
   working direcory. The output segment must be named lss_command_list_
   to be used by the limited_service_subsystem_ or
   limited_command_system_ process overseers. If the
   limited_command_system_ process overseer is used, the output segment
   must be located in the project directory.

*/

dcl  NL char (1) aligned internal static options (constant) init ("
");
dcl  aclinfo_ptr ptr;
dcl  arg_ptr ptr;
dcl  arglen fixed bin;
dcl  before builtin;
dcl  bit_count fixed bin (24);
dcl  ch char (arglen) based (arg_ptr) unaligned;
dcl  chr char (1) aligned;
dcl  chs char (100) aligned based (input_pointer);
dcl  cleanup condition;
dcl  code fixed bin (35);
dcl  com_err_ ext entry options (variable);
dcl  command_pointer ptr;
dcl  cu_$arg_ptr ext entry (fixed bin, ptr, fixed bin, fixed bin (35));
dcl  cv_dec_ ext entry (char (*) aligned) returns (fixed bin (35));
dcl  dirname char (168);
dcl  divide builtin;
dcl  ename char (32);
dcl  error_occurred bit (1) aligned;
dcl  error_table_$segknown external fixed bin (35);
dcl  expand_pathname_ entry (char (*), char (*), char (*), fixed bin (35));
dcl  expand_pathname_$add_suffix entry (char (*), char (*), char (*), char (*), fixed bin (35));
dcl  first fixed bin;
dcl  fixed builtin;
dcl  hcs_$initiate_count ext entry (char (*), char (*), char (*), fixed bin (24), fixed bin (2), ptr, fixed bin (35));
dcl  i fixed bin;
dcl  in_comment bit (1) aligned;
dcl  index builtin;
dcl  input_pointer pointer;
dcl  ioa_ ext entry options (variable);
dcl  j fixed bin;
dcl  length builtin;
dcl  line char (256) aligned varying;
dcl  lineno fixed bin;
dcl  min builtin;
dcl  n fixed bin;
dcl  name_len fixed bin;
dcl  next_free fixed bin;
dcl  null builtin;
dcl  output_name char (32);
dcl  paren bit (1) aligned;
dcl  path_len fixed bin;
dcl  rtrim builtin;
dcl  s fixed bin;
dcl  skip bit (1) aligned;
dcl  start_line fixed bin;
dcl  start_name fixed bin;
dcl  substr builtin;
dcl  temp1 fixed bin;
dcl  tssi_$get_segment entry (char (*), char (*), ptr, ptr, fixed bin (35));
dcl  tssi_$finish_segment entry (ptr, fixed bin (24), bit (36) aligned, ptr, fixed bin (35));
dcl  tssi_$clean_up_segment entry (ptr);

/*

   The following structure is used as temporary storage for the command
   transformation information until we can determine just exactly how many
   commands there are.

*/


dcl 1 commands aligned,
    2 com_info (200),
      3 name char (32),
      3 path char (168),
      3 len fixed bin (71);


/*

   The following table is the template for the final output segment created
   by this command.  The table contains information for mapping commands
   typed to actual command segment names.  Also information for the governor
   is save in this structure.

   */


dcl 1 table based (command_pointer) aligned,
    2 ratio fixed bin (17),
    2 interval_len fixed bin (17),
    2 number_of_names fixed bin (71),
    2 names (code refer (number_of_names)) char (32) aligned,
    2 pointers (code refer (number_of_names)) aligned,
      3 where fixed bin (17),
      3 length fixed bin (17),
    2 paths char (100) aligned;

	goto common;


mc:	entry ();


common:


	call cu_$arg_ptr (1, arg_ptr, arglen, code);
	if code ^= 0 then do;
	     call com_err_ (code, "make_commands", "Usage is: ""make_commands <input_path>""");
	     return;
	end;

	call expand_pathname_$add_suffix (ch, "ct", dirname, ename, code);
	if code ^= 0 then do;
in_err:	     call com_err_ (code, "make_commands", "^a", ch);
	     return;
	end;
	call hcs_$initiate_count (dirname, ename, "", bit_count, 01b, input_pointer, code);
	if code ^= 0 then if code ^= error_table_$segknown then do;
		if dirname = ">" then call com_err_ (code, "make_commands", ">^a", ename);
		else call com_err_ (code, "make_commands", "^a>^a", dirname, ename);
		return;
	     end;

	output_name = substr (ename, 1, length (rtrim (ename))-3);
	call expand_pathname_ (output_name, dirname, ename, code);
	if code ^= 0 then do;
out_err:	     call com_err_ (code, "make_commands", "^a", output_name);
	     return;
	end;
	aclinfo_ptr = null ();
	on cleanup
	     begin;
	     if aclinfo_ptr ^= null () then call tssi_$clean_up_segment (aclinfo_ptr);
	end;
	call tssi_$get_segment (dirname, ename, command_pointer, aclinfo_ptr, code);
	if command_pointer = null then go to out_err;

/*

   Now parse the input segment and build a temporary table of the results of
   that parse.

*/


	temp1 = divide (bit_count, 9, 17, 0);
	n = 0;
	s, lineno, start_line = 1;
	paren, in_comment, skip, error_occurred = "0"b;
	do i = 1 to temp1;
	     if in_comment then
		if substr (chs, i-1, 2) = "*/" then do;
		     in_comment = "0"b;
		     chr = " ";
		     go to blank;
		end;
		else go to next;
	     chr = substr (chs, i, 1);
	     if chr = NL then do;
		lineno = lineno + 1;
		go to next;
	     end;
	     if skip then do;
		if chr = ";" then skip = "0"b;
		s = 1;
		start_line = i+1;
		go to next;
	     end;
	     if chr = "/" then
		if i < temp1 then
		     if substr (chs, i+1, 1) = "*" then do;
			in_comment = "1"b;
			go to next;
		     end;
	     if chr = " " then do;
blank:		if s = 2 then if paren then do;
			s = 1;
			name_len = 0;
		     end;
		     else s = 3;
		if s = 5 then s = 6;
		go to next;
	     end;

	     if chr = "	" then do;			/* tab */
		if s = 1|s = 4 then go to next;
		go to error;
	     end;

	     if chr = "(" then do;
		if ^paren & s = 1 then do;
		     paren = "1"b;
		     first = n+1;
		     go to next;
		end;
		go to error;
	     end;

	     if chr = ")" then do;
		if paren then do;
		     if s = 2 then s = 3;
		     if s ^= 3 then go to error;
		     paren = "0"b;
		     go to next;
		end;
		go to error;
	     end;

	     if chr = ":" then do;
		if paren then go to error;
		if s = 2|s = 3 then do;
		     s = 4;
		     go to next;
		end;
		go to error;
	     end;

	     if chr = ";" then do;
		if s = 4 then do;
		     do j = first to n;
			commands.path (j) = commands.name (n);
			commands.len (j) = name_len;
		     end;
		     s = 1;
		     start_line = i+1;
		     go to next;
		end;
		if s = 5|s = 6 then do;
		     do j = first to n-1;
			commands.len (j) = path_len;
			commands.path (j) = commands.path (n);
		     end;
		     commands.len (n) = path_len;
		     s = 1;
		     start_line = i+1;
		     go to next;
		end;
		go to error;
	     end;

/* other characters */

	     if s = 1 then do;
		s = 2;
		n = n+1;
		if ^paren then first = n;
		if n>200 then do;
		     call com_err_ (0, "make_commands", "Max number of names (200) exceeded, terminating run.");
		     return;
		end;
		commands.name (n) = " ";
		name_len = 0;
		start_name = i;
	     end;
	     if s = 2 then do;
		name_len = name_len + 1;
		substr (commands.name (n), name_len, 1) = chr;
		go to next;
	     end;
	     if s = 4 then do;
		s = 5;
		path_len = 0;
		commands.path (n) = " ";
	     end;
	     if s = 5 then do;
		path_len = path_len+1;
		substr (commands.path (n), path_len, 1) = chr;
		go to next;
	     end;
error:	     line = substr (chs, start_line, min (index (substr (chs, i, temp1-i+1), ";")+i-1, temp1)-start_line+1);
	     call com_err_ (0, "make_commands", "Syntax error on line ^d, around char #^d of statement: ^a",
		lineno, i-start_line, line);
	     error_occurred, skip = "1"b;

next:	end;

	if s ^= 1 then do;
	     call com_err_ (0, "make_commands", "Last statement doesn't end with a semi-colon.");
give_up:	     call com_err_ (0, "make_commands", "At least one syntax error, compilation is aborted.");
	     return;
	end;

	if error_occurred then go to give_up;

/*

   Now we must build the commands table from the data gathered thus far.

*/


	next_free = 1;
	j = 1;
	ratio, interval_len = 0;
	if commands.name (1) = "ratio" then if commands.name (2) = "interval" then do;
		ratio = cv_dec_ (commands.path (1));
		interval_len = cv_dec_ (commands.path (2));
		call ioa_ ("ratio = ^d, interval = ^d", ratio, interval_len);
		j = 3;
	     end;
	number_of_names = n - j + 1;
	do i = j to n;
	     table.names (i-j+1) = commands.name (i);
	     pointers.where (i-j+1) = next_free;
	     next_free = next_free + commands.len (i);
	     if i>j then if commands.path (i) = commands.path (i-1) then do;
		     next_free = pointers.where (i-j+1);
		     pointers.where (i-j+1) = pointers.where (i-j);
		end;
	     pointers.length (i-j+1) = commands.len (i);
	     substr (paths, pointers.where (i-j+1), pointers.length (i-j+1)) = substr (commands.path (i), 1, pointers.length (i-j+1));
	end;
	i = 4 + 10*number_of_names + divide (next_free+2, 4, 17, 0);
	call tssi_$finish_segment (command_pointer, fixed (i*36, 24), "110"b, aclinfo_ptr, code);
	revert cleanup;
	if code ^= 0 then go to out_err;
	return;

     end make_commands;
