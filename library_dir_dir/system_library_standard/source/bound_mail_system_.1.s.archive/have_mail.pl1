/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Returns "true" if there are messages in the specified mailbox */

/* Created:  September 1982 by G. Palter */
/* Modified: July 1983 by G. Palter for new mail system interface */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


have_mail:
     procedure () options (variable);


dcl  command_name character (32);

dcl  code fixed binary (35);

dcl  argument character (argument_lth) unaligned based (argument_ptr);
dcl  argument_ptr pointer;
dcl  argument_lth fixed binary (21);
dcl  (n_arguments, argument_idx) fixed binary;
dcl  active_function bit (1) aligned;

dcl  return_value character (return_value_max_lth) varying based (return_value_ptr);
dcl  return_value_max_lth fixed binary (21);
dcl  return_value_ptr pointer;

dcl  sci_ptr pointer;

dcl  1 local_pcao aligned like parse_ca_options;

dcl  have_mailbox bit (1) aligned;			/* ON => have a pathname argument already */
dcl  mailbox_dirname character (168);
dcl  mailbox_ename character (32);
dcl  mailbox_address_ptr pointer;

dcl  (interactive_messages, mail) bit (1) aligned;	/* ON => this type of mail is being sought */
dcl  default_mailbox bit (1) aligned;			/* ON => default mailbox is being checked */

dcl  include_by_type bit (1) aligned;
dcl  n_messages fixed binary;				/* # of mesasges in it */
dcl  (n_ordinary_messages, n_interactive_messages) fixed binary;

dcl  HAVE_MAIL_OR_MESSAGES_VERSION character (32) static options (constant) initial ("3.0a");

dcl  mlsys_data_$user_default_mailbox_address pointer external;

/* format: off */
dcl (error_table_$inconsistent, error_table_$too_many_args)
	fixed binary (35) external;
/* format: on */

dcl  active_fnc_err_ entry () options (variable);
dcl  com_err_ entry () options (variable);
dcl  cu_$af_return_arg entry (fixed binary, pointer, fixed binary (21)) returns (fixed binary (35));
dcl  cu_$arg_list_ptr entry () returns (pointer);
dcl  ioa_ entry () options (variable);
dcl  mail_system_$compare_addresses entry (pointer, pointer, fixed binary (35)) returns (bit (1) aligned);
dcl  mail_system_$create_mailbox_address
	entry (character (*), character (*), character (*) varying, character (*) varying, pointer, fixed binary (35));
dcl  mail_system_$free_address entry (pointer, fixed binary (35));
dcl  mail_system_$get_address_pathname entry (pointer, character (*), character (*), character (*), fixed binary (35));
dcl  mail_system_$get_message_counts
	entry (character (*), character (*), bit (1) aligned, fixed binary, fixed binary, fixed binary,
	fixed binary (35));
dcl  mlsys_utils_$parse_mailbox_control_args
	entry (pointer, fixed binary, pointer, character (*), character (*), fixed binary (35));
dcl  pathname_ entry (character (*), character (*)) returns (character (168));
dcl  ssu_$abort_line entry () options (variable);
dcl  ssu_$arg_ptr entry (pointer, fixed binary, pointer, fixed binary (21));
dcl  ssu_$destroy_invocation entry (pointer);
dcl  ssu_$return_arg entry (pointer, fixed binary, bit (1) aligned, pointer, fixed binary (21));
dcl  ssu_$standalone_invocation entry (pointer, character (*), character (*), pointer, entry, fixed binary (35));

dcl  cleanup condition;

dcl  (addr, index, null, string) builtin;
%page;
/* Defaults to check for mail and interactive messages */

/* have_mail: entry () options (variable); */

	command_name = "have_mail";
	mail, interactive_messages = "1"b;
	go to COMMON;


/* Defaults to check for interactive messages only */

have_messages:
     entry () options (variable);

	command_name = "have_messages";
	mail = "0"b;
	interactive_messages = "1"b;
	go to COMMON;


/* Argument scanning */

COMMON:
	sci_ptr, mailbox_address_ptr = null ();		/* for cleanup handler */

	on condition (cleanup)
	     begin;
		if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
		if mailbox_address_ptr ^= null () then call mail_system_$free_address (mailbox_address_ptr, (0));
	     end;

	call ssu_$standalone_invocation (sci_ptr, command_name, HAVE_MAIL_OR_MESSAGES_VERSION, cu_$arg_list_ptr (),
	     abort_have_mail_or_messages_command, code);
	if code ^= 0 then do;			/* please forgive the following but ... */
	     if cu_$af_return_arg ((0), (null ()), (0)) = 0 then
		call active_fnc_err_ (code, command_name, "Can not establish standalone subsystem invocation.");
	     else call com_err_ (code, command_name, "Can not establish standalone subsystem invocation.");
	     return;
	end;

	call ssu_$return_arg (sci_ptr, n_arguments, active_function, return_value_ptr, return_value_max_lth);

	have_mailbox = "0"b;
	default_mailbox = "0"b;

	local_pcao.version = PARSE_CA_OPTIONS_VERSION_1;
	local_pcao.logbox_creation_mode,		/* logbox/savebox must already exist */
	     local_pcao.savebox_creation_mode = DONT_CREATE_MAILBOX;
	string (local_pcao.flags) = ""b;
	local_pcao.abort_on_errors = "1"b;		/* any errors are immediately fatal */
	local_pcao.validate_addresses = "1"b;		/* insure that any mailbox specified actually exists */

	do argument_idx = 1 to n_arguments;

	     call ssu_$arg_ptr (sci_ptr, argument_idx, argument_ptr, argument_lth);

	     if index (argument, "-") = 1 then		/* a control argument */
		if (argument = "-interactive_messages") | (argument = "-im") then interactive_messages = "1"b;
		else if (argument = "-no_interactive_messages") | (argument = "-nim") then
		     interactive_messages = "0"b;

		else if (argument = "-mail") | (argument = "-ml") then mail = "1"b;
		else if (argument = "-no_mail") | (argument = "-nml") then mail = "0"b;

		else go to TRY_ARGUMENT_AS_MAILBOX_PATHNAME;
						/* unknown control argument: maybe a mailbox specifier? */

	     else do;				/* not a control argument: must be a mailbox specifier */
TRY_ARGUMENT_AS_MAILBOX_PATHNAME:
		call mlsys_utils_$parse_mailbox_control_args (sci_ptr, argument_idx, addr (local_pcao),
		     mailbox_dirname, mailbox_ename, code);
						/* ... above entrypoint aborts us if anything's wrong */
		argument_idx = argument_idx - 1;	/* ... do loop will increment it again */
		if have_mailbox then		/* ... this one's OK and we already have one (sigh) */
		     call ssu_$abort_line (sci_ptr, error_table_$too_many_args, "Only one mailbox may be specified.");
		have_mailbox = "1"b;		/* ... now we've got the mailbox to be examined */
	     end;
	end;

	if ^mail & ^interactive_messages then
	     call ssu_$abort_line (sci_ptr, error_table_$inconsistent, """-no_mail"" and ""-no_interactive_messages""");


/* Use the user's default mailbox as a default if necessary; otherwise, check if the supplied mailbox is the user's
   default mailbox so that the appropriate form of message ("You have mail" vs.  "There is mail") will be printed */

	if ^have_mailbox then do;
	     call mail_system_$get_address_pathname (mlsys_data_$user_default_mailbox_address, mailbox_dirname,
		mailbox_ename, ((32)" "), code);
	     if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Getting the pathname of your mailbox.");
	     default_mailbox = "1"b;			/* know this for certain */
	end;

	else do;
	     call mail_system_$create_mailbox_address (mailbox_dirname, mailbox_ename, "", "", mailbox_address_ptr,
		code);
	     if code ^= 0 then
		call ssu_$abort_line (sci_ptr, code, "Getting an address for ^a.",
		     pathname_ (mailbox_dirname, mailbox_ename));
	     default_mailbox =
		mail_system_$compare_addresses (mailbox_address_ptr, mlsys_data_$user_default_mailbox_address, (0));
	     call mail_system_$free_address (mailbox_address_ptr, (0));
	end;


/* Actual processing */

	include_by_type = ^mail | ^interactive_messages;

	call mail_system_$get_message_counts (mailbox_dirname, mailbox_ename, include_by_type, n_messages,
	     n_ordinary_messages, n_interactive_messages, code);
	if code ^= 0 then
	     call ssu_$abort_line (sci_ptr, code, "Determining the number of messages in ^a.",
		pathname_ (mailbox_dirname, mailbox_ename));

	if n_messages = 0 then do;			/* mailbox is empty */
	     if active_function then
		return_value = "false";
	     else call ioa_ ("No ^[messages^;mail^].", (^mail & interactive_messages));
	end;

	else if (mail & interactive_messages) then do;	/* don't care what type */
	     if active_function then return_value = "true";
	     else if default_mailbox then call ioa_ ("You have mail.");
	     else call ioa_ ("There is mail.");
	end;

	else do;					/* checking by type */
	     if mail then do;			/* ... only want ordinary mail */
		if n_ordinary_messages = 0 then
		     if active_function then
			return_value = "false";
		     else call ioa_ ("No mail.");
		else if active_function then return_value = "true";
		else if default_mailbox then call ioa_ ("You have mail.");
		else call ioa_ ("There is mail.");
	     end;

	     else do;				/* ... only want interactive messages */
		if n_interactive_messages = 0 then
		     if active_function then
			return_value = "false";
		     else call ioa_ ("No messages.");
		else if active_function then return_value = "true";
		else if default_mailbox then call ioa_ ("You have messages.");
		else call ioa_ ("There are messages.");
	     end;
	end;

RETURN_FROM_HAVE_MAIL_OR_MESSAGES_COMMAND:
	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	if mailbox_address_ptr ^= null () then call mail_system_$free_address (mailbox_address_ptr, (0));

	return;



/* Invoked by ssu_$abort_line and ssu_$abort_subsystem to terminate execution of have_mail/have_messages */

abort_have_mail_or_messages_command:
     procedure ();

	go to RETURN_FROM_HAVE_MAIL_OR_MESSAGES_COMMAND;

     end abort_have_mail_or_messages_command;
%page;
%include mlsys_parse_ca_options;

     end have_mail;
