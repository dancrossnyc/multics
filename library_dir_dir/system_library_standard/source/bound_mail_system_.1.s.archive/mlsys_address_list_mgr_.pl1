/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1981 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Address list management for the Multics Mail System */

/* Created:  May 1981 by G. Palter */
/* Modified: 3 September 1981 by G. Palter to special case empty address lists in cv_address_list_to_* */
/* Modified: July 1983 by G. Palter to convert to new mail system specification */
/* Modified: 6 March 1984 by G. Palter to fix error #0422 -- mail_system_$free_address_list may damage the mail system's
      internal storage if called with a pointer to an already freed address list */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen,^indcomtxt */


mlsys_address_list_mgr_:
     procedure () options (rename ((alloc_, mlsys_storage_mgr_$allocate)));

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_address_list_ptr pointer parameter;
dcl  P_code fixed binary (35) parameter;

dcl  P_address_list_version character (8) parameter;	/* create_*_address_list, add_address_*: version of
						      address_list structure desired by the caller */

dcl  P_new_address_list_ptr pointer parameter;		/* copy_address_list: set -> copy of old address list;
						   merge_address_lists_*: set -> merger of input lists */

dcl  P_old_address_list_ptr pointer parameter;		/* copy_address_list -> address list to be copied */

dcl  P_address_list_1_ptr pointer parameter;		/* merge_address_lists_*: -> first list to be merged */
dcl  P_address_list_2_ptr pointer parameter;		/* merge_address_lists_*: -> second list to be merged */
dcl  P_eliminate_duplicates bit (1) aligned parameter;	/* merge_address_lists_*: ON => eliminate duplicate addresses
						      from the merged list */

dcl  P_address_ptr pointer parameter;			/* add_address_*, replace_address_*: -> the new address */

dcl  P_address_position fixed binary parameter;		/* delete_address_*, replace_address_*: identifies which
						      address in the address_list to delete/replace */
/**** format: indcomtxt */


/* Local copies of parameters */

dcl  address_list_ptr_as_array (1) pointer aligned based (addr (address_list_ptr));

dcl  (old_address_list_ptr, address_list_1_ptr, address_list_2_ptr, new_address_list_ptr) pointer;

dcl  address_ptr pointer;


/* Definition of the reserved data in the address_list structure */

dcl  1 address_list_reserved_data aligned based (addr (address_list.reserved)),
       2 n_addresses_allocated fixed binary,		/* actual # of address slots available in the structure */
       2 reference_count fixed binary,			/* # of mail system objects which are using this list */
       2 flags,
         3 read_only bit (1) unaligned,			/* ON => user may not modify this address list */
         3 user_freeable bit (1) unaligned,		/* ON => user may free this list no matter the type */
         3 pad bit (34) unaligned;


/* Remaining declarations */

dcl  read_only_address_list bit (1) aligned;		/* whether to create a read-only to user-ring address list */
dcl  user_freeable_address_list bit (1) aligned;		/* whether to allow user-ring to free it anyway */

dcl  increment_reference_counts bit (1) aligned;

dcl  (idx, jdx) fixed binary;

/* format: off */
dcl (error_table_$bad_index, error_table_$bad_subr_arg, error_table_$unimplemented_version, mlsys_et_$empty_address_list,
     mlsys_et_$not_address_list, mlsys_et_$read_only_address_list)
	fixed binary (35) external;
/* format: on */

dcl  mlsys_address_mgr_$decrement_reference_count entry (pointer);
dcl  mlsys_address_mgr_$increment_reference_count entry (pointer);
dcl  mlsys_address_mgr_$verify_address entry (pointer, fixed binary (35)) returns (bit (1) aligned);
dcl  mlsys_transmit_$eliminate_duplicate_addrs entry ((*) pointer, fixed binary (35));

dcl  (addr, baseno, binary, mod, null, string) builtin;
%page;
/* Create an empty address list */

create_read_only_address_list:			/* ... writeable only by the mail system */
     entry (P_address_list_version, P_address_list_ptr, P_code);

	read_only_address_list = "1"b;
	user_freeable_address_list = "0"b;
	go to CREATE_ADDRESS_LIST_COMMON;


create_user_freeable_address_list:			/* ... not writeable by user-ring but can be freed there */
     entry (P_address_list_version, P_address_list_ptr, P_code);

	read_only_address_list, user_freeable_address_list = "1"b;
	go to CREATE_ADDRESS_LIST_COMMON;


create_writeable_address_list:			/* ... writeable by the user: target of the user-ring gate */
     entry (P_address_list_version, P_address_list_ptr, P_code);

	read_only_address_list = "0"b;
	user_freeable_address_list = "1"b;


CREATE_ADDRESS_LIST_COMMON:
	if P_address_list_version ^= ADDRESS_LIST_VERSION_2 then do;
	     P_code = error_table_$unimplemented_version;
	     return;
	end;

	address_list_n_addresses = mlsys_data_$address_list_allocation;
						/* allows some room for the first few addresses */

	allocate address_list in (mlsys_area) set (address_list_ptr);

	address_list.version = ADDRESS_LIST_VERSION_2;

	address_list_reserved_data.n_addresses_allocated = address_list_n_addresses;
	address_list.n_addresses = 0;			/* the list is empty */

	address_list_reserved_data.reference_count = 0;	/* nothing has referenced this list yet */

	string (address_list_reserved_data.flags) = ""b;
	address_list_reserved_data.read_only = read_only_address_list;
	address_list_reserved_data.user_freeable = user_freeable_address_list;

	P_address_list_ptr = address_list_ptr;		/* give it to the caller */
	P_code = 0;				/* success */

	return;
%page;
/* Convert the supplied address list into a read-only address list: used to prevent the user from modifying an address
   list once it is being used by a message */

set_read_only:
     entry (P_address_list_ptr);

	address_list_ptr = copy_ptr (P_address_list_ptr);

	address_list_reserved_data.read_only = "1"b;
	address_list_reserved_data.user_freeable = "0"b;

	return;



/* Free an address list if its reference count is zero (ie: if no other mail system object has a pointer to this list) */

free_address_list:					/* ... any type of address list */
     entry (P_address_list_ptr, P_code);

	if ^verify_address_list (P_address_list_ptr, P_code) then return;
	go to FREE_ADDRESS_LIST_COMMON;


free_address_list_writeable:				/* ... only if the user-ring can free it */
     entry (P_address_list_ptr, P_code);

	if ^verify_writeable_address_list (P_address_list_ptr, P_code) then return;


FREE_ADDRESS_LIST_COMMON:
	address_list_ptr = copy_ptr (P_address_list_ptr);
	P_address_list_ptr = null ();			/* insure the caller doesn't use it anymore */

	if address_list_reserved_data.reference_count <= 0 then do;
	     do idx = 1 to address_list.n_addresses;
		call mlsys_address_mgr_$decrement_reference_count (address_list.addresses (idx));
	     end;					/* no longer interested in the addresses */
	     free address_list in (mlsys_area);
	end;

	P_code = 0;				/* success */

	return;
%page;
/* Increment the reference count of an address list: to avoid the user accidently freeing an address list structure which
   is in use by other parts of the mail system (eg: references within a message or certain types of addresses) */

increment_reference_count:
     entry (P_address_list_ptr);

	address_list_ptr = P_address_list_ptr;

	address_list_reserved_data.reference_count = address_list_reserved_data.reference_count + 1;

	return;



/* Decrement the reference count of an address list:  If the reference count reaches zero, nothing in the mail system is
   using this address list any longer and its storage is released */

decrement_reference_count:
     entry (P_address_list_ptr);

	address_list_ptr = P_address_list_ptr;

	address_list_reserved_data.reference_count = address_list_reserved_data.reference_count - 1;

	if address_list_reserved_data.reference_count <= 0 then call free_address_list (P_address_list_ptr, (0));

	P_address_list_ptr = null ();			/* keep the caller from using it anymore */

	return;
%page;
/* Copy an address list: always creates a user-ring modifiable address list */

copy_address_list:
     entry (P_old_address_list_ptr, P_new_address_list_ptr, P_code);

	if ^verify_address_list (P_old_address_list_ptr, P_code) then return;
	old_address_list_ptr = copy_ptr (P_old_address_list_ptr);

	address_list_n_addresses =			/* use same # of slots as the original list */
	     addr (old_address_list_ptr -> address_list.reserved) -> address_list_reserved_data.n_addresses_allocated;

	allocate address_list in (mlsys_area) set (address_list_ptr);

	address_list.version = ADDRESS_LIST_VERSION_2;
	address_list_reserved_data.n_addresses_allocated = address_list_n_addresses;
	address_list_reserved_data.reference_count = 0;	/* nothing has reference this list yet */
	string (address_list_reserved_data.flags) = ""b;	/* turns off read-only flag: user can always modify ... */
	address_list_reserved_data.user_freeable = "1"b;	/* ... an address list created by this entrypoint */

	address_list.n_addresses = old_address_list_ptr -> address_list.n_addresses;

	do idx = 1 to address_list.n_addresses;
	     address_list.addresses (idx) = old_address_list_ptr -> address_list.addresses (idx);
	     call mlsys_address_mgr_$increment_reference_count (address_list.addresses (idx));
	end;

	P_new_address_list_ptr = address_list_ptr;	/* success */
	P_code = 0;

	return;
%page;
/* Merge two address lists: optionally eliminate any duplicate addresses in the resulting list; the output may replace
   either of the input lists if desired */

merge_address_lists:				/* ... writeable only by the mail system */
     entry (P_address_list_1_ptr, P_address_list_2_ptr, P_eliminate_duplicates, P_new_address_list_ptr, P_code);

	read_only_address_list = "1"b;
	go to MERGE_ADDRESS_LISTS_COMMON;


merge_address_lists_writeable:			/* ... writeable by the user: target of the user-ring gate */
     entry (P_address_list_1_ptr, P_address_list_2_ptr, P_eliminate_duplicates, P_new_address_list_ptr, P_code);

	read_only_address_list = "0"b;


MERGE_ADDRESS_LISTS_COMMON:
	address_list_1_ptr = copy_ptr (P_address_list_1_ptr);
	address_list_2_ptr = copy_ptr (P_address_list_2_ptr);


/* Validate the input arguments:  Insure that all non-null address_list_ptr's do indeed reference address_list strucutres,
   that the caller is not attempting to merge 3 lists simultaneously, and, if invoked via the mail_system_ gate, that the
   user-ring may modify the output address_list structure */

	if address_list_1_ptr ^= null () then		/* it's OK for an input list to not be present */
	     if ^verify_address_list (address_list_1_ptr, P_code) then return;

	if address_list_2_ptr ^= null () then
	     if ^verify_address_list (address_list_2_ptr, P_code) then return;

	if P_new_address_list_ptr ^= null () then do;	/* must be one of the input lists ... */
	     if (addr (P_new_address_list_ptr) ^= addr (P_address_list_1_ptr))
		& (addr (P_new_address_list_ptr) ^= addr (P_address_list_2_ptr)) then do;
		P_code = error_table_$bad_subr_arg;
		return;
	     end;
	     if ^read_only_address_list then		/* ... furthermore it must be modifiable by the user-ring */
		if ^verify_writeable_address_list (P_new_address_list_ptr, P_code) then return;
	end;

	if empty_address_list (address_list_1_ptr) & empty_address_list (address_list_2_ptr) then do;
	     P_code = mlsys_et_$empty_address_list;	/* they can't both be empty lists */
	     return;
	end;


/* Supplied input arguments are OK: perform the merger */

	if address_list_1_ptr = null () then		/* compute the number of addresses needed in the new list */
	     address_list_n_addresses = 0;
	else address_list_n_addresses = address_list_1_ptr -> address_list.n_addresses;

	if address_list_2_ptr ^= null () then		/* some addresses from the second list also */
	     address_list_n_addresses = address_list_n_addresses + address_list_2_ptr -> address_list.n_addresses;

	address_list_n_addresses =			/* room for expansion please ... */
	     address_list_n_addresses + mlsys_data_$address_list_allocation
	     - mod (address_list_n_addresses, mlsys_data_$address_list_allocation);

	allocate address_list in (mlsys_area) set (address_list_ptr);

	address_list.version = ADDRESS_LIST_VERSION_2;
	address_list_reserved_data.n_addresses_allocated = address_list_n_addresses;
	address_list.n_addresses = 0;			/* the list is empty */
	address_list_reserved_data.reference_count = 0;	/* nothing has referenced this list yet */
	string (address_list_reserved_data.flags) = ""b;
	address_list_reserved_data.read_only = read_only_address_list;
	address_list_reserved_data.user_freeable = ^read_only_address_list;

	if addr (P_new_address_list_ptr) = addr (P_address_list_1_ptr) then do;
						/* new list is going to replace the first list ... */
	     increment_reference_counts = "0"b;		/* ... don't change address reference counts */
	     if address_list_1_ptr ^= null () then do;	/* ... and copy the internal data if present */
		address_list.reserved = address_list_1_ptr -> address_list.reserved;
		address_list_reserved_data.n_addresses_allocated = address_list_n_addresses;
	     end;					/* ... but don't lose the size of the new list */
	end;
	else increment_reference_counts = "1"b;		/* new list: will have to bump address reference counts */

	if address_list_1_ptr ^= null () then do;	/* have some addresses to be copied into the new list ... */
	     do idx = 1 to address_list_1_ptr -> address_list.n_addresses;
		address_list.n_addresses, jdx = address_list.n_addresses + 1;
		address_list.addresses (jdx) = address_list_1_ptr -> address_list.addresses (idx);
		if increment_reference_counts then	/* ... another new reference for this address */
		     call mlsys_address_mgr_$increment_reference_count (address_list.addresses (jdx));
	     end;
	end;

	if addr (P_new_address_list_ptr) = addr (P_address_list_2_ptr) then do;
						/* new list is going to replace the second list ... */
	     increment_reference_counts = "0"b;		/* ... don't change address reference counts */
	     if address_list_2_ptr ^= null () then do;	/* ... and copy the internal data if present */
		address_list.reserved = address_list_2_ptr -> address_list.reserved;
		address_list_reserved_data.n_addresses_allocated = address_list_n_addresses;
	     end;					/* ... but don't lose the size of the new list */
	end;
	else increment_reference_counts = "1"b;		/* new list: will have to bump address reference counts */

	if address_list_2_ptr ^= null () then do;	/* have some addresses to be copied into the new list ... */
	     do idx = 1 to address_list_2_ptr -> address_list.n_addresses;
		address_list.n_addresses, jdx = address_list.n_addresses + 1;
		address_list.addresses (jdx) = address_list_2_ptr -> address_list.addresses (idx);
		if increment_reference_counts then	/* ... another new reference for this address */
		     call mlsys_address_mgr_$increment_reference_count (address_list.addresses (jdx));
	     end;
	end;

	if P_eliminate_duplicates then		/* get rid of any duplicates in the list */
	     call mlsys_transmit_$eliminate_duplicate_addrs (address_list_ptr_as_array, (0));

	if P_new_address_list_ptr ^= null () then do;	/* get rid of the old list we are replacing */
	     new_address_list_ptr = copy_ptr (P_new_address_list_ptr);
	     free new_address_list_ptr -> address_list in (mlsys_area);
	end;

	P_new_address_list_ptr = address_list_ptr;
	P_code = 0;				/* success */

	return;
%page;
/* Add an address to the given address list, expanding the list by reallocation if necessary */

add_address:					/* ... writeable only by the mail system */
     entry (P_address_list_ptr, P_address_ptr, P_address_list_version, P_code);

	read_only_address_list = "1"b;		/* ... in case we must create the list */
	go to ADD_ADDRESS_COMMON;


add_address_writeable:				/* ... writeable by the user: target of the user-ring gate */
     entry (P_address_list_ptr, P_address_ptr, P_address_list_version, P_code);

	read_only_address_list = "0"b;


ADD_ADDRESS_COMMON:
	if ^mlsys_address_mgr_$verify_address (P_address_ptr, P_code) then return;
	address_ptr = copy_ptr (P_address_ptr);

	if P_address_list_ptr = null () then do;	/* need to create an address_list */
	     if read_only_address_list then
		call create_read_only_address_list (P_address_list_version, address_list_ptr, P_code);
	     else call create_writeable_address_list (P_address_list_version, address_list_ptr, P_code);
	     if P_code ^= 0 then return;		/* ... must be that the caller gave us the wrong version */
	end;
	else do;					/* use the already created address_list */
	     if read_only_address_list then		/* ... verify it using the appropriate criteria */
		if ^verify_address_list (P_address_list_ptr, P_code) then
		     return;
		else ;				/* ... a valid read-only address_list */
	     else if ^verify_writeable_address_list (P_address_list_ptr, P_code) then return;
	     address_list_ptr = copy_ptr (P_address_list_ptr);
	end;

	if address_list.n_addresses = address_list_reserved_data.n_addresses_allocated then do;
						/* must reallocate the list */
	     address_list_n_addresses =		/* ... plus some room to grow */
		address_list.n_addresses + mlsys_data_$address_list_allocation;
	     allocate address_list in (mlsys_area) set (new_address_list_ptr);
	     new_address_list_ptr -> address_list.version = ADDRESS_LIST_VERSION_2;
	     new_address_list_ptr -> address_list.reserved = address_list.reserved;
	     addr (new_address_list_ptr -> address_list.reserved) -> address_list_reserved_data.n_addresses_allocated =
		address_list_n_addresses;
	     new_address_list_ptr -> address_list.n_addresses = address_list.n_addresses;
	     do idx = 1 to address_list.n_addresses;	/* ... copy the addresses */
		new_address_list_ptr -> address_list.addresses (idx) = address_list.addresses (idx);
	     end;
	     free address_list in (mlsys_area);		/* ... get rid of the old one */
	     address_list_ptr = new_address_list_ptr;	/* ... this is now the address list */
	end;

	address_list.n_addresses, idx = address_list.n_addresses + 1;
						/* increment # of addresses present */

	address_list.addresses (idx) = address_ptr;	/* add it to the list ... */
	call mlsys_address_mgr_$increment_reference_count (address_ptr);
						/* ... and remember that we care about it */

	P_address_list_ptr = address_list_ptr;		/* in case we've changed it */
	P_code = 0;				/* success */

	return;
%page;
/* Delete an address from the given address list */

delete_address:					/* ... writeable only by the mail system */
     entry (P_address_list_ptr, P_address_position, P_code);

	if ^verify_address_list (P_address_list_ptr, P_code) then return;
	go to DELETE_ADDRESS_COMMON;


delete_address_writeable:				/* ... writeable by the user: target of the user-ring gate */
     entry (P_address_list_ptr, P_address_position, P_code);

	if ^verify_writeable_address_list (P_address_list_ptr, P_code) then return;


DELETE_ADDRESS_COMMON:
	address_list_ptr = copy_ptr (P_address_list_ptr); /* internal procedure uses the "standard" address list */

	if (P_address_position < 1) | (P_address_position > address_list.n_addresses) then do;
	     P_code = error_table_$bad_index;
	     return;
	end;

	call delete_the_address (P_address_position);	/* do the work */

	P_code = 0;				/* success */

	return;



/* Actually delete the specified address from the address list (called by several entrypoints) */

delete_the_address:
     procedure (p_address_position);

dcl  p_address_position fixed binary parameter;
dcl  idx fixed binary;

	call mlsys_address_mgr_$decrement_reference_count (address_list.addresses (p_address_position));
						/* forget about the one being deleted */

	do idx = (p_address_position + 1) to address_list.n_addresses;
	     address_list.addresses (idx - 1) = address_list.addresses (idx);
	end;					/* move the others down so no vacate slots remain */

	address_list.n_addresses = address_list.n_addresses - 1;

	return;

     end delete_the_address;
%page;
/* Replace the specified address in an address list with a different address */

replace_address:					/* ... writeable only by the mail system */
     entry (P_address_list_ptr, P_address_position, P_address_ptr, P_code);

	if ^verify_address_list (P_address_list_ptr, P_code) then return;
	go to REPLACE_ADDRESS_COMMON;


replace_address_writeable:				/* ... writeable by the user: target of the user-ring gate */
     entry (P_address_list_ptr, P_address_position, P_address_ptr, P_code);

	if ^verify_writeable_address_list (P_address_list_ptr, P_code) then return;


REPLACE_ADDRESS_COMMON:
	if ^mlsys_address_mgr_$verify_address (P_address_ptr, P_code) then return;

	address_list_ptr = copy_ptr (P_address_list_ptr);
	address_ptr = copy_ptr (P_address_ptr);

	if (P_address_position < 1) | (P_address_position > address_list.n_addresses) then do;
	     P_code = error_table_$bad_index;
	     return;
	end;

	idx = P_address_position;			/* always wise to copy parameters ... */

	call mlsys_address_mgr_$decrement_reference_count (address_list.addresses (idx));
						/* forget about the one being replaced */

	address_list.addresses (idx) = address_ptr;	/* put in the new one ... */
	call mlsys_address_mgr_$increment_reference_count (address_list.addresses (idx));
						/* ... and make a note that we care about it */

	P_code = 0;				/* success */

	return;
%page;
/* Verify that the caller supplied a pointer to a properly constructed address_list structure */

verify_address_list:
     entry (P_address_list_ptr, P_code) returns (bit (1) aligned);

	return (verify_address_list (P_address_list_ptr, P_code));



/* Actually verifies that the caller supplied an address list structure */

verify_address_list:
     procedure (p_address_list_ptr, p_code) returns (bit (1) aligned);

dcl  p_address_list_ptr pointer parameter;
dcl  p_code fixed binary (35) parameter;

	if p_address_list_ptr = null () then p_code = mlsys_et_$not_address_list;

	else if ^mlsys_data_$valid_segments (binary (baseno (p_address_list_ptr), 18, 0)) then
	     p_code = mlsys_et_$not_address_list;	/* supplied structure wasn't allocated by us */

	else if p_address_list_ptr -> address_list.version ^= ADDRESS_LIST_VERSION_2 then
	     p_code = mlsys_et_$not_address_list;	/* not an address_list structure */

	else p_code = 0;				/* supplied structure passes all tests */

	return ((p_code = 0));

     end verify_address_list;
%page;
/* Verify that the caller supplied a pointer to a properly constructed address_list structure which may be modified by
   user-ring software via the mail_system_ gate */

verify_writeable_address_list:
     entry (P_address_list_ptr, P_code) returns (bit (1) aligned);

	return (verify_writeable_address_list (P_address_list_ptr, P_code));



/* Actually verifies that the caller supplied a writeable address list structure */

verify_writeable_address_list:
     procedure (p_address_list_ptr, p_code) returns (bit (1) aligned);

dcl  p_address_list_ptr pointer parameter;
dcl  p_code fixed binary (35) parameter;

	if ^verify_address_list (p_address_list_ptr, p_code) then ;
						/* not an address_list */

	else if addr (p_address_list_ptr -> address_list.reserved) -> address_list_reserved_data.read_only then
	     p_code = mlsys_et_$read_only_address_list;	/* not an address_list which the user-ring can modify */

	else p_code = 0;				/* supplied structure passes all tests */

	return ((p_code = 0));

     end verify_writeable_address_list;
%page;
/* Determine if the given address list is empty */

empty_address_list:
     procedure (p_address_list_ptr) returns (bit (1) aligned);

dcl  p_address_list_ptr pointer parameter;

	if p_address_list_ptr = null () then
	     return ("1"b);

	else return ((p_address_list_ptr -> address_list.n_addresses = 0));

     end empty_address_list;
%page;
%include mlsys_copy_ptr;
%page;
%include mlsys_address_list;
%page;
%include mlsys_internal_data;

     end mlsys_address_list_mgr_;
