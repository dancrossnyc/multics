/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Address route management for the Multics Mail System */

/* Created:  July 1983 by G. Palter */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


mlsys_address_route_mgr_:
     procedure () options (rename ((alloc_, mlsys_storage_mgr_$allocate)));

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_address_route_ptr pointer parameter;

dcl  P_relay_list (*) character (256) varying parameter;	/* create_address_route: the list of systems in the route */

dcl  P_address_ptr pointer parameter;			/* compute_*_route: -> address for which a route is needed */
dcl  P_code fixed binary (35) parameter;		/* compute_*_route */


/* Local copies of parameters */

dcl  address_ptr pointer;
dcl  code fixed binary (35);


/* Definition of the reserved data in the address_route structure */

dcl  1 address_route_reserved_data aligned based (addr (address_route.reserved)),
       2 reference_count fixed binary;			/* # of objects that care about this route */


/* Remaining declarations */

dcl  address_type fixed binary;
dcl  (explicit_route, implicit_route) pointer;
dcl  (foreign_system_name, first_relay_system, extra_relay_system) character (256) varying;
dcl  (n_from_explicit_route, n_from_implicit_route) fixed binary;

dcl  (route_idx, old_idx, idx) fixed binary;

/* format: off */
dcl (UPPERCASE	initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
     LOWERCASE	initial ("abcdefghijklmnopqrstuvwxyz"))
	character (26) static options (constant);

dcl (mlsys_et_$bad_explicit_route, mlsys_et_$cant_compute_route, mlsys_et_$ism_not_available)
	fixed binary (35) external;
/* format: on */

dcl  mlsys_address_mgr_$get_address_explicit_route entry (pointer, character (8), pointer, fixed binary (35));
dcl  mlsys_address_mgr_$get_address_implicit_route entry (pointer, character (8), pointer, fixed binary (35));
dcl  mlsys_address_mgr_$get_address_system entry (pointer, character (256) varying, fixed binary (35));
dcl  mlsys_address_mgr_$get_address_type entry (pointer, fixed binary, fixed binary (35));
dcl  mlsys_nit_interface_$get_fully_qualified_name entry (character (256) varying) returns (character (256) varying);
dcl  mlsys_nit_interface_$is_local_system entry (character (256) varying) returns (bit (1) aligned);
dcl  mlsys_nit_interface_$is_mail_supported entry (character (256) varying, character (256) varying, fixed binary (35));

dcl  (addr, dimension, hbound, lbound, null, translate) builtin;
%page;
/* Create an address route */

create_address_route:
     entry (P_relay_list, P_address_route_ptr);

	address_route_n_relays = dimension (P_relay_list, 1);

	allocate address_route in (mlsys_area) set (address_route_ptr);

	address_route.version = ADDRESS_ROUTE_VERSION_1;
	address_route_reserved_data.reference_count = 0;

	do idx = lbound (P_relay_list, 1) to hbound (P_relay_list, 1);
	     address_route.relays (idx - lbound (P_relay_list, 1) + 1) =
		translate (P_relay_list (idx), UPPERCASE, LOWERCASE);
	end;					/* ... don't lookup the names: we probably don't know them */

	address_route.relays (1) =			/* ... except the first relaying host should be known to us */
	     mlsys_nit_interface_$get_fully_qualified_name (address_route.relays (1));

	P_address_route_ptr = address_route_ptr;

	return;
%page;
/* Free an address route if its reference count is zero (ie: if o other mail system object has a pointer to it) */

free_address_route:
     entry (P_address_route_ptr);

	address_route_ptr = P_address_route_ptr;
	P_address_route_ptr = null ();		/* insure that the caller doesn't use it anymore */

	if address_route_reserved_data.reference_count > 0 then return;

	free address_route in (mlsys_area);

	return;



/* Increment the reference count of an address route: to avoid freeing an address route referenced by several objects
   before all the objects are themselves freed */

increment_reference_count:
     entry (P_address_route_ptr);

	addr (P_address_route_ptr -> address_route.reserved) -> address_route_reserved_data.reference_count =
	     addr (P_address_route_ptr -> address_route.reserved) -> address_route_reserved_data.reference_count + 1;

	return;



/* Decrement the reference count of an address route:  If the reference count reaches zero, nothing in the mail system is
   using this address route any longer and its storage is released */

decrement_reference_count:
     entry (P_address_route_ptr);

	addr (P_address_route_ptr -> address_route.reserved) -> address_route_reserved_data.reference_count =
	     addr (P_address_route_ptr -> address_route.reserved) -> address_route_reserved_data.reference_count - 1;

	if addr (P_address_route_ptr -> address_route.reserved) -> address_route_reserved_data.reference_count <= 0 then
	     call free_address_route (P_address_route_ptr);

	P_address_route_ptr = null ();		/* keep the caller from using it anymore */

	return;
%page;
/* Compute the route required to deliver a message to the given address */

compute_optimum_route:				/* ... best possible route: not without real name servers */
compute_route:
     entry (P_address_ptr, P_address_route_ptr, P_code);

	address_ptr = P_address_ptr;

	call mlsys_address_mgr_$get_address_type (address_ptr, address_type, code);
	if code ^= 0 then do;			/* eh? */
	     P_code = code;
	     return;
	end;

	if address_type ^= FOREIGN_ADDRESS then do;
ADDRESS_IS_LOCAL:
	     P_address_route_ptr = null ();		/* indicates a local address */
	     P_code = 0;
	     return;

	end;

	call mlsys_address_mgr_$get_address_system (address_ptr, foreign_system_name, (0));

	call mlsys_address_mgr_$get_address_explicit_route (address_ptr, ADDRESS_ROUTE_VERSION_1, explicit_route, code);
	if code ^= 0 then explicit_route = null ();	/* only possible error is that's there no route */

	call mlsys_address_mgr_$get_address_implicit_route (address_ptr, ADDRESS_ROUTE_VERSION_1, implicit_route, code);
	if code ^= 0 then implicit_route = null ();	/* only possible error is that's there no route */


/* Determine the name of the first system in the route:  If there's an explicit route, use it.  In either case, eliminate
   the local system from the start of the route.  (Ie: "via A via B via LOCAL via LOCAL" is the same as "via A via B" */

	first_relay_system = "";			/* null string means address is on our system */

	n_from_explicit_route, n_from_implicit_route = 0; /* don't know how many from each path are necessary yet */

	if explicit_route ^= null () then do;		/* check out the explicit route */
	     address_route_ptr = explicit_route;
	     n_from_explicit_route = address_route.n_relays;
	     do while ((first_relay_system = "") & (n_from_explicit_route > 0));
		idx = address_route.n_relays - n_from_explicit_route + 1;
		first_relay_system = address_route.relays (idx);
		if mlsys_nit_interface_$is_local_system (first_relay_system) then do;
		     first_relay_system = "";		/* it's local: keep looking */
		     n_from_explicit_route = n_from_explicit_route - 1;
		end;
	     end;
	end;

	if n_from_explicit_route = 0 then		/* no explicit route or all were actually us ... */
	     if mlsys_nit_interface_$is_local_system (foreign_system_name) then
		go to ADDRESS_IS_LOCAL;
	     else first_relay_system = foreign_system_name;


/* Have the first system in the route:  Check if we can send it mail; if we can't (unknown system, no mail service), try
   using the implicit route which is the route by which the message actually was transmitted to reach this system */

	extra_relay_system = "";			/* NIT may specify an extra "hop" */

	call mlsys_nit_interface_$is_mail_supported (first_relay_system, extra_relay_system, code);

	if code ^= 0 then				/* don't know how to send mail to the given system ... */
	     if code = mlsys_et_$ism_not_available then do;
		P_code = code;			/* ... no inter-system mailer should always be reported */
		return;
	     end;

	     else if implicit_route = null () then do;	/* ... no implicit route: there's no way to send mail */
		if n_from_explicit_route > 0 then	/* ... because the user gave a bad route */
		     code = mlsys_et_$bad_explicit_route;
		P_code = code;
		return;
	     end;

	     else do;				/* ... try using the implicit route */
		address_route_ptr = implicit_route;
		n_from_implicit_route = address_route.n_relays;
		do while ((first_relay_system = "") & (n_from_implicit_route > 0));
		     idx = address_route.n_relays - n_from_implicit_route + 1;
		     first_relay_system = address_route.relays (idx);
		     if mlsys_nit_interface_$is_local_system (first_relay_system) then do;
			first_relay_system = "";	/* it's local: keep looking */
			n_from_implicit_route = n_from_implicit_route - 1;
		     end;
		end;
		if n_from_implicit_route = 0 then do;	/* no help in the implicit route */
CANT_COMPUTE_ADDRESS_ROUTE:
		     P_code = mlsys_et_$cant_compute_route;
		     return;
		end;
		call mlsys_nit_interface_$is_mail_supported (first_relay_system, extra_relay_system, code);
		if code ^= 0 then			/* ... don't know how to get it by the implicit route */
		     if code = mlsys_et_$ism_not_available then do;
			P_code = code;		/* ... no inter-system mailer should always be reported */
			return;
		     end;
		     else go to CANT_COMPUTE_ADDRESS_ROUTE;
	     end;


/* Control arrives here iff there is a workable route */

	address_route_n_relays = 1;			/* always have the foreign system itself */

	address_route_n_relays = address_route_n_relays + n_from_explicit_route;
	address_route_n_relays = address_route_n_relays + n_from_implicit_route;

	if extra_relay_system ^= "" then address_route_n_relays = address_route_n_relays + 1;

	allocate address_route in (mlsys_area) set (address_route_ptr);

	address_route.version = ADDRESS_ROUTE_VERSION_1;
	address_route_reserved_data.reference_count = 0;

	if extra_relay_system ^= "" then do;		/* system from the NIT is the first hop */
	     address_route.relays (1) = extra_relay_system;
	     route_idx = 2;
	end;
	else route_idx = 1;

	if n_from_implicit_route > 0 then do;		/* put in relays from the implicit route */
	     do idx = 1 to n_from_implicit_route;
		old_idx = implicit_route -> address_route.n_relays - n_from_implicit_route + idx;
		address_route.relays (route_idx) = implicit_route -> address_route.relays (old_idx);
		route_idx = route_idx + 1;
	     end;
	end;

	if n_from_explicit_route > 0 then do;		/* put in relays from the explicit route */
	     do idx = 1 to n_from_explicit_route;
		old_idx = explicit_route -> address_route.n_relays - n_from_explicit_route + idx;
		address_route.relays (route_idx) = explicit_route -> address_route.relays (old_idx);
		route_idx = route_idx + 1;
	     end;
	end;

	address_route.relays (route_idx) = foreign_system_name;
						/* don't forget the target system */

	P_address_route_ptr = address_route_ptr;
	P_code = 0;				/* success */

	return;
%page;
%include mlsys_address_route;
%page;
%include mlsys_address_types;
%page;
%include mlsys_internal_data;

     end mlsys_address_route_mgr_;
