/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: style2,ifthenstmt,ifthendo,ifthen,^indnoniterdo,indcomtxt,^inditerdo,idind22 */

/* create_mail_table: Used by privileged user (generally the
   Initializer before the Ansewring Service is brought up) to create
   the Mail Table and populate it with Mail Table entries for all
   the Person_ids and aliases in the PNT. */

/* Written: July 1983 by B. Margolin */
/* Modified: November 1983 by B. Margolin to not hard-code the PNT pathname,
   but to use the new entrypoint pnt_manager_$table_data. */
/* Modified 1984-08-15 by E. Swenson for Ring-1 PNTs and Version 3 MSTBs. */

create_mail_table:
     proc options (variable);

	/*** Automatic ***/

	dcl     arg_count		fixed bin;
	dcl     code		fixed bin (35);
	dcl     1 mte		aligned like mail_table_entry;
	dcl     pnt_idx		fixed bin (35);
	dcl     1 pnt_mti		aligned like ms_table_info;
	dcl     1 pnte		aligned like pnt_entry;
	dcl     sci_ptr		ptr;

	/*** Static ***/

	dcl     (
	        error_table_$bad_index,
	        error_table_$checksum_failure,
	        error_table_$id_already_exists,
	        error_table_$no_record,
	        error_table_$unimplemented_version
	        )			fixed bin (35) ext static;
	dcl     VERSION		char (3) int static options (constant) init ("1.0");
	dcl     WHOAMI		char (17) int static options (constant) init ("create_mail_table");

	/*** Entries ***/

	dcl     com_err_		entry () options (variable);
	dcl     ioa_		entry () options (variable);
	dcl     mail_table_priv_$add	entry (ptr, bit (1), fixed bin (35));
	dcl     mail_table_priv_$add_alias
				entry (char (*), char (*), bit (1), fixed bin (35));
	dcl     mail_table_priv_$create
				entry (fixed bin, fixed bin (35));
	dcl     pathname_		entry (char (*), char (*)) returns (char (168));
	dcl     pnt_manager_$get_abs_entry
				entry (fixed bin (35), ptr, fixed bin (35));
	dcl     pnt_manager_$table_data
				entry (ptr, fixed bin (35), fixed bin (35));
	dcl     ssu_$abort_line	entry () options (variable);
	dcl     ssu_$arg_count	entry (ptr, fixed bin);
	dcl     ssu_$destroy_invocation
				entry (ptr);
	dcl     ssu_$print_message	entry () options (variable);
	dcl     ssu_$standalone_invocation
				entry (ptr, char (*), char (*), ptr, entry, fixed bin (35));

	/*** Misc ***/

	dcl     cleanup		condition;
	dcl     (addr, null, rtrim)	builtin;
%page;
%include mail_table_entry;
%page;
%include ms_table_info;
%page;
%include pnt_entry;

	code = 0;
	sci_ptr = null ();
	on cleanup call cleanup_proc ();
	call ssu_$standalone_invocation (sci_ptr, WHOAMI, VERSION, null (), abort_cmt, code);
	if code ^= 0 then do;
	     call com_err_ (code, WHOAMI, "Error while creating standalone invocation.");
	     return;
	end;
	call ssu_$arg_count (sci_ptr, arg_count);
	if arg_count > 0 then call ssu_$abort_line (sci_ptr, 0, "The create_mail_table command takes no arguments.");
	/*** Find out the size of the PNT ***/
	call pnt_manager_$table_data (addr (pnt_mti), (0), code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Error getting PNT size info.");
	if pnt_mti.version ^= MS_TABLE_INFO_VERSION_3 then
	     call ssu_$abort_line (sci_ptr, error_table_$unimplemented_version, "The PNT is a version ^d MSTB.",
		pnt_mti.version);
	call mail_table_priv_$create ((pnt_mti.max_entries), code);
	if code ^= 0 then call ssu_$abort_line (sci_ptr, code, "Error attempting to create the Mail Table MSTB.");
	call ioa_ ("Created Mail Table with max_entries = ^d.  Now copying info from PNT.", pnt_mti.max_entries);
	mte.version = MAIL_TABLE_ENTRY_VERSION_1;
	do pnt_idx = 1 repeat (pnt_idx + 1);
	     call pnt_manager_$get_abs_entry (pnt_idx, addr (pnte), code);
	     if code = 0 then call copy_entry ();
	     else if code = error_table_$bad_index then /* Went off the end */ goto DONE_COPYING;
	     else if code ^= error_table_$no_record & code ^= error_table_$checksum_failure then
						/* Unused entry */
		call ssu_$abort_line (sci_ptr, code, "Error reading PNT entry #^d; copy aborted.", pnt_idx);
	end;
DONE_COPYING:
	call ioa_ ("PNT info copied into Mail Table.");
GLOBAL_EXIT:
	call cleanup_proc ();
	return;

abort_cmt:
     proc ();

	go to GLOBAL_EXIT;

     end abort_cmt;

cleanup_proc:
     proc ();

	if sci_ptr ^= null () then call ssu_$destroy_invocation (sci_ptr);
	return;

     end cleanup_proc;

copy_entry:
     proc ();

	mte.name = rtrim (pnte.user_id);
	mte.acs_path.entry, mte.acs_path.dir = "";
	mte.default_project = rtrim (pnte.default_project);
	mte.mailing_address = "";
	call mail_table_priv_$add (addr (mte), "1"b, code);
	if code ^= 0 then
	     if code = error_table_$id_already_exists then do;
		call ssu_$print_message (sci_ptr, code, "Skipping PNT entry for ""^a"".", mte.name);
		code = 0;
	     end;
	     else call ssu_$abort_line (sci_ptr, code, "Error copying PNT entry for ""^a"".  PNT copy aborted.",
		     mte.name);
	if pnte.alias ^= "" then do;			/* Add the alias to the Mail Table */
	     call mail_table_priv_$add_alias ((mte.name), rtrim (pnte.alias), "1"b, code);
	     if code ^= 0 then
		if code = error_table_$id_already_exists then do;
		     call ssu_$print_message (sci_ptr, code, "Skipping adding alias ""^a"" to ""^a"".",
			rtrim (pnte.alias), mte.name);
		     code = 0;
		end;
		else call ssu_$abort_line (sci_ptr, code, "Error adding alias ""^a"" to ""^a"".  Aborting PNT copy.",
			rtrim (pnte.alias), mte.name);
	end;
	return;

     end copy_entry;

     end create_mail_table;
