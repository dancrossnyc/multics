/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* Hash table management for the Multics Mail System */

/* Created:  July 1983 by G. Palter */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


mlsys_hash_:
     procedure ();

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_string character (*) parameter;			/* hash: the string to be hashed */
dcl  P_hash_table_size fixed binary parameter;		/* hash: # of slots in the hash table */


/* Remaining declarations */

dcl  hash_value fixed binary (71);
dcl  1 hash_value_words aligned based (addr (hash_value)),
       2 upper fixed binary (35),
       2 lower fixed binary (35);

dcl  1 local_ai aligned like area_info;
dcl  code fixed binary (35);
dcl  old_validation_level fixed binary (3);

dcl  hash_result fixed binary (35);
dcl  n_words fixed binary (18);
dcl  idx fixed binary;

dcl  MAIL_SYSTEM_ character (32) static options (constant) initial ("mail_system_");

dcl  BLANKS_AS_CHARACTERS character (4) aligned static options (constant) initial ("    ");
dcl  BLANKS fixed binary (35) based (addr (BLANKS_AS_CHARACTERS));

dcl  sys_info$max_seg_size fixed binary (19) external;

dcl  cu_$level_get entry (fixed binary (3));
dcl  cu_$level_set entry (fixed binary (3));
dcl  define_area_ entry (pointer, fixed binary (35));
dcl  get_ring_ entry () returns (fixed binary (3));
dcl  mlsys_storage_mgr_$get_temp_segment entry (pointer, fixed binary (35));
dcl  sub_err_ entry () options (variable);

dcl  cleanup condition;

dcl  (abs, addr, divide, length, null, string, wordno) builtin;
%page;
/* Initialize the hash tables used by the mail system */

initialize:
     entry ();

	call cu_$level_get (old_validation_level);

	on condition (cleanup)
	     begin;
		call cu_$level_set (old_validation_level);
	     end;

	call cu_$level_set (get_ring_ ());

	call mlsys_storage_mgr_$get_temp_segment (mlsys_data_$hash_tables_segment_ptr, code);
	if code ^= 0 then do;
RESIGNAL_INITIALIZATION_FAILURE:
	     call sub_err_ (code, MAIL_SYSTEM_, ACTION_CANT_RESTART, null (), (0),
		"Unable to initialize the mail system hash tables.^/Contact your system programming staff.");
	     go to RESIGNAL_INITIALIZATION_FAILURE;
	end;

	local_ai.version = area_info_version_1;
	string (local_ai.control) = ""b;
	local_ai.extend = "1"b;			/* an extensible area not that it should matter ... */
	local_ai.system = "1"b;			/* ... which is extended with proper ring bracket copying */
	local_ai.owner = MAIL_SYSTEM_;
	local_ai.size = sys_info$max_seg_size - wordno (addr (hash_tables_segment.hash_area));
	local_ai.areap = addr (hash_tables_segment.hash_area);

	call define_area_ (addr (local_ai), code);
	if code ^= 0 then go to RESIGNAL_INITIALIZATION_FAILURE;

	hash_tables_segment.field_name_hash_table.buckets (*) = null ();

	hash_tables_segment.message_id_hash_table.buckets (*) = null ();

	call cu_$level_set (old_validation_level);

	return;
%page;
/* Compute the index in a hash table of the specified string: patterned after the hash_index_ ALM subroutine but designed
   to work on strings longer than 32 characters */

hash:
     entry (P_string, P_hash_table_size) returns (fixed binary);

	n_words = divide ((length (P_string) + 3), 4, 18, 0);

	begin;

dcl  the_string character (4 * n_words) aligned;		/* needed to get the last word filled with blanks */
dcl  words (n_words) fixed binary (35) based (addr (the_string));

	     the_string = P_string;

	     hash_value = 0;			/* no bias */

	     do idx = 1 to n_words;
		if words (idx) ^= BLANKS then		/* add all non-blank words together */
		     hash_value = hash_value + words (idx);
	     end;

	     hash_result =				/* really mod (hash_value_words.lower, P_hash_table_size) */
		hash_value_words.lower
		- P_hash_table_size * divide (hash_value_words.lower, P_hash_table_size, 35, 0);

	     return (abs (hash_result));		/* always want a positive result ... */

	end;
%page;
%include mlsys_hash_tables_seg;
%page;
%include mlsys_internal_data;
%page;
%include area_info;
%page;
%include sub_err_flags;

     end mlsys_hash_;
