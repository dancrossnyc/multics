/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */

/* format: off */

/* User-defined field name/ID management for the Multics Mail System */

/* Created:  July 1983 by G. Palter */

/* format: on,style4,delnl,insnl,ifthenstmt,ifthen */


mlsys_field_id_mgr_:
     procedure () options (rename ((alloc_, mlsys_storage_mgr_$allocate)));

	return;					/* not an entrypoint */


/* Parameters */

dcl  P_field_name character (*) parameter;		/* get_system_field_type: the field name to be checked;
						   get_user_field_id: the field name to be encoded */

dcl  P_field_id bit (36) aligned parameter;		/* get_user_field_id: set to the unique field ID;
						   get_user_field_name: the field ID whose name is wanted */

dcl  P_canonical_field_name character (*) varying parameter;/* get_user_field_id, get_user_field_name: set to the
						   canonical form of the user-defined field name */

dcl  P_field_type fixed binary parameter;		/* get_system_field_id: set to the type of field supplied */

dcl  P_code fixed binary (35) parameter;


/* Local copies of parameters */

dcl  field_type fixed binary;


/* User-defined field name hash table */

dcl  1 encoded_field_id aligned,			/* the encoding used in field IDs ... */
       2 bucket_idx fixed binary (18) unaligned unsigned,	/* ... in which bucket this field name may be found */
       2 n_steps fixed binary (18) unaligned unsigned;	/* ... # of steps from base of bucket to the name */

dcl  1 field_name_slot aligned based (field_name_slot_ptr), /* a single slot in the hash table ... */
       2 next_slot_ptr pointer,			/* ... -> next slot in the hash table */
       2 field_name_lth fixed binary (21),		/* ... length of the field name in this slot */
       2 field_name character (field_name_slot_field_name_lth refer (field_name_slot.field_name_lth));
dcl  (field_name_slot_ptr, last_field_name_slot_ptr) pointer;
dcl  field_name_slot_field_name_lth fixed binary (21);


/* Remaining declarations */

dcl  n_real_steps fixed binary;

dcl  HYPHEN character (1) static options (constant) initial ("-");
dcl  HTSP character (2) static options (constant) initial ("	 ");

/* format: off */
dcl (UPPERCASE	initial ("ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
     LOWERCASE	initial ("abcdefghijklmnopqrstuvwxyz"))
	character (26) static options (constant);

dcl (error_table_$smallarg, mlsys_et_$reserved_field_name, mlsys_et_$unknown_user_field_id,
     mlsys_et_$unsupported_reserved_field_name)
	fixed binary (35) external;
/* format: on */

dcl  mlsys_hash_$hash entry (character (*), fixed binary) returns (fixed binary);

dcl  (dimension, divide, hbound, index, lbound, length, ltrim, maxlength, null, rtrim, search, substr, translate, unspec,
     verify) builtin;
%page;
/* format: off */

dcl  FIELD_TYPES_BASE_MULTIPLIER fixed binary static options (constant) initial (100);
						/* to get from field_type_bases to real base value */


/* Recognized field name prefixes used to change the class of a header field */

dcl  RECOGNIZED_PREFIXES (5) character (32) varying static options (constant) initial (
	"Redistributed-",	"Remailed-",	"Resent-",	"Forwarded-",	"Comment-");

dcl  FIELD_TYPE_BASES (5) fixed binary static options (constant) initial (
	1,		1,		1,		1,		2);


/* Indicates which combination of field name and class are actually supported by the mail system */

dcl  SUPPORTED_FIELDS (0:2, 18) bit (1) aligned static options (constant) initial (
	/*** ordinary fields */
	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,
	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,
	/*** redistribution fields */
	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,	"1"b,
	"0"b,	"0"b,	"1"b,	"0"b,	"0"b,	"0"b,	"0"b,	"1"b,	"1"b,
	/*** comment fields */
	"0"b,	"1"b,	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"1"b,	"0"b,
	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"0"b,	"1"b,	"0"b);


/* All known canonical field names sorted in the ASCII collating sequence for use within lookup_field_name */

dcl  SORTED_FIELD_NAMES (25) character (32) static options (constant) initial (
	"Access-Class",	"Acknowledge-To",	"Bcc",		"By",		"Cc",
	"Comment",	"Comments",	"Date",		"Delivery-By",	"Delivery-Date",
	"From",		"In-Reply-To",	"Message-Id",	"Posted-Date",	"Re",
	"Received",	"Relayed",	"Reply-To",	"Return-Path",	"Route",
	"Sender",		"Subj",		"Subject",	"To",		"Via");

dcl  SORTED_FIELD_TYPES (25) fixed binary static options (constant) initial (
	16,		 7,		14,		 2,		13,
	17,		17,		8,		 6,		 5,
	 9,		15,		18,		 1,		10,
	 4,		 4,		11,		 3,		 3,
	 2,		10,		10,		12,		 4);

/* format: on */
%page;
/* Determine if a given field name identifies a field supported by the system and, if so, return the type of the field */

get_system_field_type:
     entry (P_field_name, P_field_type, P_code);

	call lookup_field_name ((P_field_name), P_field_type, P_code);
						/* try the input name first as an optimization */

	if P_code = mlsys_et_$unsupported_reserved_field_name then return;
	if (P_field_type ^= USER_DEFINED_FIELD) & (P_code = 0) then return;

	begin;					/* optimization failed: we must canonicalize the name */

dcl  canonical_field_name character (length (P_field_name)) varying;

	     call canonicalize_field_name (P_field_name, canonical_field_name);

	     call lookup_field_name (canonical_field_name, P_field_type, P_code);
	end;

	return;
%page;
/* Determine the per-process unique ID for a supplied user-defined field name along with the canonical form of said field
   name; an error code is returned, however, if the supplied field name is one of those reserved for use by the mail
   system */

get_user_field_id:
     entry (P_field_name, P_field_id, P_canonical_field_name, P_code);

	begin;

dcl  canonical_field_name character (length (P_field_name)) varying;

	     call canonicalize_field_name (P_field_name, canonical_field_name);

	     call lookup_field_name (canonical_field_name, field_type, P_code);
	     if P_code ^= 0 then return;		/* a field that's reserved for possible future use */

	     if field_type ^= USER_DEFINED_FIELD then do;
		P_code = mlsys_et_$reserved_field_name;
		return;
	     end;

	     encoded_field_id.bucket_idx =
		mlsys_hash_$hash ((canonical_field_name),
		dimension (hash_tables_segment.field_name_hash_table.buckets, 1));
	     encoded_field_id.n_steps = 0;		/* assume it's the first one in this bucket ... */

	     last_field_name_slot_ptr = null ();	/* needed in case we must add a new slot */
	     do field_name_slot_ptr = hash_tables_segment.field_name_hash_table.buckets (encoded_field_id.bucket_idx)
		repeat (field_name_slot.next_slot_ptr) while (field_name_slot_ptr ^= null ());
		if field_name_slot.field_name = canonical_field_name then go to HAVE_ENCODED_FIELD_ID;
		encoded_field_id.n_steps = encoded_field_id.n_steps + 1;
		last_field_name_slot_ptr = field_name_slot_ptr;
	     end;

	     /*** Control arrives here iff there's no matching field name already in the hash table */
	     field_name_slot_field_name_lth = length (canonical_field_name);
	     allocate field_name_slot in (hash_tables_segment.hash_area) set (field_name_slot_ptr);
	     field_name_slot.field_name = canonical_field_name;
	     field_name_slot.next_slot_ptr = null ();
	     if last_field_name_slot_ptr = null () then	/* first one in this bucket */
		hash_tables_segment.field_name_hash_table.buckets (encoded_field_id.bucket_idx) = field_name_slot_ptr;
	     else last_field_name_slot_ptr -> field_name_slot.next_slot_ptr = field_name_slot_ptr;

	     /*** Control arrives here once the field ID has been determined */
HAVE_ENCODED_FIELD_ID:
	     unspec (P_field_id) = unspec (encoded_field_id);
	     P_canonical_field_name = canonical_field_name;

	     if length (canonical_field_name) > maxlength (P_canonical_field_name) then
		P_code = error_table_$smallarg;	/* didn't fit */
	     else P_code = 0;
	end;

	return;
%page;
/* Return the canonical form of the user-defined field name corresponding to the given unique ID */

get_user_field_name:
     entry (P_field_id, P_canonical_field_name, P_code);

	unspec (encoded_field_id) = unspec (P_field_id);	/* get the field ID into usable form */

	if (encoded_field_id.bucket_idx < lbound (hash_tables_segment.field_name_hash_table.buckets, 1))
	     | (encoded_field_id.bucket_idx > hbound (hash_tables_segment.field_name_hash_table.buckets, 1)) then do;
UNKNOWN_FIELD_ID:
	     P_code = mlsys_et_$unknown_user_field_id;
	     return;
	end;

	n_real_steps = 0;
	do field_name_slot_ptr = hash_tables_segment.field_name_hash_table.buckets (encoded_field_id.bucket_idx)
	     repeat (field_name_slot.next_slot_ptr) while (field_name_slot_ptr ^= null ());
	     if n_real_steps = encoded_field_id.n_steps then do;
		if field_name_slot.field_name_lth <= maxlength (P_canonical_field_name) then do;
		     P_canonical_field_name = field_name_slot.field_name;
		     P_code = 0;			/* ... it fits */
		end;
		else P_code = error_table_$smallarg;
		return;
	     end;
	     n_real_steps = n_real_steps + 1;		/* not the right slot yet ... */
	end;

	go to UNKNOWN_FIELD_ID;			/* we get here iff there aren't enough slots in the bucket */
%page;
/* Return the type of a header/envelope/redistribution field given its name */

lookup_field_name:
     procedure (p_canonical_field_name, p_field_type, p_code);

dcl  p_canonical_field_name character (*) varying parameter;
dcl  p_field_type fixed binary parameter;
dcl  p_code fixed binary (35) parameter;

dcl  prefixless_field_name character (length (p_canonical_field_name)) varying;
dcl  (field_type_base, field_type, name_idx, lb, hb, idx) fixed binary;

	field_type_base = ORDINARY_FIELDS_BASE;		/* until proven otherwise */
	prefixless_field_name = p_canonical_field_name;

	do idx = lbound (RECOGNIZED_PREFIXES, 1) to hbound (RECOGNIZED_PREFIXES, 1)
	     while (field_type_base = ORDINARY_FIELDS_BASE);
	     if length (RECOGNIZED_PREFIXES (idx)) < length (prefixless_field_name) then
		if substr (prefixless_field_name, 1, length (RECOGNIZED_PREFIXES (idx))) = RECOGNIZED_PREFIXES (idx)
		then do;
		     prefixless_field_name = substr (prefixless_field_name, (length (RECOGNIZED_PREFIXES (idx)) + 1));
		     field_type_base = FIELD_TYPE_BASES (idx);
		end;
	end;

	lb = lbound (SORTED_FIELD_NAMES, 1);		/* prepare for binary search */
	hb = hbound (SORTED_FIELD_NAMES, 1);
	field_type = USER_DEFINED_FIELD;

	do while ((field_type = USER_DEFINED_FIELD) & (hb >= lb));
	     name_idx = divide ((hb + lb), 2, 17, 0);
	     if prefixless_field_name = SORTED_FIELD_NAMES (name_idx) then field_type = SORTED_FIELD_TYPES (name_idx);
	     else if prefixless_field_name > SORTED_FIELD_NAMES (name_idx) then lb = name_idx + 1;
	     else hb = name_idx - 1;
	end;

	if field_type ^= USER_DEFINED_FIELD then
	     if SUPPORTED_FIELDS (field_type_base, field_type) then
		field_type = field_type + (FIELD_TYPES_BASE_MULTIPLIER * field_type_base);
	     else do;				/* reserved for future use */
		p_code = mlsys_et_$unsupported_reserved_field_name;
		return;
	     end;

	if field_type = COMMENT_FIELD then field_type = field_type + COMMENT_FIELDS_BASE;

	p_field_type = field_type;			/* here iff the field type is OK */
	p_code = 0;

	return;

     end lookup_field_name;
%page;
/* Create the canonical form of a field name:  The canonical form is created by replacing each sequence of whitespace with
   a single "-" and translating the first character of each resulting "token" to uppercase while translating the remaining
   characters in the "token" to lowercase */

canonicalize_field_name:
     procedure (p_field_name, p_canonical_field_name);

dcl  p_field_name character (*) parameter;
dcl  p_canonical_field_name character (*) varying parameter;

dcl  (start, token_lth, idx) fixed binary (21);

	begin;					/* caller's canonical_field_name is always large enough */

dcl  field_name character (length (p_field_name)) varying;
dcl  canonical_field_name character (maxlength (p_canonical_field_name)) varying;

	     field_name = ltrim (rtrim (p_field_name, HTSP), HTSP);
						/* copy input while removing leading/trailing whitespace */
	     canonical_field_name = "";		/* start out with nothing */

	     start = 1;
	     do while (start <= length (field_name));
		idx = search (substr (field_name, start), HTSP);
		if idx = 0 then do;			/* no more whitespace in the name */
		     canonical_field_name = canonical_field_name || substr (field_name, start);
		     start = length (field_name) + 1;
		end;
		else do;
		     canonical_field_name = canonical_field_name || substr (field_name, start, (idx - 1));
		     canonical_field_name = canonical_field_name || HYPHEN;
						/* replace whitespace with a hyphen */
		     start = start + idx;		/* past all the whitespace ... */
		     idx = verify (substr (field_name, start), HTSP);
		     if idx > 1 then start = start + idx - 1;
		end;
	     end;

	     start = 1;				/* now to fix the "tokens" */
	     do while (start <= length (canonical_field_name));
		idx = index (substr (canonical_field_name, start), HYPHEN);
		if idx = 0 then			/* the last token ... */
		     token_lth = length (canonical_field_name) - start + 1;
		else token_lth = idx - 1;
		if token_lth > 0 then		/* there's a least one character ... */
		     substr (canonical_field_name, start, 1) =
			translate (substr (canonical_field_name, start, 1), UPPERCASE, LOWERCASE);
		if token_lth > 1 then		/* ... and there's more than one, in fact */
		     substr (canonical_field_name, (start + 1), (token_lth - 1)) =
			translate (substr (canonical_field_name, (start + 1), (token_lth - 1)), LOWERCASE,
			UPPERCASE);
		start = start + token_lth + 1;	/* move past the "token" and the hyphen */
	     end;

	     p_canonical_field_name = canonical_field_name;
	end;

	return;

     end canonicalize_field_name;
%page;
%include mlsys_hash_tables_seg;
%page;
%include mlsys_internal_data;
%page;
%include mlsys_field_types;

     end mlsys_field_id_mgr_;
