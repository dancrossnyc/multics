/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


	/* This procedure is a I/O System Interface Module that simply ignores calls
		made to it. All output written to this DIM is discarded.

	   Originally coded by R. J. Feiertag on September 24, 1971			*/

discard_output_util_$discard_output_attach: proc(stream_name,type,device,mode,status,sdb_ptr);

	dcl stream_name char(*), /* name of stream to which this DIM is attached */
	    type char(*), /* name of this DIM */
	    device char(*), /* name of device, must be "" */
	    mode char(*), /* mode of attachment, should be "" */
	    status bit(72) aligned, /* status of call */
	    sp ptr, /* points to status */
	    sdb_ptr ptr; /* pointer to stream data block */

	dcl 1 status_structure aligned based(sp), /* structure of status string */
		2 error_code fixed bin, /* standard error code */
		2 pad15 bit(15) unaligned,
		2 detach bit(1) unaligned, /* 1 indicates stream should be detached */
		2 pad20 bit(20) unaligned;

	dcl 1 sdb internal static aligned, /* stream data block */
		2 interface_module_name char(32) init("discard_output_"), /* name of IOSIM */
		2 device_list ptr init(null), /* pointer to threaded list of device names */
		2 next_device ptr init(null), /* points to next entry on device name list */
		2 name_length fixed bin init(0); /* length of device name is zero */

	dcl (error_table_$ionmat,error_table_$invalid_device) ext fixed bin;

	dcl (addr,null) builtin;

	sp = addr(status); /* get pointer to status */
	if sdb_ptr ^= null then do; /* attempt to perform multiple attachment */
		error_code = error_table_$ionmat; /* return error code */
		detach = "1"b; /* unsuccessfull attachment */
		end;
	 else if device ^= "" then do; /* invalid device id */
		error_code = error_table_$invalid_device; /* return error code */
		detach = "1"b; /* unsuccessful attachment */
		end;
	  else sdb_ptr = addr(sdb); /* return pointer to sdb */
	if sdb.device_list = null then sdb.device_list = addr(sdb.next_device); /* construct valid sdb */
	return;

discard_output_write: entry(sdb_ptr,workspace,offset,nelem,nelemt,status);

	dcl workspace ptr, /* points to user buffer area */
	    offset fixed bin, /* indicates first element to be written */
	    nelem fixed bin, /* indicates number of elements to be written */
	    nelemt fixed bin; /* indicates number of elements actually written */

	nelemt = nelem; /* pretend wrote out all elements asked for */
	return;

discard_output_abort: entry(sdb_ptr,old_status,status);

	dcl old_status bit(72) aligned; /* status from previous transaction */

	return; /* don't do anything */

discard_output_resetwrite: entry(sdb_ptr,status);

	return;

discard_output_detach: entry(sdb_ptr,device,disposal,status);

	dcl disposal char(*); /* indicates special action to be taken, should be "" */

	sp = addr(status); /* get pointer to status string */
	if device ^= "" then error_code = error_table_$invalid_device; /* return error code */
	 else detach = "1"b; /* otherwise stream should be detached */
	return;
	end;
