/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to encode a variable or expression for use in symbol table 

   Initial Version:  7 May 1970 by BLW
	Modified:  4 September 1970 by BLW
	Modified: 16 February 1972 by BLW for Version II
	Modified:  2 July 1972 by BLW for new encoding scheme
	Modified: 26 September 1972 by BLW for std object segments
	Modified: 21 January 1973 by BLW for controlled storage
	Modified: 16 Nov 1979 by PCK to fix 1858 */

e_v:	proc(symb,coded_value,var,const,code,reloc);

dcl	symb	ptr,		/* points at symbol node */
	coded_value fixed bin,	/* where to store coded value */
	var	ptr,		/* variable part of value */
	const	fixed bin,	/* constant part of value */
	code	fixed bin,	/* type of value */
	reloc	bit(36) aligned;	/* relocation (output) */

dcl	(cg_stat$cur_block,cg_stat$encoded_values,cg_stat$cur_statement,
	 cg_stat$ev_qual,cg_stat$last_encoded,cg_stat$text_base,
	 cg_stat$dummy_block,cg_stat$dummy_statement,cg_stat$first_ref,
	 cg_stat$next_ref) ptr ext,
	 cg_stat$in_thunk bit(1) ext,
	(cg_stat$text_pos,cg_stat$cur_level) fixed bin(18) ext;

dcl	(vp,cvp,ap,bp,rp,sp,qp,xp,s1,s2,p,arg(2)) ptr,
	dl fixed bin(6),
	(lab,atomic) aligned bit(1),
	macro fixed bin(15),
	delta fixed bin(18),
	n fixed bin(18),
	fb_18 fixed bin(18) based;

dcl	compare_expression entry(ptr,ptr) returns(bit(1) aligned) reducible;
dcl	(compile_exp,compile_statement) entry(ptr),
	expmac entry(fixed bin(15),ptr),
	expmac$zero entry(fixed bin(15)),
	expmac$many entry(fixed bin(15),ptr,fixed bin),
	load entry(ptr,fixed bin),
	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr),
	base_man$load_arg entry(fixed bin,ptr) returns(bit(3) aligned),
	state_man$flush entry,
	make_mod entry(fixed bin(17),fixed bin) returns(fixed bin(18)),
	token_to_binary entry(ptr) reducible returns(fixed bin),
	c_a entry(fixed bin,fixed bin) returns(ptr);

dcl	fix_bin fixed bin based;

dcl	(addr,addrel,bit,fixed,null,string) builtin;

dcl	1 value		aligned based(cvp),
	2 code		unal bit(6),
	2 n1		unal bit(6),
	2 n2		unal bit(6),
	2 offset		unal bit(18);

dcl	1 lxl_ins		aligned based,
	2 stack_size	unal bit(18),
	2 rhs		unal bit(18);

dcl (	adfx1		init(19),
	load_pt_reg	init(172),
	end_ev_label	init(322),
	beg_ev_proc	init(318),
	end_ev_proc	init(319)) fixed bin(15) int static;

%include pl1_tree_areas;
%include reference;
%include operator;
%include symbol;
%include block;
%include statement;
%include ev_node;
%include nodes;
%include op_codes;
%include boundary;
%include token;
%include token_types;
%include reloc_lower;

/*		Execution begins ... */

	lab = "0"b;

start:	cvp = addr(coded_value);
	delta, coded_value = 0;
	reloc = (36)"0"b;

	s1 = var;
	if s1 -> node.type = statement_node
	then do;

	     /* have a difficult expression which required additional statements to
	        be generated.  The original expression we encoded is the root of the
	        last statement node in the chain */

	     s2 = s1;
	     do while(s2 -> statement.next ^= null);
		s2 = s2 -> statement.next;
		end;

	     vp = s2 -> statement.root;
	     s2 -> statement.root = null;
	     goto diff;
	     end;

	/* have a (relatively) easy expression */

	s1 = null;
	vp = var;

	if vp -> node.type ^= operator_node then goto chk;

	if vp -> op_code = bit_pointer
	then do;
pf:	     value.code = "100011"b;
	     value.offset = bit(fixed(const + delta,18),18);
	     return;
	     end;

	if vp -> op_code = add
	then do;

	     /* check for constant plus bit pointer operator */

	     xp = vp -> operand(3);
	     if xp -> node.type ^= reference_node then goto chk;

	     sp = xp -> reference.symbol;
	     if ^ sp -> symbol.constant then goto chk;

	     ap = vp -> operand(2);
	     if ap -> node.type ^= operator_node then goto chk;
	     if ap -> op_code ^= bit_pointer then goto chk;

	     delta = sp -> symbol.initial -> fb_18;
	     goto pf;
	     end;

	if vp -> op_code = desc_size
	then do;

	     /* check for size = reference to incoming descriptor */

	     xp = vp -> operand(2);
	     if xp -> node.type ^= reference_node then goto chk;

	     qp = xp -> reference.qualifier;
	     if qp = null
	     then do;

		/* check for controlled descriptor */

		ap = xp -> reference.symbol;
		if ^ ap -> symbol.arg_descriptor then goto chk;
		if ^ ap -> symbol.controlled then goto chk;

		value.code = "101101"b;

		if ap -> symbol.internal then reloc = rc_a_is18;
		else do;
		     value.n1 = "000001"b;
		     reloc = rc_a_lp18;
		     end;

		vp = xp;
		ap = ap -> symbol.descriptor;
		goto l5;
		end;

	     if qp -> node.type ^= operator_node then goto chk;
	     if qp -> op_code ^= param_desc_ptr then goto chk;

	     value.code = "101011"b;
	     value.n1 = bit(fixed(cg_stat$cur_level - qp -> operand(3) -> block.level,6),6);
	     value.n2 = bit(fixed(qp -> operand(2) -> reference.symbol -> symbol.initial -> fix_bin,6),6);
	     value.offset = bit(fixed(xp -> reference.c_offset,18),18);
	     return;
	     end;

	goto hard;

chk:	if const ^= 0 then goto hard;

	if vp -> node.type = token_node
	then if vp -> token.type = dec_integer
	     then do;
		coded_value = token_to_binary(vp);
		reloc = "0"b;
		return;
		end;

	/* have a reference node, we can encode its value if its
	   word offset is constant */

easy:	if vp -> reference.units ^= 0
	then if vp -> reference.units ^= word_
	     then goto hard;

	if vp -> reference.offset ^= null then goto hard;

	rp = vp -> reference.qualifier;
	if rp ^= null then goto based;

	ap = vp -> reference.symbol;

	if vp -> reference.defined_ref then ap = ap -> symbol.initial;

	if ap -> symbol.constant & ap -> symbol.internal
	then do;
	     if ^ ap -> symbol.fixed then goto hard;
	     if ^ ap -> symbol.binary then goto hard;
	     if ^ ap -> symbol.real then goto hard;
	     if ap -> symbol.c_word_size ^= 1 then goto hard;

	     coded_value = ap -> symbol.initial -> fix_bin;
	     reloc = "0"b;
	     return;
	     end;

	bp = ap -> symbol.block_node;
	dl = cg_stat$cur_level - bp -> block.level;

	if ap -> symbol.auto
	then do;
	     if dl > 63 then goto hard;
	     value.n1 = bit(dl,6);
	     value.code = "100000"b;
l1:	     value.offset = bit(fixed(ap -> symbol.location + vp -> reference.c_offset,18),18);
	     value.n2 = "000000"b;
	     return;
	     end;

	if ap -> symbol.parameter
	then do;
	     if dl > 63 then goto hard;
	     if ap -> symbol.location > 63 then goto hard;

	     value.n1 = bit(dl,6);
	     value.n2 = bit(fixed(ap -> symbol.location,6),6);
	     value.offset = bit(fixed(vp -> reference.c_offset,18),18);
	     value.code = "101001"b;
	     return;
	     end;

	if ap -> symbol.controlled
	then do;
	     if ap -> symbol.arg_descriptor then value.code = "101110"b;
	     else value.code = "101111"b;

	     if ap -> symbol.internal then reloc = rc_a_is18;
	     else do;
		value.n1 = "000001"b;
		reloc = rc_a_lp18;
		end;

	     goto l5;
	     end;

	if ^ ap -> symbol.static then goto hard;

	if ap -> symbol.internal
	then do;
	     value.code = "100001"b;
	     reloc = rc_a_is18;
	     goto l1;
	     end;

	value.code = "100010"b;
	reloc = rc_a_lp18;

	/* cannot encode if word offset is not positive and less than 64 */

l5:	if vp -> reference.c_offset < 0 then goto hard;
	if vp -> reference.c_offset > 63 then goto hard;

	value.n2 = bit(fixed(vp -> reference.c_offset,6),6);
	value.offset = bit(fixed(ap -> symbol.location,18),18);

	return;

	/* have a based variable, we can encode it if offset is positive
	   and less than 64 */

based:	if vp -> reference.c_offset < 0 then goto hard;
	if vp -> reference.c_offset > 63 then goto hard;

	/* use special code if qualifier is the param ptr node created by
	   prepare_symbol_table (a pointer to it was stored in block.context).
	   In this case, we had a refer option */

	if rp -> reference.qualifier = cg_stat$dummy_block -> block.context
	then do;
	     value.code = "100111"b;
	     goto l3;
	     end;

	/* check for param_ptr operator as qualifier */

	if rp -> node.type = operator_node
	then do;
	     if rp -> op_code = param_ptr then value.code = "101001"b;
	     else if rp -> op_code = param_desc_ptr then value.code = "101100"b;
		else goto hard;

	     dl = cg_stat$cur_level - rp -> operand(3) -> block.level;
	     if dl > 63 then goto hard;

l4:	     value.n1 = bit(dl,6);
	     value.n2 = bit(fixed(rp -> operand(2) -> reference.symbol -> symbol.initial -> fix_bin,6),6);
	     value.offset = bit(fixed(vp -> reference.c_offset,18),18);
	     return;
	     end;

	/* the ptr must have a constant offset and must not be itself based */

	if rp -> reference.offset ^= null then goto hard;

	ap = rp -> reference.qualifier;
	if ap ^= null
	then do;
	     if ap -> node.type ^= operator_node then goto hard;
	     if ap -> op_code ^= param_ptr then goto hard;
	     if rp -> reference.c_offset ^= 0 then goto hard;

	     dl = cg_stat$cur_level - ap -> operand(3) -> block.level;
	     if dl > 63 then goto hard;

	     /* we can handle the case of a variable based on a ptr parameter */

	     value.code = "101010"b;
	     rp = ap;
	     goto l4;
	     end;

	ap = rp -> reference.symbol;
	bp = ap -> symbol.block_node;
	dl = cg_stat$cur_level - bp -> block.level;

	if ap -> symbol.auto
	then do;
	     if dl > 63 then goto hard;
	     value.code = "100100"b;
	     value.n1 = bit(dl,6);

l2:	     value.offset = bit(fixed(ap -> symbol.location + rp -> reference.c_offset,18),18);
l3:	     value.n2 = bit(fixed(vp -> reference.c_offset,6),6);
	     return;
	     end;

	if ^ ap -> symbol.static then goto hard;

	if ap -> symbol.internal
	then do;
	     value.code = "100101"b;
	     reloc = rc_a_is18;
	     goto l2;
	     end;

	/* the word offset must be positve and less than 64 for ext static ptr */

	if rp -> reference.c_offset < 0 then goto hard;
	if rp -> reference.c_offset > 63 then goto hard;

	value.code = "100110"b;
	reloc = rc_a_lp18;
	value.n1 = bit(fixed(rp -> reference.c_offset,6),6);
	value.offset = bit(fixed(ap -> symbol.location,18),18);
	goto l3;

	/* have an expression or a variable that cannot be encoded, we
	   must generate an internal procedure to evaluate the expression,
	   so first search to see if we have already generated a procedure
	   to evaluate an equivalent expression */

hard:	p = cg_stat$encoded_values;
	do while(p ^= null);

	     if p -> ev_node.block ^= cg_stat$cur_block then goto next;

	     if p -> ev_node.const ^= const then goto next;

	     if ^ compare_expression(p -> ev_node.exp,vp) then goto next;

	     /* we found an equivalent expression evalutated earlier */

	     allocate ev_equiv in(tree_area) set(xp);
	     xp -> ev_equiv.next = p -> ev_node.equiv;
	     p -> ev_node.equiv = xp;

	     if symb = null then xp -> ev_equiv.name = null;
	     else xp -> ev_equiv.name = symb -> symbol.token;
	     xp -> ev_equiv.code = code;

	     value.offset = bit(p -> ev_node.first,18);
	     goto hd;

next:	     p = p -> ev_node.next;
	     end;

	/* have no equivalent expression, we must evaluate this one */

diff:	cg_stat$dummy_block -> block.father = cg_stat$cur_block;
	bp, cg_stat$cur_block = cg_stat$dummy_block;
	bp -> block.level, cg_stat$cur_level = cg_stat$cur_level + 1;
	bp -> block.no_stack = "0"b;

	call state_man$flush;

	bp -> block.last_auto_loc = 64;

	bp -> block.free_temps(1),
	bp -> block.free_temps(2),
	bp -> block.free_temps(3) = null;

	value.offset = bit(cg_stat$text_pos,18);
	ap = addrel(cg_stat$text_base,cg_stat$text_pos);

	call expmac$zero((beg_ev_proc));

	cg_stat$in_thunk = "1"b;
	do while(s1 ^= null);
	     call compile_statement(s1);
	     s1 = s1 -> statement.next;
	     end;
	cg_stat$in_thunk = "0"b;

	cg_stat$cur_statement = cg_stat$dummy_statement;
	if symb ^= null
	     then string(cg_stat$cur_statement -> statement.source_id) = string(symb -> symbol.source_id);

	xp = prepare_operand(vp,1,atomic);

	if lab
	then do;
	     macro = end_ev_label;
	     call expmac((load_pt_reg),xp);
	     end;
	else do;
	     macro = end_ev_proc;
	     if atomic then call load(xp,0);
	     else do;
		cg_stat$cur_statement -> statement.root = vp;
		call compile_exp(vp);
		end;
	     end;

	if const ^= 0 then call expmac((adfx1),c_a(const,2));

	xp = c_a(4,4);			/* sp|4 */
	xp -> address.base = base_man$load_arg(0,bp);
	xp -> address.tag = "010000"b;	/* lp|4,* */
	call expmac(macro,xp);

	ap -> lxl_ins.stack_size = bit(make_mod(bp -> block.last_auto_loc,16),18);

	allocate ev_node in(tree_area) set(xp);
	if cg_stat$encoded_values = null
	then cg_stat$encoded_values = xp;
	else cg_stat$last_encoded -> ev_node.next = xp;
	cg_stat$last_encoded = xp;
	xp -> ev_node.next = null;

	if symb = null then xp -> ev_node.name = null;
	else xp -> ev_node.name = symb -> symbol.token;

	xp -> ev_node.exp = vp;
	xp -> ev_node.equiv = null;
	xp -> ev_node.const = const;
	xp -> ev_node.code = code;
	xp -> ev_node.first = fixed(value.offset,18);
	xp -> ev_node.last = cg_stat$text_pos;

	cg_stat$next_ref = cg_stat$first_ref;

	cg_stat$cur_level = cg_stat$cur_level - 1;
	xp -> ev_node.block, cg_stat$cur_block = bp -> block.father;

hd:	value.code = "101000"b;
	reloc = rc_a_t;

	return;

e_v$l_v:	entry(symb,coded_value,var,const,code,reloc);

	/* this entry is called to encode a label or format value */

	lab = "1"b;
	goto start;

	end;
