/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to set refa = addr(refb), possibly with bit offset */

/*	Modified:	12 June 1973 by RAB for EIS
	Modified:	5 Sept 1975 by RAB to fix 1415
	Modified:	10 Sept 1977 by RAB to fix 1613 by adding a_last_freed parameter	*/

store_bit_address: proc(refa,refb,a_last_freed);

dcl	(refa,refb) ptr;
dcl	a_last_freed fixed bin(18);	/* address at which temp storage used by refa was freed */

dcl	cg_stat$text_base ptr ext,
	cg_stat$last_call fixed bin ext;

dcl	(p,pa,pb) ptr,
	n fixed bin(15),
	shared bit(1) aligned,
	b36 bit(36) aligned,
	(i,units,bo) fixed bin;

dcl	base_man$store_ptr_to entry(ptr,ptr);
dcl	m_a entry(ptr,bit(2) aligned);

dcl	(addr,addrel,bit,fixed,mod,null,substr) builtin;


dcl	word bit(36) aligned based,
	1 instruction	aligned based,
	2 base		unal bit(3),
	2 offset		unal bit(15),
	2 rest		unal bit(18);

%include reference;
%include bases;

	pa = refa;
	pb = refb;

	/* check to see if this arg is a string expression which may end
	   in a stpbp instruction that saves a pointer to the string in a
	   temporary.  If this is the case, we'll change the stpbp to set
	   the proper arg position in the stack and alter the address of
	   the temporary */

	if fixed(pb -> reference.store_ins,18) <= cg_stat$last_call then goto set;

	if fixed(pb -> reference.store_ins,18) < a_last_freed then goto set;

	p = addrel(cg_stat$text_base,pb -> reference.store_ins);

	if (p -> word & "111000000000000000111111111111111111"b)
		   ^= "110000000000000000010101010001000000"b	/* stpbp sp|0 */
	then goto set;

	if pb -> address.base ^= bp
	then if pb -> address.base ^= sp
	     then go to set1;
	     else if p -> instruction.offset ^= pb -> address.offset
		then go to set1;

	if pa -> reference.no_address
	then do;
	     call m_a(pa,"0"b);
	     if pa -> address.base ^= sp
		then go to set1;
	     if pa -> address.tag
		then go to set1;
	     end;

	p -> instruction.offset, pb -> address.offset = pa -> address.offset;
	pb -> reference.store_ins = "0"b;
	pb -> reference.ref_count = pb -> reference.ref_count - 1;
	return;

/* Normal case:  have base_man store the pointer */

set:	if pb -> reference.symbol ^= null
	then if ^ pb -> reference.temp_ref | pb -> reference.length = null
	     then pb -> reference.no_address = "1"b;

set1:
	call base_man$store_ptr_to(pb,pa);

	end;
