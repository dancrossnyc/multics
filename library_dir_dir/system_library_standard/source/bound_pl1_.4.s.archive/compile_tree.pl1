/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to compile root operator of a statement

   Initial Version: 16 April 1971 by BLW
	Modified: 29 December 1972 by BLW
	Modified:	28 February 1973 by RAB
	Modified:	18 June 1973 by RAB	
	Modified:	6 October 1973 by RAB for EIS
	Modified:	23 June 1976 by R. Schoeman for new area package
	Modified:	24 June 1976 by RAB to centralize use of cg_stat$last_call
	Modified:	30 January 1977 by RAB to dec ref_count in allot_ctl & free_ctl
	Modified:	15 April 1979 by RAB to improve code for a = a & b; for
		based long strings by checking for allowable cases of overlap
	Modified:	17 August 1979 by RAB to improve code for a = a & ^ b; for long strings.
		One instruction is generated instead of two or more.
	Modified 791016 by PG to fix 1856 (multiple assignment code bumped ref count on
		a shared reference node owned by a top-level bound_ck operator!)
	Modified 830106 by BIM to align aggregate loops on doubleword
		boundaries.
*/

compile_tree: proc(pt);

/* parameters */

dcl	pt ptr parameter;		/* point at an operator node */

/* external static */

dcl	(cg_stat$prol_ent,cg_stat$cur_block,cg_stat$cur_statement,cg_stat$cur_node,cg_stat$cur_tree) ptr ext,
	cg_stat$text_pos fixed bin(18) ext;

/* automatic */

dcl	(p,arg(3),llp,ulp,p1,q1,p2,q2,q3,s1,s2,rand(10),save_cur_node) ptr,
	macro fixed bin(15),
	op_code bit(9),
	(atomic,abset) bit(1) aligned,
	(i,j,k,loc,n,cfo,d) fixed bin;

/* based */

dcl	fix_bin		fixed bin based;

/* defined */

dcl	op_class bit(5) defined(op_code) pos(1);

/* entries */

dcl	(assign_op,compile_tree,compile_exp,move_data,
	 state_man$flush_ref,jump_op,io_op) entry(ptr);
dcl	m_a entry(ptr,bit(2) aligned);
dcl	base_man$load_var entry(fixed bin,ptr,fixed bin),
	base_to_core entry(fixed bin,ptr),
	base_man$store_ptr_to entry(ptr,ptr),
	base_man$update_base entry(fixed bin,ptr,fixed bin);
dcl	compare_expression entry(ptr,ptr) returns(bit(1) aligned) reducible;
dcl	adjust_ref_count entry(ptr,fixed bin),
	call_op entry(ptr) returns(ptr),
	compile_exp$save entry(ptr) returns(ptr),
	compile_exp$save_exp entry(ptr) returns(ptr),
	load entry(ptr,fixed bin),
	create_label entry(ptr,ptr,bit(3) aligned) returns(ptr),
	store$force entry(ptr),
	xr_man$load_const entry(fixed bin(31),fixed bin),
	(state_man$flush,io_op$init_ps) entry,
	state_man$erase_reg entry(bit(19) aligned),
	state_man$set_aliasables entry(ptr),
	c_a entry(fixed bin,fixed bin) returns(ptr),
	aq_man$clear_q entry,
	expmac$one entry(fixed bin(15),ptr,fixed bin),
	expmac$zero entry(fixed bin(15)),
	expmac$many entry(fixed bin(15),ptr,fixed bin),
	expmac$two_eis entry(fixed bin(15),ptr,ptr),
	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr),
	expmac entry(fixed bin(15),ptr),
	decimal_op$change_target entry(ptr) returns(bit(1) aligned),
	decimal_op$get_float_temp entry(fixed bin(24),bit(1) aligned) returns(ptr),
	assign_op$to_dec_scaled entry(ptr,ptr),
	stack_temp$assign_aggregate entry(ptr);

/* builtins */

dcl	(addr,fixed,mod,null) builtin;

/* internal static */

dcl	odd_bases bit(19) aligned int static init("0000000000000001111"b);

dcl (	call_prologue	init(204),
	aos_mac		init(309),
	nop_mac		init(528),
	incr_mac		init(310),
	diff_mac		init(311),
	allot_auto_mac	init(114),
	zero_mac		init(308),
	open_mac		init(493),
	close_mac		init(494),
	make_desc_mac	init(275),
	arl		init(245),
	lrl		init(62),
	signal_mac	init(289),
	io_signal_mac	init(321),
	revert_mac	init(290),
	revert_file	init(607),
	string_mac(33:35)	init(43,49,55),
	long_mac(33:35)	init(264,304,341),
	move_andnot_1	init(392),
	set_desc_size	init(276),
	alloc_block	init(608),
	free_block	init(609),
	alloc_based_area	init(502),
	alloc_based_mac	init(695),
	free_based_mac	init(696),
	empty_area_mac	init(697),
	push_ctl_data	init(610),
	push_ctl_desc	init(611),
	pop_ctl_data	init(612),
	pop_ctl_desc	init(613),
	loop_end		init(397)) fixed bin(15) int static options (constant);

dcl (	jump_class	init("00101"b),
	ptr_class		init("01011"b),
	io_class		init("10000"b)) bit(5) int static options (constant);

/* include files */

%include cgsystem;
%include block;
%include statement;
%include operator;
%include reference;
%include symbol;
%include label;
%include nodes;
%include declare_type;
%include op_codes;
%include data_types;
%include boundary;
%include list;

/* program */

	p, cg_stat$cur_tree = pt;
	op_code = p -> operator.op_code;

	if op_code = join
	then do;

	     do i = 1 to p -> operator.number;
		call compile_tree((p -> operand(i)));
		end;

	     return;
	     end;

	if op_class = jump_class
	then do;
	     call jump_op(pt);
	     return;
	     end;

	do i = 1 to p -> operator.number;
	     rand(i) = p -> operand(i);
	     end;

	if p -> operator.number > 1
	then if rand(1) ^= null
	then if rand(1) -> node.type = reference_node
	then if rand(1) -> reference.evaluated
	then if ^ rand(1) -> reference.shared
	then do;
	     call adjust_ref_count(rand(1),-1);
	     return;
	     end;

	if op_code = std_call
	then do;
	     p = call_op(p);
	     return;
	     end;

	if op_code = assign_zero
	then do;
	     p = prepare_operand(rand(1),1,atomic);
	     call state_man$flush_ref(p);
	     call expmac((zero_mac),p);
	     if p -> reference.aliasable
		then call state_man$set_aliasables(p);
	     return;
	     end;

	if op_code = ex_prologue
	then do;

	     p = cg_stat$cur_block;
	     if p -> block.number_of_entries = 1
	     then do;

		/* instead of compiling the prologue as a subroutine, we'll
		   hook all of the prologue statements into the main list
		   after the current statement */

	          if p -> block.plio_ps ^= null then call io_op$init_ps;

		arg(1) = cg_stat$cur_statement;
		arg(2) = p -> block.end_prologue;
		if arg(2) = null then return;
		arg(2) -> statement.next = arg(1) -> statement.next;
		arg(2) -> statement.next -> statement.back = arg(2);
		arg(2) = p -> block.prologue;
		arg(1) -> statement.next = arg(2);
		arg(2) -> statement.back = arg(1);
		p -> block.prologue, p -> block.end_prologue = null;
		end;

	     else if cg_stat$prol_ent ^= null
		then do;
		     call state_man$erase_reg((odd_bases));
		     call expmac((call_prologue),prepare_operand(cg_stat$prol_ent,1,atomic));
		     end;

	     return;
	     end;

	if op_code = loop
	then do;

	     call check_aggregate(rand(1));

	     arg(2) = prepare_operand(rand(2),1,atomic);

	     ulp = prepare_operand(rand(4),1,atomic);
	     if ^ atomic then ulp = compile_exp$save(rand(4));

	     if ulp -> reference.data_type = real_fix_bin_2 then ulp -> reference.c_offset = ulp -> reference.c_offset + 1;

	     llp = prepare_operand(rand(3),1,atomic);
	     if atomic then call load(llp,0); else call compile_exp(rand(3));

	     call store$force(arg(2));

	     call state_man$flush;

	     if mod (cg_stat$text_pos, 2) ^= 0
	     then call expmac$zero (nop_mac);
	     arg(1) = create_label(cg_stat$cur_block,null,(by_compiler));
	     arg(1) -> label.location = cg_stat$text_pos;
	     arg(1) -> label.allocated = "1"b;
	     arg(1) = prepare_operand(arg(1),1,atomic);

	     call compile_tree(rand(1));

	     arg(3) = ulp;
	     call expmac$many((loop_end),addr(arg),3);

	     if ulp -> reference.data_type = real_fix_bin_2 then ulp -> reference.c_offset = ulp -> reference.c_offset - 1;

	     /* release scalar expressions pulled outside of loop as optimization */

	     do p1 = rand(5) repeat p1 -> element(1) while(p1 ^= null);
		call adjust_ref_count((p1 -> element(2)),-1);
		end;

	     return;
	     end;

	if op_code = allot_auto
	then do;
	     q2 = prepare_operand(rand(2),1,atomic);
	     if atomic then call load(q2,0); else call compile_exp(rand(2));
	     call expmac((allot_auto_mac),rand(1));
	     call base_man$update_base(1,rand(1),1);
	     return;
	     end;

	if op_code = make_desc
	then do;

	     do i = 1 to 3;
		arg(i) = prepare_operand(rand(i),1,atomic);
		end;

	     if atomic then call load(arg(3),0); else call compile_exp(rand(3));

	     if arg(1) ^= arg(2) then call expmac$many((make_desc_mac),addr(arg),2);
	     else do;
		call m_a(arg(1),"0"b);
		arg(1) -> reference.perm_address = "1"b;

		if arg(1) -> address.tag
		then do;
		     call base_man$load_var(2,arg(1),1);
		     arg(1) -> reference.perm_address = "1"b;
		     end;

		arg(1) -> address.tag = "001111"b;
		call expmac((set_desc_size),arg(1));
		end;

	     return;
	     end;

	if op_code = copy_words
	then do;
l4:	     call move_data(p);
	     abset = "0"b;
	     call set_structure(rand(1));
	     return;
	     end;

	if op_code = copy_string then goto l4;

	if op_class = io_class
	then do;
	     save_cur_node = cg_stat$cur_node;
	     cg_stat$cur_node = pt;
	     call io_op(pt);
	     cg_stat$cur_node = save_cur_node;
	     call state_man$set_aliasables(null);
	     return;
	     end;

	if op_code = open_file
	then do;
	     macro = open_mac;
	     goto l6;
	     end;

	if op_code = close_file
	then do;
	     macro = close_mac;

l6:	     call state_man$erase_reg((odd_bases));
	     call expmac$zero(macro);
	     call state_man$set_aliasables(null);
	     return;
	     end;

	if op_code = signal_on
	then do;

	     if rand(2) = null then macro = signal_mac;
	     else do;
		p2 = prepare_operand(rand(2),1,atomic);
		call base_man$store_ptr_to(p2,c_a(40,4));
		macro = io_signal_mac;
		end;

	     p1 = prepare_operand((rand(1) -> reference.symbol -> symbol.general),1,atomic);
	     call xr_man$load_const((p1 -> reference.c_length),6);
	     call expmac(macro,p1);
	     call state_man$flush;
	     return;
	     end;

	if op_code = revert_on
	then do;
	     if rand(2) = null
	     then call expmac((revert_mac),c_a((rand(1) -> reference.symbol -> symbol.location),4));
	     else do;
		arg(1) = prepare_operand((rand(1) -> reference.symbol -> symbol.general),1,atomic);
		arg(2) = prepare_operand(rand(2),1,atomic);
		call expmac$many((revert_file),addr(arg),2);
		end;

	     return;
	     end;

	if op_code = nop
	then do;
	     call expmac$zero((nop_mac));
	     return;
	     end;

	s1 = rand(1) -> reference.symbol;

	if op_code = allot_ctl
	then do;
		q2 = prepare_operand(rand(2),1,atomic);
		if atomic
		     then call load(q2,0);
		     else call compile_exp(rand(2));
		if s1->symbol.arg_descriptor
		     then macro = push_ctl_desc;
		     else if s1->symbol.exp_extents
			     then macro = alloc_block;
			     else macro = push_ctl_data;
		go to ca;
	     end;

	if op_code = free_ctl
	then do;
		if s1->symbol.arg_descriptor
		     then macro = pop_ctl_desc;
		     else if s1->symbol.exp_extents
			     then macro = free_block;
			     else macro = pop_ctl_data;
ca:		loc = s1->symbol.location;
		if s1->symbol.internal
		     then do;
			n = 13;
			if s1->symbol.arg_descriptor
			     then loc = loc - 2;
			end;
		     else n = 9;
		q1 = c_a(loc,n);
		call state_man$erase_reg((odd_bases));
		call expmac(macro,q1);
		if ^ rand(1) -> reference.shared
		     then call adjust_ref_count(rand(1),-1);
		call state_man$set_aliasables(null);
		abset = "1"b;
		call set_structure(rand(1));
		return;
	     end;

		/* The schematic code sequence for allot_based	*/
		/* is as follows:	*/
		/*  <prepare ptr>		*/
		/*  <flush all registers>	*/
		/*RE-TRY:		*/
		/*  <prepare area> (if it exists)	*/
		/*  <compile size(based_var)>	*/
		/*  epp2 area (if it exists)	*/
		/*  <flush all regs>	*/
		/*  tsx0	pr0|alloc_based if area given,	*/
		/*  or tsx0 pr0|alloc_based_storage if area not given	*/
		/*  tra RE-TRY		*/
		/*  spri2	_p_t_r (to area)	*/

	if op_code = allot_based
	then do;				
	     q1 = prepare_operand(rand(1),1,atomic);	

	     call state_man$flush;		
	     loc = cg_stat$text_pos;		

	     if rand(3)^= null		
	     then q3 = prepare_operand(rand(3),1,atomic);

	     q2 = prepare_operand(rand(2),1,atomic);
	     if atomic			
	     then call load(q2,0);		
	     else call  compile_exp(rand(2));	

	     p1 = c_a(loc,10);		
	     if rand(3) ^=  null		
	     then do;			
	     	call base_man$load_var(2,q3,1);
		macro = alloc_based_area;
		end;
	     else macro = alloc_based_mac;

	     call state_man$flush;

	     call expmac(macro,p1);
	     call base_to_core(1,q1);

	     return;
	     end;

		/* The schematic code sequence for free_based is:	*/
		/* <evaluate size (based_var)>	*/
		/* <evaluate area>	*/
		/* epp5 qualifier_of_based_var	*/
		/* <flush all regs>	*/
		/* tsx0 pr0|free_based	*/

	if op_code = free_based
	then do;				
	     q2 = prepare_operand(rand(2),1,atomic);
	     if ^atomic			
	     then call compile_exp(rand(2));	
	     else call adjust_ref_count(q2,-1);	
					
	     if rand(3) ^= null		
	     then do;
		q3 = prepare_operand(rand(3),1,atomic);
		if ^atomic
		then call compile_exp(rand(3));
		else call adjust_ref_count(q3,-1);

		end;

	     q1 = prepare_operand(rand(1),-1,atomic);

	     p2 = q1->reference.qualifier;

	     if p2->node.type = operator_node
	     then do;

		/* check for evaluated because addr_fun handled specially */

		if ^ p2 -> operand(1) -> reference.evaluated
		     then p2 = compile_exp$save(p2);
		     else p2 = p2 -> operand(1);
		end;

	     if ^ p2 -> reference.shared
		then p2->reference.ref_count = p2->reference.ref_count + 1;
	     call base_man$load_var(2,p2,5);

	     call state_man$flush;

	     call expmac$zero((free_based_mac));

	     call adjust_ref_count(q1,-1);

	     return;

	     end;

		/* The schematic code sequence for free_based is :	*/
		/* <compile size>	*/
		/* epp2 area	*/
		/* <flush all regs>	*/
		/* tsx0 pr0|empty	*/

	if op_code = empty_area
	then do;				
	     q1 = prepare_operand(rand(1),1,atomic);

	     q2 = prepare_operand(rand(2),1,atomic);
	     if ^atomic			
	     then call compile_exp(rand(2));	
	     else call load(q2,0);		

	     call base_man$load_var(2,q1,1);	

	     call state_man$flush;

	     call expmac$zero((empty_area_mac));

	     return;

	     end;

	if op_class = ptr_class then goto ce;

/* All of the code from here to the call to compile_exp is here to handle
   the special-cases that arise from operator_semantics eliminating assign
   operators at the top of the tree. However, the following code is general
   in that is it safe to perform these optimizations no matter what the
   origin of the tree. */

	/* The following code adjusts the reference count on T in the case
			T = right_hand_side
			a = T
			b = T
	   which arises from the multiple assignment
			a,b = right_hand_side
	  or from the assignment
			bit_string = unspec(right_hand_side)	*/

	if s1 -> symbol.temporary & ^rand(1) -> reference.shared
	then if rand (1) -> reference.ref_count > 1
	     then rand (1) -> reference.ref_count = rand (1) -> reference.ref_count - 1;

	if (op_code = assign) | (op_code = assign_size_ck)
	then do;
	     if op_code = assign_size_ck
	     then go to l0;

	     /* The following uses the fact the all decimal operations are done by special hardware and
	        most complex binary operations are done via calls to procedures both of which are
	        able to accept an output operand whose attributes are different than
	        those required by the PL/I precision rules.  The fact that the
	        semantic translator generated an assigment operator means that
	        the attributes of the LHS do not match those of the RHS.  If RHS
	        is an expression which has not been optimized or previously
	        evaluated, we will attempt to eliminate the assign operator ourselves
	        if the runtime routines can handle the attribute mismatch that will
	        result.  This eliminates the need for an extra procedure call at
	        runtime to move the result of the computation into LHS */

	     if rand(2) -> node.type ^= operator_node then goto l0;

	     p1 = rand(2) -> operand(1);
	     if p1 -> reference.evaluated then goto l0;
	     if p1 -> reference.ref_count > 0 then goto l0;

	     s2 = p1 -> reference.symbol;

	     /* Both sides have to have same value for complex and decimal attributes */

	     if s1 -> symbol.complex ^= s2 -> symbol.complex then goto l0;
	     if s2 -> symbol.decimal ^= s1 -> symbol.decimal then goto l0;

	     if s1 -> symbol.decimal
	     then do;

		/* Make sure scales are within hardware limits */

		if s1 -> symbol.scale > max_dec_scale then go to l0;
		if s1 -> symbol.scale < min_dec_scale then go to l0;
		if s2 -> symbol.scale > max_dec_scale then go to l0;
		if s2 -> symbol.scale < min_dec_scale then go to l0;

		/* some operators require results with special characteristics */

		if rand(2) -> operator.op_code = trunc_fun
		then if s1 -> symbol.scale ^= 0 | (s1 -> symbol.float & s2 -> symbol.fixed)
		     then go to l0;
		if rand(2) -> operator.op_code = assign
		then do;
		     if s1 -> symbol.float & s2 -> symbol.fixed
			then go to l0;
		     if s1 -> symbol.fixed & s2 -> symbol.fixed
		     then if s1 -> symbol.scale ^= s2 -> symbol.scale
			then go to l0;
		     if s1 -> symbol.c_dcl_size > s2 -> symbol.c_dcl_size
			then go to l0;
		     end;
		if rand(2) -> operator.op_code = round_fun then go to l0;
		if rand(2) -> operator.op_code = min_fun then go to l0;
		if rand(2) -> operator.op_code = max_fun then go to l0;
		if rand(2) -> operator.op_code = unpack then go to l0;

		/* any real decimal can be replaced by any other real decimal
		   and similarly for complex decimals */

switch:		rand(2) -> operand(1) = rand(1);
		p = rand(2);
		goto ce;
		end;

	     if ^ s1 -> symbol.complex then goto l0;

	     /* If output of RHS is float binary single, we only want to
	        replace it if LHS is float binary single aligned.  Otherwise,
	        we can replace a complex float binary with any other
	        complex float binary and similarly for complex fixed binary */

	     if s2 -> symbol.float
	     then if s2 -> symbol.c_word_size = 1
		then do;
		     if ^ s1 -> symbol.float then goto l0;
		     if s1 -> symbol.c_word_size ^= 1 then goto l0;
		     if s1 -> symbol.packed then goto l0;

		     if rand(1) -> reference.units ^= 0
		     then if rand(1) -> reference.units ^= word_
			then goto l0;

		     goto switch;
		     end;

	     if s2 -> symbol.float = s1 -> symbol.float then goto switch;

	     /* could not eliminate the assignment */

l0:	     call assign_op(p);
	     go to set;
	     end;

	/* the following code checks for decimal expressions whose scale
	   is outside of machine limits */

	if s1 -> symbol.decimal
	then if s1 -> symbol.fixed
	then if p -> operator.number >= 3
	then if op_code ^= round_fun
	then if op_code ^= complex_fun
	then do;
	     if s1 -> symbol.scale < min_dec_scale | s1 -> symbol.scale > max_dec_scale
	     then do;
		if decimal_op$change_target(p)
		then do;
		     p -> operand(1) = decimal_op$get_float_temp(s1 -> symbol.c_dcl_size,(s1 -> symbol.complex));
		     p1 = compile_exp$save(p);
		     rand(1) = prepare_operand(rand(1),1,atomic);
		     call assign_op$to_dec_scaled(rand(1),p1);
		     p -> operand(1) = rand(1);
		     go to set;
		     end;
		end;
	     go to ce;
	     end;

	/* machine-dependent optimizations follow */

	if op_code = add | op_code = sub
	then do;

	     /* if operand(1) is single fixed binary, we may be able to generate
	        a shorter code sequence if two of the operands are the same */


	     if s1 -> symbol.complex then goto ce;
	     if s1 -> symbol.float then goto ce;
	     if s1 -> symbol.unaligned then goto ce;

	     if s1 -> symbol.c_dcl_size > max_p_fix_bin_1 then goto ce;

	     if ^ search_arithmetic() then go to ce;

	     q1 = prepare_operand(rand(1),1,atomic);

	     call drop_count;

	     if i = 2 then j = 3; else j = 2;

	     p2 = p -> operand(j);
	     q2 = prepare_operand(p2,1,atomic);

	     if op_code = sub then goto l2;

	     if atomic
	     then do;
		s2 = q2 -> reference.symbol;
		if s2 -> symbol.constant
		then if q2 -> reference.offset = null
		     then if q2 -> reference.c_offset = 0
			then if s2 -> symbol.initial -> fix_bin = 1
		     	     then do;
				macro = aos_mac;
				goto l3;
				end;

		call load(q2,0);
		end;
	     else call compile_exp(p2);

l1a:	     macro = incr_mac;
	     goto l3;

l2:	     if i = 2
	     then do;
		if ^ atomic then q2 = compile_exp$save(p2);
		call load(q2,1);
		goto l1a;
		end;

	     if atomic then call load(q2,0); else call compile_exp(p2);

	     macro = diff_mac;

l3:	     call state_man$flush_ref(q1);
	     call expmac(macro,q1);
	     go to set;
	     end;

	if op_class = "00010"b			/* and, or, not, etc */
	then do;
	     if op_code > xor_bits then goto ce;

	     /* have &, |, or xor operator */

	     if rand(1) -> reference.length ^= null | rand(1) -> reference.c_length > bits_per_two_words
	     then do;
		if ^ search() then go to ce;

		macro = long_mac(fixed(op_code,9));

		if i = 2 then j = 3; else j = 2;

		q1 = prepare_operand(rand(1),1,atomic);
		p2 = prepare_operand(rand(j),1,atomic);

		if rand(j) -> node.type = reference_node
		then if overlaps(q1,p2)
		     then go to ce;
		     else;

		else if can_do_andnot(rand(j))
		     then do;

			/* op_code is and_bits, rand(j) is not_bits */

			p2 = prepare_operand((rand(j) -> operand(2)),1,atomic);

			if ^ atomic
			     then p2 = compile_exp$save_exp((rand(j) -> operand(2)));

			call adjust_ref_count((rand(j) -> operand(1)), -1);

			macro = move_andnot_1;
			end;

		     else p2 = compile_exp$save(rand(j));

		call drop_count;

		call expmac$two_eis(macro,q1,p2);
		go to set;
		end;

	     if rand(1) -> reference.offset ^= null then goto ce;
	     if rand(1) -> reference.fo_in_qual then goto ce;

	     cfo = mod(rand(1) -> reference.c_offset * convert_offset(rand(1) -> reference.units),bits_per_word);
	     k = cfo + rand(1) -> reference.c_length;
	     if k > bits_per_two_words then goto ce;

	     if ^ search() then go to ce;

	     q1 = prepare_operand(rand(1),1,atomic);

	     if ^ (q1 -> reference.aligned_ref | op_code = or_bits) then goto ce;

	     call drop_count;

	     if i = 2 then j = 3; else j = 2;
	     p2 = rand(j);
	     q2 = prepare_operand(p2,1,atomic);

	     d = fixed(k > bits_per_word,1);

	     if atomic then call load(q2,d); else call compile_exp(p2);

	     i = q2 -> reference.c_length;
	     if op_code = and_bits
	     then if fixed(i > bits_per_word,1) < d
		then do;
		     call aq_man$clear_q;
		     i = bits_per_two_words;
		     end;

	     i = cfo + i;
	     d = fixed(i > bits_per_word,1);

	     if cfo ^= 0
	     then do;
		if d = 0 then macro = arl; else macro = lrl;
		call expmac(macro,c_a(cfo,1));
		end;

	     call state_man$flush_ref(q1);
	     call expmac$one((string_mac(fixed(op_code,9))),q1,d);
	     go to set;
	     end;

ce:	call compile_exp(p);

set:	if rand(1) -> reference.aliasable
	then call state_man$set_aliasables(rand(1));
	else if rand(1) -> reference.defined_ref
	     then do;
		abset = "0"b;
		call set_structure((rand(1) -> reference.qualifier));
		end;

	return;

search:	proc returns(bit(1) aligned) irreducible;

	if rand(1) -> reference.units = 0
	     then rand(1) -> reference.units = word_;

	do i = 2 to 3;
	     q1 = rand(i);
	     if rand(1) = q1 then return("1"b);
	     if q1 -> node.type = reference_node
	     then do;
		if q1 -> reference.units = 0
		     then q1 -> reference.units = word_;
		if rand(1) -> reference.symbol = q1 -> reference.symbol
		then if compare_expression(rand(1),q1)
		     then return("1"b);
		end;
	     end;

	return("0"b);

	end;

search_arithmetic:	proc returns(bit(1) aligned) irreducible;

	/* we cannot use compare_expression directly because some operands
	   may be prepared while others may not, thus c_length may be invalid.
	   compare_expression is used at all because if one operand is a call,
	   the optimizer might be prevented from commoning the offsets and
	   qualifiers of the other operands. */

	do i = 2 to 3;
	     q1 = rand(i);
	     if rand(1) = q1 then return("1"b);
	     if q1 -> node.type = reference_node
	     then if rand(1) -> reference.symbol = q1 -> reference.symbol
	     then if rand(1) -> reference.c_offset = q1 -> reference.c_offset
	     then do;
		if rand(1) -> reference.qualifier ^= q1 -> reference.qualifier
		then if ^ compare_expression((rand(1) -> reference.qualifier),(q1 -> reference.qualifier))
		     then go to step;
		if rand(1) -> reference.offset ^= q1 -> reference.offset
		then if ^ compare_expression((rand(1) -> reference.offset),(q1 -> reference.offset))
		     then go to step;
		return("1"b);
		end;
step:
	     end;

	return("0"b);

	end;

drop_count:	proc;

	if ^ rand(i) -> reference.shared
	     then call adjust_ref_count(rand(i),-1);

	end;

overlaps:	proc(q1,p2) returns(bit(1) aligned);

/* checks to see if two reference nodes reference overlapping but not matching storage.
   At least one of the reference nodes MUST be a non-temporary. */

dcl	     (q1,p2) ptr;

	if q1 -> reference.symbol = p2 -> reference.symbol
	 | (q1 -> reference.aliasable & p2 -> reference.aliasable)
	   & q1 -> reference.symbol -> symbol.aligned = p2 -> reference.symbol -> symbol.aligned
	   & q1 -> reference.symbol -> symbol.varying = p2 -> reference.symbol -> symbol.varying
	then if q1 -> reference.substr
	      | p2 -> reference.substr
	      | ^ (q1 -> reference.symbol -> symbol.aligned | q1 -> reference.symbol -> symbol.varying)
	     then return("1"b);

	return("0"b);

	end /* overlaps */;

set_structure:	proc(pt);

/* We must flush the non-aggregate shared members of the structure from the machine state */

dcl	(adam,pt,r,s) ptr;

	adam = pt -> reference.symbol;

	s = adam;

loop:	do while(s -> symbol.structure);
	s = s -> symbol.son;
	end;

	r = s -> symbol.reference;
	if ^ r -> reference.array_ref
	then do;
	     if r -> reference.qualifier = null
	     then if r -> reference.offset = null
		then if r -> reference.length = null
		     then call state_man$flush_ref(r);

	     if ^ abset
	     then if s -> symbol.aliasable | r -> reference.aliasable
		then call state_man$set_aliasables(r);
	     end;

	if s = adam then return;

	do while(s -> symbol.brother = null);
	s = s -> symbol.father;
	if s = adam then return;
	end;

	s = s -> symbol.brother;
	go to loop;
	end;

check_aggregate:	proc(pt);

/* check_aggregate makes sure that aggregate temporaries get allocated
   outside of the loop in which they might appear */

dcl	     (p,pt,s) ptr;
dcl	     i fixed bin;
dcl	     op_code bit(9) aligned;

	     p = pt;
	     if p = null then return;
	     if p -> node.type ^= operator_node then return;

	     op_code = p -> operator.op_code;

	     if op_code = loop
	     then do;
		call check_aggregate((p -> operand(1)));
		return;
		end;

	     if op_code = join
	     then do;
		do i = 1 to p -> operator.number;
		     call check_aggregate((p -> operand(i)));
		     end;
		return;
		end;

	     if p -> operator.number = 0 then return;
	     if p -> operand(1) = null then return;
	     p = p -> operand(1);
	     if p -> node.type ^= reference_node then return;
	     s = p -> reference.symbol;
	     if s -> node.type ^= symbol_node then return;

	     if s -> symbol.temporary
	     then if s -> symbol.member | s -> symbol.dimensioned | s -> symbol.structure | s -> symbol.arg_descriptor
		then do;
		     do  while(s -> symbol.father ^= null);
			s = s -> symbol.father;
			end;

		     if s -> symbol.initial = null
			then call stack_temp$assign_aggregate(s);
		     end;

	     end /* check_aggregate */;

can_do_andnot: proc(p_o) returns(bit(1) aligned);

/* Sees whether a = a & ^ b; can be done in one instruction. */

dcl	     (o,p_o) ptr;	/* operator which might be not_bits */

dcl	     p2 ptr;
dcl	     useless bit(1) aligned;

	     o = p_o;

	     if op_code = and_bits
	      & o -> operator.op_code = not_bits
	      & o -> operand(1) -> reference.ref_count <= 1
	      & ^ o -> operand(1) -> reference.evaluated
	     then do;
		p2 = o -> operand(2);

		if p2 -> node.type = reference_node
		then do;
		     p2 = prepare_operand(p2,0,useless);	/* set reference.aliasable */
		     p2 -> reference.data_type = 0;		/* for future prepare_operand call */

		     if overlaps(rand(1),p2)
			then return("0"b);
		     end;

		return("1"b);
		end;

	     return("0"b);

	     end /* can_do_andnot */;
end;
