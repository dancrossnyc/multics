/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* this procedure compiles string expressions

   Initial Version:  5 October, 1968 by BLW 
	Modified:  4 September 1971 by BLW for Version II
	Modified: 25 November 1972 by BLW
	Modified:	4 June 1973 by RAB for EIS
	Modified:	2 November 1975 by RAB to check for p3 in a
	Modified:	1 April 1979 by RAB to improve code generated when
		expression lengths are the same, and to add commentary
		on compiling string expressions.
	Modified:	20 August 1979 by RAB to improve code generated
		for a & ^ b, where a and b are long strings.
	Modified:	21 August 1979 by RAB to use check_lengths for andnot and
		to fix a bug in check_lengths.
	Modified:	30 March 1980 by RAB for reference.aligned_for_store_ref.
		See prepare_operand for details.	*/

string_op: proc(node_pt,refs,p_code);

dcl	node_pt	ptr,		/* points at operator node */
	refs(3) 	ptr,		/* ptrs to reference nodes for operands */
	p_code	fixed bin(15);	/* encodes local context of operator */

dcl	(cg_stat$double_temp,cg_stat$long_string_temp) ptr ext static,
	cg_stat$for_test_called bit(1) ext static;

dcl	(p,p1,p2,p3,q2,q3,ref(3) defined(refs)) ptr,
	for_test bit(1) aligned,
	doing_andnot bit(1) aligned,
	code fixed bin(2),
	atom(2:3) bit(1) aligned,
	(s2,s3,op,k,l_op,load_double,op_code,n,which_andnot) fixed bin(15);

dcl	load entry(ptr,fixed bin(15)),
	c_a entry(fixed bin(31),fixed bin) returns(ptr),
	aq_man$clear_q entry,
	string_temp entry(ptr,ptr,ptr) returns(ptr),
	expmac$eis entry(fixed bin(15),ptr),
	expmac$zero entry(fixed bin(15)),
	expmac entry(fixed bin(15),ptr),
	expmac$one entry(fixed bin(15),ptr,fixed bin(15)),
	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr),
	adjust_ref_count entry(ptr,fixed bin),
	compile_exp entry(ptr),
	(compile_exp$save,compile_exp$save_exp) entry(ptr) returns(ptr);

dcl	(bit,fixed,min,null,string,substr) builtin;

dcl (	and		init(1),
	not		init(4)) fixed bin int static;

dcl (	era		init(52),
	move_not_bits	init(335),
	comp_bits		init(148),
	move_xor		init(341),
	ora		init(46),
	move_or		init(304),
	ana		init(40),
	and_for_test	init(615),
	move_and		init(264),
	move_andnot(0:1)	init(391,392),
	test_not		init(338),
	test_xor		init(344),
	test_or		init(331),
	test_and		init(267),
	test_andnot(0:1)	init(261,262),
	staq		init(6)) fixed bin(15) int static;

%include cgsystem;
%include reference;
%include operator;
%include machine_state;
%include op_codes;
%include nodes;

	/*  ON COMPILATION OF STRING EXPRESSIONS

	   Short string expressions (those of constant length <= 2 words) are
	   evaluated in the A or the AQ and present no problems of special
	   interest.

	   Long string expressions must be evaluated in string temporaries
	   which are allocated by string_temp.  There are 2 types of string
	   temps -- (1) those that are allocated in the stack at compile-
	   time like short temps, (2) those that are allocated by stack
	   extension at runtime.  string_temp decides which type of string
	   temporary to use.  The first type of temp is used if the reference
	   count of operand(1) is greater than 1 and it has a constant length.
	   Otherwise, a stack extension is used.  A  temp acquired by stack
	   extension is recognized by having reference.value_in.string_aq ON
	   (in which case, it is considered to be in the string aq) or by having
	   reference.address_in.storage ON.

	   string_temp may try to save on execution time by reusing or extending
	   previously allocated stack extension temporaries.  If operand(1)
	   requires a stack extension, operand(2) is in the string aq, and the
	   relation between the lengths of operand(2) and operand(3) is known
	   at compile-time (or one of the operands is short), then string_temp
	   will reuse operand(2)'s temp if the length of operand(1) and operand(2)
	   is the same, or extend operand(2)'s temp otherwise.  IF the previously
	   mentioned conditions are not satisfied, new temporary space must be
	   allocated.

	   When compile_exp is called for a long string expression, the location
	   of the string temp is not saved in storage.  When compile_exp$save or
	   compile_exp$save_exp is called for a long string expression and the
	   temp has been acquired by stack extension, the address of the temp is
	   saved in storage after expression evaluation.  This allows one to find
	   the temp if new stack extensions are made.  After calling compile_exp,
	   compile_exp$save, or compile_exp$save_exp on a long string expression,
	   the result reference count is left unchanged.

	   When string_op is processing a long string_expression,
	   it may call compile_exp for at most one long string expression, since
	   evaluating the other may cause other stack extensions.  compile_exp
	   must not be called  if other activity may affect the string aq or PR2.
	   In this latter case, compile_exp$save[_exp] must be called.  compile_exp
	   is also not called unless there is a chance that string_temp will be able
	   to reuse or extend an existing temp.
*/


begin:	p = node_pt;
	q2 = p -> operand(2);
	code = p_code;

	op_code = fixed(substr(p -> operator.op_code,6,4),4);

	p1 = ref(1);
	p2 = ref(2);

	if op_code ^= not
	then do;
	     q3 = p -> operand(3);
	     p3 = ref(3);
	     end;

	for_test = cg_stat$for_test_called;
	doing_andnot = "0"b;

	/* encode left size and dispatch on operator */

	if p2 -> reference.long_ref | p2 -> reference.varying_ref then s2 = 3;
	else s2 = 2*fixed(p2 -> reference.c_length > bits_per_word,1);

	goto switch(op_code);

	/* have not operation */

switch(4):
not_op:	if code ^= 0
	then 

	     /* atm, generate move-not_bits for long atm or
	        load short or double operand */

	     if s2 <= 2
	     then do;
		call load(p2,s2);
complement:	call expmac$one((era),c_a((p2 -> reference.c_length),5),s2);
		end;
	     else do;
comp_long:	p1 = string_temp(p,p2,null);
		if for_test then l_op = test_not; else l_op = move_not_bits;
		call expmac$eis(l_op,p2);
		end;

	else do;

	     /* exp, compile exp then generate comp_bits op
	        or actually complement bits in ac */

	     call compile_exp(q2);
	     if s2 > 2 then go to comp_long;
	     else goto complement;
	     end;

	goto string_done;

	/* Operation is EXCLUSIVE OR */

switch(3):
xor_op:	op = era;
	call check_lengths;
	if for_test then l_op = test_xor; else l_op = move_xor;
	load_double = 2;
	goto set_s3;

	/* operation is OR */

switch(2):
or_op:	op = ora;
	call check_lengths;
	if for_test then l_op = test_or; else l_op = move_or;
	load_double = 2;
	goto set_s3;

	/* operation is AND */

switch(1):
and_op:	if for_test
	then do;
	     op = and_for_test;
	     l_op = test_and;
	     end;
	else do;
	     op = ana;
	     l_op = move_and;
	     end;

set_s3:	if p3 -> reference.long_ref | p3 -> reference.varying_ref then s3 = 3;
	else s3 = 2*fixed(p3 -> reference.c_length > bits_per_word,1);

	if op_code = and
	then do;
	     load_double = 2*fixed(s2 = s3,1);

	     /* See if we have a & ^ b.  If we do, we can shorten
	        3 instructions to 2 */

	     if can_do_andnot(which_andnot)
	     then do;
		atom(2) = code >= 2;
		atom(3) = mod(code,2) ^= 0;

		if which_andnot = 0
		     then call setup_andnot(p2,q2,s2,atom(2));
		     else call setup_andnot(p3,q3,s3,atom(3));

		code = fixed(atom(2) || atom(3), 2);

		call check_lengths;

		if for_test
		     then l_op = test_andnot(which_andnot);
		     else l_op = move_andnot(which_andnot);

		doing_andnot = "1"b;
		end;
	     end;

	/* at this point the left and right sizes are coded in
	   s2 and s3 as 0: short, 2: double, 3: long.  now
	   dispatch on context of operator node */

	goto ao_sw(code);

	/* operation is atom-atom, reverse operands if
	   right operand longer than left */

ao_sw(3):
ao_aa:	if p3 -> reference.value_in.a then call flip_rands;

	if s2 < s3 then call flip_rands;

	/* check for long operand(s) */

	if s2 > 2 then goto ao_aa_l;

	/* at this point right operand is shorter or same,
	   s3 = 0 for single, s3 = 2 for double */

	call load(p2,load_double);
ao_aa_1:	if op_code = and & s3 < s2 then call aq_man$clear_q;
	call expmac$one(op,p3,s3);

	goto string_done;

	/* left (and possible right) operand is long */

ao_aa_l:	p1 = string_temp(p,p2,p3);

ao_aa_l1:	if s3 > 2 | op_code = and | ^ p1 -> reference.aligned_for_store_ref | for_test 
	then do;

	     /* right operand is long */

	     call long_op;
	     end;
	else do;

	     /* right operand is short, generate
	        xxsa or xxsa_xxsq macro */

	     call load(p3,2);
ao_aa_l3:
	     if p1 -> reference.temp_ref
	     then if ^ p1 -> reference.shared
		then p1 -> reference.ref_count = p1 -> reference.ref_count + 1;
	     call expmac$one(op+3,p1,s3);
	     machine_state.indicators = -1;
	     end;

	goto string_done;

	/* operation is atom-expression, reverse */

ao_sw(2):
ao_ae:	call flip_rands;

	/* operation is expression-atom */

ao_sw(1):
ao_ea:	if s2 > 2
	then do;

	     /* left is long, compile, then treat like
	        atom-atom case */

	     if p1 -> reference.length = null
	      | (p2 -> reference.length = p3 -> reference.length
	         & ^ p2 -> reference.varying_ref
	         & ^ p3 -> reference.varying_ref)
		then call compile_exp(q2);
		else p2 = compile_exp$save(q2);
	     go to ao_aa_l;
	     end;

	/* left ^long, check for right long */

	if s3 > 2
	then do;

	     /* if right is really an expression, save value and treat
	        like atom-atom case */

	     p2 = compile_exp$save_exp(q2);
	     call flip_rands;
	     goto ao_aa_l;
	     end;

	/* neither operand is long */

	if ^ p3 -> reference.aligned_ref then p3 = compile_exp$save(p3);
	call compile_exp(q2);
	if s2 < s3 | (s3 ^= s2 & op_code = and) then call aq_man$clear_q;
	call expmac$one(op,p3,s3);

	goto string_done;

	/* operation is expression-expression */

ao_sw(0):
ao_ee:	if s2 < s3 then call flip_rands;

	/* at this point, right operand is shorter */

	if s3 > 2 then goto ao_ee_1;

	/* right operand is not long, left may be */

	if s2 > 2 then go to ao_ee_1;

	/* left is also not long */

	p3 = compile_exp$save(q3);
	call compile_exp(q2);
	goto ao_aa_1;

	/* both are long, check for the situation where the relation between
	   the lengths is unknown at compile-time */

ao_ee_1:	if p2 -> reference.length ^= p3 -> reference.length
	 | p2 -> reference.varying_ref
	 | p3 -> reference.varying_ref
	then do;

	     /* compile right expression, then save temp */

	     p3 = compile_exp$save(q3);

	     /* compile left expression and save pointer */

	     p2 = compile_exp$save(q2);

	     /* since make_addressable will recognize the
	        altered values of p2 and p3, we can treat like
	        atom-atom case now */

	     goto ao_aa_l;
	     end;

	if p2 -> reference.c_length < p3 -> reference.c_length then call flip_rands;

	/* both strings are constant or equal size, size2 >= size3 */

	p3 = compile_exp$save(q3);
	call compile_exp(q2);
	p1 = string_temp(p,p2,p3);
	call long_op;

	/* string operator done */

string_done:
	if ^ p1 -> reference.long_ref
	     then a_reg.size = p1 -> reference.c_length;
	return;

can_do_andnot: proc(which_andnot) returns(bit(1) aligned);

/* determines whether we have a & ^ b, which can be optimized. */

dcl	     which_andnot fixed bin(15);	/* 0, if operand(2) is not_bits
					   1, if operand(3) is not_bits (output) */

dcl	     i fixed bin;
dcl	     q ptr;

	     if p1 -> reference.long_ref
	     then do i = 2 to 3;
		q = p -> operand(i);
		if q -> node.type = operator_node
		then if q -> operator.op_code = not_bits
		then if ^ q -> operand(1) -> reference.evaluated
		then if q -> operand(1) -> reference.ref_count <= 1
		then do;
		     which_andnot = i - 2;
		     return("1"b);
		     end;
		end;

	     return("0"b);

	end /* can_do_andnot */;

setup_andnot:  proc(p_new,q,s,atom);

/* sets up string_op vars for andnot */

dcl	     p_new ptr,	/* new ref node */
	     q ptr,	/* new opnd */
	     s fixed bin(15),	/* new length code */
	     atom bit(1) aligned;

	     q = p -> operand(which_andnot+2) -> operand(2);

	     p_new = prepare_operand(q,1,atom);

	     if p_new -> reference.long_ref | p_new -> reference.varying_ref
		then s = 3;
		else s = 2 * fixed(p_new -> reference.c_length > bits_per_word, 1);

	     call adjust_ref_count((p -> operand(which_andnot+2) -> operand(1)), -1);

	     end /* setup_andnot */;

flip_rands:    proc;

dcl	     p ptr, s fixed;

	     p = p2; p2 = p3; p3 = p;
	     p = q2; q2 = q3; q3 = p;
	     s = s2; s2 = s3; s3 = s;

	     if doing_andnot
	     then do;
		which_andnot = mod(which_andnot+1,2);
		if for_test
		     then l_op = test_andnot(which_andnot);
		     else l_op = move_andnot(which_andnot);
		end;

	     end /* flip_rands */;


check_lengths:	proc;

	     if p1 -> reference.long_ref
	     then if for_test
		then if p2 -> reference.length ^= p3 -> reference.length
		      | p2 -> reference.c_length ^= p3 -> reference.c_length
		      | p2 -> reference.varying_ref
		      | p3 -> reference.varying_ref
		     then for_test, cg_stat$for_test_called = "0"b;

	     end /* check_lengths */;


long_op:	     proc;

	     call expmac$eis(l_op,p3);

	     end /* long_op */;

	end /* string_op */;
