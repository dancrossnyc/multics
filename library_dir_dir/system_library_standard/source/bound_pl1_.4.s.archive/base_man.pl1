/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1983 *
   *                                                         *
   *********************************************************** */


/* format: style3 */
/* Procedure to manage base registers

   The contents of the base registers are determined by the value
   of the type field as follows (P = variable field, N = constant field)

          0         EMPTY
          1         value of reference specified by P
          2         address of reference specified by P
          3         value of ptr contained at N in current stack
          4         ptr to display for block N levels back
          5         ptr to linkage section
          6         arg ptr for block P
          7         desc ptr for block P
          8         ptr thru link with offset N
          9         ptr to arg N in block P
         10         ptr to desc N in block P
         11         ptr to data of ext ctl variable with link N
         12         ptr to desc of ext ctl variable with link N
         13         ptr to static section
         14         ptr through ptr in static with offset N

   Initial Version: 16 April 1971 by BLW
          Modified:  11 May 1973 by RAB  for multiple base regs
          Modified: 19 June 1973 by RAB for EIS
          Modified: 19 July 1974 by RAB to load arg ptr in any reg
          Modified: 4 June 1975 by RAB for separate_static
          Modified: 20 August 1976 by RAB to fix 1512
          Modified: 22 January 1979 by RAB to fix 1814 (ERROR 313 for multiple
                    occurrences of based packed qualifier in if stmt)
                    prepare_operand now sets reference.evaluated after call to
                    base_man$load_packed
          Modified: 23 April 1979 by PCK to implement 4-bit decimal
          Modified: 2 September 1982 by BIM for load_aq_var
	Modified: June 1983 BIM for ref count fixes.
*/

base_man$load_any_var:
     proc (code, var, base3);

dcl       code                fixed bin,                    /* how to load */
          var                 ptr,                          /* ptr to ref */
          base3               bit (3) aligned;              /* set to base loaded */

dcl       (i, j, k, n, text_pos, type, ca_code)
                              fixed bin,
          (vp, p, q)          ptr,
          (
          cg_stat$cur_level,
          cg_stat$text_pos,
          cg_stat$last_base_used
          )                   fixed bin ext,
          cg_stat$separate_static
                              bit (1) aligned ext static,
          (
          cg_stat$text_base,
          cg_stat$cur_statement
          )                   ptr ext static,
          (addressable, atomic)
                              bit (1) aligned,
          eis                 bit (1) aligned,
          lock                bit (1) aligned init ("0"b),
          tag_hold            bit (6) aligned,
          fract_offset        fixed bin,
          xr                  fixed bin (3),
          base                bit (3) aligned,
          full_word           bit (36) aligned based,
          macro               fixed bin (15),
          load                entry (ptr, fixed bin),
          prepare_operand     entry (ptr, fixed bin, bit (1) aligned) returns (ptr),
          copy_temp           entry (ptr) returns (ptr),
          base_to_core        entry (fixed bin, ptr),
          base_man$load_var   entry (fixed bin, ptr, fixed bin),
          base_man$load_display
                              entry (fixed bin, bit (3) aligned),
          base_man$load_linkage
                              entry (bit (3) aligned),
          base_man$load_arg   entry (fixed bin, ptr, bit (3) aligned),
          base_man$load_any_var
                              entry (fixed bin, ptr, bit (3) aligned),
          base_man$load_link_indirect
                              entry (fixed bin, bit (12) aligned, bit (3) aligned),
          xr_man$load_any_const
                              entry (fixed bin, fixed bin (3)),
          xr_man$add_any_const
                              entry (fixed bin, fixed bin (3), fixed bin (3)),
          m_a                 entry (ptr, bit (2) aligned),
          c_a                 entry (fixed bin, fixed bin) returns (ptr),
          compile_exp$save    entry (ptr) returns (ptr),
          get_reference       entry () returns (ptr),
          adjust_ref_count    entry (ptr, fixed bin),
          expmac              entry (fixed bin (15), ptr),
          expmac$zero         entry (fixed bin (15)),
          error               entry (fixed bin, ptr, ptr);

declare   new_base            bit (3) aligned;
declare   a_q_aq              fixed bin;                    /* Zero, one, two */
declare   want_a_PR           bit (1) aligned init ("1"b);

dcl       (abs, addrel, bit, fixed, mod, null, string, substr)
                              builtin;

dcl       (
          first_base          init (3),
          last_base           init (6)
          )                   fixed bin (3) int static options (constant);

dcl       (
          load_base           (0:1, 6) init (60, 361, 618, 619, 620, 621,
                                                            /* unpacked */
                              636, 637, 638, 639, 640, 641),/* packed */
          store_base          (23:24, 6) init (61, 409, 622, 623, 624, 625,
                                                            /* unpacked */
                              630, 631, 632, 633, 634, 635) /* packed */
          )                   fixed bin (15) int static options (constant);


declare   e_a_q_aq_mac        (0:2) init (370, 371, 376) fixed bin (15) int static options (constant);

dcl       add_base            (3) init (643, 736, 644) fixed bin (15) int static options (constant);

dcl       (
          load_bp             init (60),
          store_bp            init (61),
          load_lp             init (361),
          packed_into_bp      init (584),
          stfx1               init (15),
          load_link_ptr       init (283)
          )                   fixed bin (15) int static options (constant);

dcl       stack_info          (0:1) fixed bin int static options (constant) init (26,
                                                            /* stack offset of arg list */
                              34);                          /* stack offset of desc list */

dcl       link_info           (0:1) fixed bin int static options (constant) init (36,
                                                            /* stack offset of linkage ptr */
                              28);                          /* stack offset of static ptr */

dcl       display_offset      fixed bin int static init (32) options (constant);

%include op_codes;
%include operator;
%include block;
%include machine_state;
%include symbol;
%include cg_reference;
%include bases;
%include relocation_bits;
%include nodes;
%include boundary;
%include cgsystem;

/* This entry handles types 1 -3 and only loads bp */

begin:
          n = code;                                         /* see list of values above */
          j, k = -1;
          want_a_PR = "1"b;
          go to load_any_var_load_aq_common;

load_aq_var:
     entry (var);

/* ASSUMPTIONS: this will only be called with pointer values */

          n = 1;
          j, k = -1;
          want_a_PR = "0"b;
          a_q_aq = 2;                                       /* AQ */
          go to load_any_var_load_aq_common;

load_a_var:
     entry (var);

          n = 1;
          j, k = -1;
          want_a_PR = "0"b;
          a_q_aq = 0;
          go to load_any_var_load_aq_common;

load_q_var:
     entry (var);

          n = 1;
          j, k = -1;
          want_a_PR = "0"b;
          a_q_aq = 1;

load_any_var_load_aq_common:
          vp = var;

/* Search the registers to see if we already have the registers */

          do i = 1 to last_base;
               type = base_regs (i).type;
               if type = 0
               then k = i;
               else if type = n                             /* contains the address type */
               then if base_regs (i).variable = vp
                    then do;
                              if ^want_a_PR
                              then go to PR_to_AQ;
                              if ^vp -> reference.shared
                              then call adjust_ref_count (vp, -1);
                              base3 = bases (i);
                              go to reset_perm;
                         end;
          end;

/* We must load a register */

          call when_to_m_a;
          if ^want_a_PR
          then go to load_AQ;
          i = get_free_base ();
          base3 = bases (i);
          go to l1a;

PR_to_AQ:                                                   /* come here with the PR number in i */
          string (vp -> address) = ""b;
          vp -> address.base = bases (i);                   /* fix the reference */
          vp -> address.ext_base = "1"b;
          vp -> reference.perm_address = "1"b;
          vp -> reference.relocation = ""b;                 /* Has to be absolute, its XXXX prn|0 */
          call expmac (e_a_q_aq_mac (a_q_aq), vp);
          go to AQ_finish;

load_AQ:
          if ^addressable
          then do;
                    call m_a (vp, "00"b);
                    vp -> reference.perm_address = "1"b;
               end;

          if substr (vp -> address.tag, 1, 2)               /* Is there a star ? */
          then do;
                    if ^vp -> reference.shared
                    then vp -> reference.ref_count = vp -> reference.ref_count + 1;
                    call base_man$load_any_var (n, var, new_base);
                    i = which_base (bin (new_base, 3));
                    go to PR_to_AQ;
               end;

          substr (vp -> address.tag, 1, 2) = "01"b;         /* convert to RI mod */
          call expmac (e_a_q_aq_mac (a_q_aq), vp);

AQ_finish:
          vp -> reference.perm_address = "0"b;              /* force m_a to recalculate, since we may have patched the tag */
          return;

base_man$load_any_var_and_lock:
     entry (code, var, base3);

          lock = "1"b;
          go to begin;


base_man$load_var_and_lock:
     entry (code, var, which);

          lock = "1"b;


base_man$load_var:
     entry (code, var, which);

dcl       which               fixed bin;                    /* which base to load */

          i = which;
          j, k = -1;

          vp = var;
          n = code;
          call when_to_m_a;

/* See if item is already in a pointer register */

          do k = 1 to last_base;
               if base_regs (k).type = n
               then if base_regs (k).variable = vp
                    then if k = i
                         then do;
                                   if ^vp -> reference.shared
                                   then call adjust_ref_count (vp, -1);
                                   go to reset_perm;
                              end;
                         else j = k;
          end;

/* Section to load the pointer register */


          do;
               cg_stat$last_base_used = i;
l1a:
               macro = load_base (0, i);

/* If we have the item in another pointer register, move it over */

               if j >= 0
               then do;
                         call change_base (i);
                         p = c_a (0, 4);
                         p -> address.base = bases (j);
                         call expmac (macro, p);
                         if ^vp -> reference.shared
                         then call adjust_ref_count (vp, -1);
                         if n = 2
                         then do;
                                   vp -> reference.address_in.b (i) = "1"b;
                                   go to l2;
                              end;
                         else go to l1b;
                    end;

/*  To get the item, we must make it addressable */

               if ^addressable
               then do;
                         call m_a (vp, "0"b || eis);
                         vp -> reference.perm_address = "1"b;
                    end;

               call change_base (i);


               if n = 2
               then do;

                         if eis
                         then do;                           /* mask out the tag */
                                   tag_hold = vp -> address.tag & "001111"b;
                                   vp -> address.tag = vp -> address.tag & "010000"b;
                              end;

                         call expmac (macro, vp);

                         if vp -> reference.units ^= word_
                         then do;
                                   macro = add_base (vp -> reference.units);
                                   p = get_reference ();
                                   string (p -> reference.address) = bases (i);
                                   p -> address.ext_base = "1"b;
                                   p -> reference.relocation = "0"b;
                                   p -> reference.perm_address = "1"b;

                                   if eis
                                   then do;
                                             if vp -> reference.c_f_offset ^= 0
                                             then call add_cfo;
                                             p -> address.tag = tag_hold;
                                        end;
                                   else do;
                                             fract_offset =
                                                  mod (vp -> reference.c_offset, units_per_word (vp -> reference.units));
                                             if fract_offset < 0
                                             then fract_offset = fract_offset + units_per_word (vp -> reference.units);
                                             call xr_man$load_any_const (fract_offset, xr);
                                             p -> address.tag = "001"b || bit (xr, 3);
                                        end;

                                   if p -> address.tag
                                   then call exp_addmac;
                              end;

                         if vp -> reference.symbol ^= null
                         then do;
                                   string (vp -> reference.address) = bases (i);
                                   vp -> address.ext_base = "1"b;
                                   vp -> reference.relocation = "0"b;
                                   vp -> reference.c_f_offset = 0;
                                   vp -> reference.ic_ref = "0"b;
                              end;

                         vp -> reference.address_in.b (i) = "1"b;

                         goto l2;
                    end;

               if substr (vp -> address.tag, 1, 2)
               then do;
                         if ^vp -> reference.shared
                         then vp -> reference.ref_count = vp -> reference.ref_count + 1;
                         call expmac (macro, vp);
                         string (vp -> reference.address) = bases (i);
                         vp -> address.ext_base = "1"b;
                         vp -> address.tag = "010000"b;     /* * */
                         vp -> reference.relocation = "0"b;
                    end;
               else substr (vp -> address.tag, 1, 2) = "01"b;
                                                            /* convert to RI mod */

               call expmac (macro, vp);

l1b:
               vp -> reference.value_in.b (i) = "1"b;
l2:
               base_regs (i).variable = vp;

               base_regs (i).type = n;
               if lock
               then base_regs (i).locked = base_regs (i).locked + 1;
               else base_regs (i).locked = 0;

          end;

reset_perm:
          if vp -> reference.symbol ^= null
          then vp -> reference.perm_address = "0"b;

used_i:
          base_regs (i).used = cg_stat$text_pos;
          return;

base_man$load_stack_indirect:
     entry (code, base2);

          n = code;

          k = -1;
          do i = 1 to last_base;
               type = base_regs (i).type;
               if type = 0
               then k = i;
               else if type = 3
               then if base_regs (i).constant = n
                    then go to l8;
          end;

          i = get_free_base ();


          call change_base (i);

          vp = c_a (n, 14);                                 /* sp|n,* */
          call expmac ((load_base (0, i)), vp);

          base_regs (i).type = 3;
          base_regs (i).constant = n;

l8:
          base2 = bases (i);
          goto used_i;

base_man$load_display:
     entry (frames, base2);

dcl       frames              fixed bin,                    /* number of frames */
          base2               bit (3) aligned;              /* set to base loaded */

dcl       (fmin, nframes)     fixed bin;

          j, k = -1;
          n, fmin = frames;

/* Search for a register with a display pointer already loaded */

          do i = 1 to last_base;
               type = base_regs (i).type;
               if type = 0
               then k = i;
               else if type = 4
               then do;
                         if base_regs (i).constant = n
                         then go to l6;
                         if base_regs (i).constant < n
                         then do;
                                   nframes = n - base_regs (i).constant;
                                   if nframes < fmin
                                   then do;
                                             fmin = nframes;
                                             j = i;
                                        end;
                              end;
                    end;
          end;

          i = get_free_base ();

/* Get first pointer in the chain */

          call change_base (i);

          vp = c_a (display_offset, 14);                    /* sp|32,* */
          if j > 0
          then vp -> address.base = bases (j);
          macro = load_base (0, i);

          call expmac (macro, vp);

/* If necessary, follow the chain */

          if fmin > 1
          then do;
                    vp -> address.base = bases (i);
                    do j = 2 to fmin;
                         call expmac (macro, vp);
                    end;
               end;


          base_regs (i).type = 4;
          base_regs (i).constant = frames;

l6:
          base2 = bases (i);
          go to used_i;


base_man$load_static:
     entry (base1);

          if cg_stat$separate_static
          then do;
                    n = 13;
                    j = 1;
                    ca_code = 4;
                    go to link_join;
               end;


base_man$load_linkage:
     entry (base1);

dcl       base1               bit (3) aligned;              /* set to base loaded */

          n = 5;
          j = 0;
          ca_code = 14;
link_join:
          k = -1;

/* search for a register with ptr already loaded */

          do i = 2 to last_base;
               type = base_regs (i).type;
               if type = 0
               then k = i;
               else if type = n
               then go to set_base1;
          end;

/* we prefer to use the lp */

          if base_regs (2).type < 5
          then i = 2;
          else i = get_free_base ();

/* flush register i */

          call change_base (i);

/* load the register from the correct offset */

          vp = c_a ((link_info (j)), ca_code);
          call expmac ((load_base (j, i)), vp);
          base_regs (i).type = n;

set_base1:
          base1 = bases (i);
          base_regs (i).used = cg_stat$text_pos;
          return;


base_man$load_arg:
     entry (code, blk_pt, base3);

dcl       blk_pt              ptr;                          /* points at a blk node */

          vp = blk_pt;

          j = code + 6;

          do i = 1 to last_base;
               if base_regs (i).type = j
               then if base_regs (i).variable = vp
                    then go to l7;
          end;

          n = cg_stat$cur_level - vp -> block.level;
          if n = 0
          then base = sp;
          else call base_man$load_display (n, base);

          call setk;

          i = get_free_base ();

          if vp -> block.no_stack
          then n = vp -> block.entry_info + 2 + 2 * code;
          else n = stack_info (code);

          call change_base (i);

          p = c_a (n, 14);
          p -> address.base = base;
          call expmac ((load_base (0, i)), p);

          base_regs (i).type = j;
          base_regs (i).variable = vp;

l7:
          base3 = bases (i);
          goto used_i;

base_man$load_link_indirect:
     entry (poff, reloc, base3);

dcl       (poff, off)         fixed bin,                    /* offset in linkage or static section */
          reloc               bit (12) aligned;             /* relocation to use */

dcl       multiple            fixed bin;

          off = poff;

          if reloc = rc_lp15
          then do;                                          /* link indirect */
                    n = 8;
                    j = 9;
               end;
          else do;                                          /* static indirect */
                    n = 14;
                    j = 15;
               end;

          do i = 1 to last_base;
               if base_regs (i).type = n
               then if base_regs (i).constant = off
                    then go to l10;
          end;

          vp = c_a (off, j);

          call setk;

          i = get_free_base ();

          call change_base (i);


          call expmac ((load_base (0, i)), vp);

          base_regs (i).type = n;
          base_regs (i).constant = off;

l10:
          base3 = bases (i);
          go to used_i;

base_man$load_controlled:
     entry (poff, desc, base3);

dcl       desc                fixed bin;                    /* zero if data, otherwise desc */

          n = 11 + fixed (desc ^= 0, 1);
          off = poff;

          do i = 1 to last_base;
               if base_regs (i).type = n
               then if base_regs (i).constant = off
                    then go to l10;
          end;

          call base_man$load_link_indirect (off, (rc_lp15), base);

          call setk;

          i = get_free_base ();

          call change_base (i);

          p = c_a (desc, 14);
          p -> address.base = base;
          call expmac ((load_base (0, i)), p);

          base_regs (i).type = n;
          base_regs (i).constant = off;

          goto l10;

base_man$load_arg_ptr:
     entry (code, blk_pt, argno, base4);

dcl       argno               fixed bin,                    /* which arg */
          base4               bit (3) aligned;              /* set to base loaded */

          vp = blk_pt;

          n = code + 9;

          do i = 1 to last_base;
               type = base_regs (i).type;
               if type = n
               then if base_regs (i).variable = vp
                    then if base_regs (i).constant = argno
                         then go to l9;
          end;

          call base_man$load_arg (code, blk_pt, base);

          call setk;

          i = get_free_base ();

          call change_base (i);

          p = c_a (2 * (argno - code), 14);
          p -> address.base = base;

          call expmac ((load_base (0, i)), p);

          base_regs (i).type = n;
          base_regs (i).variable = vp;
          base_regs (i).constant = argno;

l9:
          base4 = bases (i);
          goto used_i;

base_man$store_ptr_to:
     entry (pa, pb);

/* this entry is called to store a ptr to reference pa in
             reference pb */

dcl       (pa, pb)            ptr;

          do i = 1 to last_base;
               if base_regs (i).type = 2
               then if base_regs (i).variable = pa
                    then do;
                              if ^pa -> reference.shared
                              then call adjust_ref_count (pa, -1);
                              go to store;
                         end;
          end;

          i = 1;

          call base_man$load_var (2, pa, i);

store:
          if pb -> reference.symbol ^= null
          then call base_to_core (i, pb);
          else do;
                    call expmac ((store_base (23, i)), pb);
                    if pb -> reference.temp_ref
                    then pb -> reference.value_in.storage = "1"b;
               end;

          return;

base_man$update_base:
     entry (code, var, which);

/* This entry is called to update the contents of the base register state */

          i = which;
          call change_base (i);

          vp = var;
          n = code;

          if n = 2
          then do;
                    vp -> reference.address_in.b (i) = "1"b;
                    goto l2;
               end;

          if n = 1
          then goto l1b;

          if n >= 5 & n <= 7
          then do;
                    base_regs (i).type = n;
                    base_regs (i).variable = vp;
                    go to used_i;
               end;
          else base_regs (i).type = 0;
          return;

base_man$load_packed:
     entry (pa, where);

/* This entry is called when an assigment from packed ptr to unpacked ptr is
             found as the qualifier of a reference node, or when such an assignment is
             found elsewhere.  The packed ptr is loaded into any register. */

dcl       where               fixed bin;

          n = 1;

          p = pa;
          vp = p -> operand (1);

          if vp -> reference.shared & vp -> reference.symbol -> symbol.temporary
          then vp, p -> operand (1) = copy_temp (vp);

          vp = prepare_operand (vp, 1, atomic);


          q = prepare_operand ((p -> operand (2)), 1, atomic);

          if ^atomic
          then q = compile_exp$save ((p -> operand (2)));

          k = -1;
          do i = first_base to last_base;
               if base_regs (i).type = 0
               then k = i;
               else if q -> reference.temp_ref
               then if base_regs (i).type = 1
                    then if base_regs (i).variable = q
                         then do;
                                   where = i;
                                   call adjust_ref_count (q, -1);
                                   go to used_i;
                              end;
          end;

          if q -> reference.temp_ref
          then if ^q -> reference.value_in.storage
               then if q -> reference.value_in.q
                    then do;
                              q -> reference.ref_count = q -> reference.ref_count + 1;
                              q -> reference.store_ins = bit (cg_stat$text_pos, 18);
                              call expmac ((stfx1), q);
                              q -> reference.value_in.storage = "1"b;
                         end;
                    else call error (315, cg_stat$cur_statement, q);

          p = vp;
          vp = q;

          call when_to_m_a;
          i = get_free_base ();

          where = i;

          call change_base (i);

          call expmac ((load_base (1, i)), vp);

          vp = p;
          go to l1b;


base_man$lock:
     entry (lbase);
dcl       lbase               fixed bin;
          base_regs (lbase).locked = base_regs (lbase).locked + 1;
          return;

base_man$unlock:
     entry (lbase);
          base_regs (lbase).locked = base_regs (lbase).locked - 1;
          return;



/* */
when_to_m_a:
     proc;
dcl       p                   ptr;

/* Decide whether we must make vp addressable before looking for a free base
   register and loading it */

          eis = "0"b;
          addressable = ^vp -> reference.no_address & vp -> reference.perm_address;
          if string (vp -> reference.value_in.b)
          then return;
          if string (vp -> reference.address_in.b)
          then return;

          if n = 2
          then if vp -> reference.units ^= word_
               then if ^vp -> reference.modword_in_offset
                    then eis = "1"b;

          if addressable
          then return;

          do p = vp -> reference.qualifier repeat p -> reference.qualifier while (p ^= null);
               if p -> node.type = temporary_node
               then return;
               if p -> node.type = operator_node
               then do;
                         if p -> operator.op_code = param_ptr
                         then go to call_ma;
                         p = p -> operand (1);
                    end;
               if string (p -> reference.value_in.b)
               then go to call_ma;
               if string (p -> reference.address_in.b)
               then go to call_ma;
               if p -> reference.ref_count > 1
               then do;
call_ma:
                         call m_a (vp, "0"b || eis);
                         vp -> reference.perm_address = "1"b;
                         addressable = "1"b;
                         if k >= first_base
                         then if base_regs (k).type ^= 0
                              then call setk;
                         return;
                    end;
          end;
     end;



/* */
get_free_base:
     proc () returns (fixed bin);

/* If an empty register was found in the scan, use that; otherwise pick a
   register containing a variable with the lowest reference count, priority, and
   least recently used */

dcl       (i, j, cmin, n, pr, pmin, type)
                              fixed bin;
dcl       p                   ptr;
dcl       priority            (14) fixed bin int static init (3, 3, 2, 4, 5, 4, 3, 2, 3, 1, 3, 1, 5, 2);

/* Variable k lives in the outer block */

          if k >= first_base
          then if base_regs (k).locked = 0
               then do;
                         cg_stat$last_base_used = k;
                         return (k);
                    end;

          j = -1;
          cmin = 123456;
          do i = max (cg_stat$last_base_used + 1, first_base) to last_base, first_base to cg_stat$last_base_used;
               if base_regs (i).locked > 0
               then go to try_another;

               type = base_regs (i).type;
               if type = 0
               then do;
hit:
                         cg_stat$last_base_used = i;
                         return (i);
                    end;

               p = base_regs (i).variable;

               if type < 3
               then do;
                         if p = null
                         then go to hit;
                         n = p -> reference.ref_count;

                         if ^p -> reference.shared
                         then if n <= 0
                              then go to hit;
                              else ;
                         else if p -> reference.temp_ref
                         then go to hit;

                         pr = 3;
                    end;
               else do;
                         n = 0;
                         pr = priority (type);
                    end;

               if n < cmin
               then do;
                         cmin = n;
sj:
                         pmin = pr;
                         j = i;
                    end;
               else if n = cmin
               then if pr < pmin
                    then go to sj;
                    else if pr = pmin
                    then if base_regs (i).used < base_regs (j).used
                         then go to sj;
try_another:
          end;

          cg_stat$last_base_used = j;
          return (j);
     end;




/* */

change_base:
     proc (m);

dcl       (m, n, t)           fixed bin,
          p                   ptr;

          n = m;
          p = base_regs (n).variable;
          if p = null
          then return;

          t = base_regs (n).type;

          if t = 2
          then do;
                    p -> reference.address_in.b (n) = "0"b;
                    return;
               end;

          if t ^= 1
          then return;

          p -> reference.value_in.b (n) = "0"b;

          if ^p -> reference.temp_ref
          then return;
          if p -> reference.value_in.storage
          then return;
          if p -> reference.dont_save
          then return;

          if p -> reference.ref_count > 0
          then do;
                    p -> reference.ref_count = p -> reference.ref_count + 1;
                    p -> reference.store_ins = bit (cg_stat$text_pos, 18);
                    call expmac ((store_base (p -> reference.data_type, n)), p);
                    p -> reference.value_in.storage = "1"b;
               end;

     end;                                                   /* */
setk:
     proc;

          k = -1;
          do i = last_base to first_base by -1;
               if base_regs (i).type = 0
               then do;
                         k = i;
                         return;
                    end;
          end;

     end;                                                   /**/
exp_addmac:
     proc;

/* Issues add bits or bytes to pointer macro */

          text_pos = cg_stat$text_pos;

          call expmac (macro, p);

          base_regs (i).changed = text_pos;
          base_regs (i).instruction = addrel (cg_stat$text_base, text_pos) -> full_word;
     end;



add_cfo:
     proc;

/* routine to add in constant_fractional_offset if not already done */

          if substr (tag_hold, 3, 1)
          then do;
                    call xr_man$add_any_const ((vp -> reference.c_f_offset), xr, fixed (substr (tag_hold, 4, 3), 3));
                    tag_hold = "001"b || bit (xr, 3);
               end;
          else do;
                    call xr_man$load_any_const ((vp -> reference.c_f_offset), xr);
                    p -> address.tag = "001"b || bit (xr, 3);
                    call exp_addmac;
               end;
     end;

     end base_man$load_any_var;
