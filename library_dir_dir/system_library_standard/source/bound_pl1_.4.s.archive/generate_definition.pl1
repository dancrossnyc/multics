/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to generate a Multics definition

   Initial Version: 19 August 1972 by BLW	*/

generate_definition: proc(name,class,value);

dcl	name char(*) aligned,	/* symbol for definition */
	class fixed bin(3),		/* class of definition */
	value bit(18) aligned;	/* value of definition */

dcl	(cg_static_$def_base,cg_static_$def_reloc_base) ptr ext,
	cg_static_$def_pos fixed bin(18) ext,
	(cg_static_$last_def,cg_static_$zero_def,cg_static_$seg_def) bit(18) aligned ext;

dcl	(b18,def_pos) bit(18) aligned,
	(def_ptr,def_reloc_ptr) ptr;

dcl	(addrel,bit,fixed,size,string) builtin;

dcl	name_assign entry(char(*) aligned) returns(bit(18) aligned);

dcl	1 reloc(0:2)	aligned based,
	2 left		unal bit(18),
	2 right		unal bit(18);

dcl	rel_code(0:3) aligned bit(18) int static
	init("000000000000010000"b,	/* text */
	     "000000000000010010"b,	/* link 18 */
	     "000000000000010110"b,	/* symbol */
	     "000000000000010101"b);	/* definition */

%include relbts;
%include definition;

	b18 = name_assign(name);

	def_pos = bit(cg_static_$def_pos,18);
	def_ptr = addrel(cg_static_$def_base,def_pos);
	def_reloc_ptr = addrel(cg_static_$def_reloc_base,def_pos);

	if cg_static_$last_def then def_ptr -> definition.backward = cg_static_$last_def;
	else def_ptr -> definition.backward = cg_static_$zero_def;

	addrel(cg_static_$def_base,cg_static_$last_def) -> definition.forward = def_pos;

	def_ptr -> definition.forward = cg_static_$zero_def;

	def_ptr -> definition.new = "1"b;
	def_ptr -> definition.symbol = b18;
	def_ptr -> definition.value = value;

	def_ptr -> definition.class = bit(class,3);

	if class = 3 then cg_static_$seg_def = def_pos;
	else do;
	     def_ptr -> definition.segname = cg_static_$seg_def;
	     def_ptr -> definition.entry = bit(fixed(class = 0,1),1);
	     end;

	string(def_reloc_ptr -> reloc(0)) = rc_dp || rc_dp;
	def_reloc_ptr -> reloc(1).left = rel_code(class);
	string(def_reloc_ptr -> reloc(2)) = rc_dp || rc_dp;

	cg_static_$def_pos = cg_static_$def_pos + 3;
	cg_static_$last_def = def_pos;

	end;
