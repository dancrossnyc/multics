/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to generate a symbol node for a code generator constant

   Initial Version: 13 September 1971 by BLW
	Modified: 27 April 1972 by BLW
	Modified:	27 July 1973 by RAB	*/

generate_constant: proc(const,n_words) returns(ptr) ;

dcl	const bit(*) aligned,	/* constant to generate */
	n_words fixed bin;		/* number of words to gen, or zero */

dcl	cg_stat$constant_list ptr ext;

dcl	(p,q,pc) ptr,
	(n,n_bits,n_chars,dt) fixed bin,
	(dummy,bs,cs,reloc) bit(1) aligned,
	const_string bit(n_bits) aligned based;

dcl	create_symbol entry(ptr,ptr,bit(3) aligned) returns(ptr);

dcl	(addr,divide,length,null,string) builtin;

%include pl1_tree_areas;
%include cgsystem;
%include reference;
%include symbol;
%include declare_type;
%include data_types;
%include boundary;

	pc = addr(const);
	dt = bit_string;
	bs = "1"b;
	cs, reloc = "0"b;

	if n_words ^= 0 then n = n_words;
	else n = divide(length(const) + bits_per_word - 1,bits_per_word,17,0);

join:	n_bits = n * bits_per_word;

join1:	p = cg_stat$constant_list;
	do while(p ^= null);
	     if p -> symbol.varying then goto loop;

	     if bs
	     then do;
		if ^ p -> symbol.bit then goto loop;
		if p -> symbol.c_dcl_size ^= n_bits then goto loop;
		end;

	     if cs
	     then do;
		if ^ p -> symbol.char then go to loop;
		if p -> symbol.c_dcl_size ^= n_chars then go to loop;
		end;

	     if reloc
	     then if ^ p -> symbol.storage_block
		then go to loop;

	     if p -> symbol.c_word_size >= n
	     then if p -> symbol.initial -> const_string = pc -> const_string
		then goto done;

loop:	     p = p -> symbol.multi_use;
	     end;

	allocate const_string in(tree_area) set(q);
	q -> const_string = pc -> const_string;

	p = create_symbol(null,null,by_compiler);
	p -> symbol.multi_use = cg_stat$constant_list;
	cg_stat$constant_list = p;

	p -> symbol.c_word_size = n;

	if ^ reloc
	then if n = 2
	     then p -> symbol.boundary = mod2_;
	     else p -> symbol.boundary = word_;
	else if double
	     then p -> symbol.boundary = mod2_;
	     else p -> symbol.boundary = word_;

	p -> symbol.c_bit_size = n_bits;

	if cs
	then do;
	     p -> symbol.char = "1"b;
	     p -> symbol.c_dcl_size = n_chars;
	     end;
	else do;
	     p -> symbol.c_dcl_size = n_bits;
	     if bs then p -> symbol.bit = "1"b;
	     if reloc then p -> symbol.storage_block = "1"b;
	     end;

	p -> symbol.initial = q;
	p -> symbol.constant = "1"b;

	q = p -> symbol.reference;
	q -> reference.c_length = p -> symbol.c_dcl_size;
	if n_bits > bits_per_two_words then q -> reference.long_ref = "1"b;

done:	q = p -> symbol.reference;
	string(q -> reference.bits) = "11"b;
	q -> reference.data_type = dt;
	q -> reference.units = word_;
	q -> reference.no_address = "1"b;
	q -> reference.perm_address = "0"b;
	return(q);

generate_constant$real_fix_bin_1: entry(integer) returns(ptr);

dcl	integer fixed bin;

	pc = addr(integer);
	n = 1;
	dt = real_fix_bin_1;
	bs, cs, reloc = "0"b;
	goto join;

generate_constant$bit_string: entry(const,nb) returns(ptr);

dcl	nb fixed bin;		/* number of bits */

	n_bits = nb;
	n = divide(n_bits + bits_per_word - 1,bits_per_word,17,0);
	bs = "1"b;
	cs, reloc = "0"b;

	pc = addr(const);
	dt = bit_string;
	goto join1;

generate_constant$char_string:	entry(char_const,nc) returns(ptr);

dcl	char_const char(*) aligned,
	nc fixed bin;		/* number of characters in char_const */

	n_chars = nc;
	n_bits = bits_per_char*n_chars;
	n = divide(n_bits + bits_per_word - 1,bits_per_word,17,0);
	bs = "0"b;
	cs = "1"b;
	reloc = "0"b;

	dt = char_string;
	pc = addr(char_const);
	go to join1;

generate_constant$relocatable:	entry(pt,n_words,double) returns(ptr);

dcl	pt ptr,			/* pointer to relocatable constant */
	double bit(1) aligned;	/* "1"b if constant should be on mod2_ boundary */

	/* entry point to generate relocatable constants for EIS descriptors
	   and constant argument lists containing ITP pairs for quick calls */

	n = n_words;
	pc = pt;
	bs, cs = "0"b;
	reloc = "1"b;
	dt = real_fix_bin_1;
	go to join;

	end;
