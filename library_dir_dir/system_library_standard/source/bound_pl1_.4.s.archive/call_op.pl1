/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to compile calls

   Initial Version: 16 April 1971 by BLW for Version II
	Modified:  5 November 1972 by BLW	
	Modified:	15 February 1973 by RAB
	Modified:	25 June 1973 by RAB	
	Modified: 2 August 1974 by RAB for constant arg list calls
	Modified:	16 November 1974 by RAB to fix bug 1232
	Modified:	17 November 1974 by RAB to fix bug 1255
	Modified:	12 December 1975 by RAB to remove call to state_man$erase_reg
	Modified:	23 June 1976 by RAB to centralize use of cg_stat$last_call
	Modified:	10 September 1977 by RAB to fix 1613 by adding 3rd arg to store_bit_address
	Modified: 23 April 1979 by PCK to implement 4-bit decimal 
	Modified: 23 June 1981 by EBush to increase max size of arg lists 
	Modified: 11 September 81 by EBush to add prepare_call_long and 
		prepare_quick_call_long macros.  */

call_op:	proc(pt) returns(ptr);

dcl	pt ptr;		/* points at call operator node */

dcl	(cg_stat$cur_tree,cg_stat$double_temp,cg_stat$temp_ref,cg_stat$cur_node) ptr ext,
	cg_stat$cur_block ptr ext,
	cg_stat$text_pos fixed bin(18) ext,
	cg_stat$cur_level fixed bin ext;

dcl	(p,q,node_pt,ret_pt,ent_pt,sal_pt,arglist,ap,p2,p2s,p3,
	arg(3),args,descs,ent_blk,save_cur_node) ptr,
	(i,j,n,skip,ent_type,n_args,arg_pos,dt) fixed bin,
	(macro1,macro2) fixed bin(15),
	last_freed fixed bin(18),
	arg_list_extent fixed bin(35),
	xr fixed bin(3),
	(atom,useless,quick,reset,use_itp) bit(1) aligned;

dcl	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr),
	expmac entry(fixed bin(15),ptr),
	copy_temp entry(ptr) returns(ptr),
	(stack_temp$assign_temp,stack_temp$free_temp) entry(ptr),
	compile_exp$save entry(ptr) returns(ptr),
	compile_exp$save_exp entry(ptr) returns(ptr),
	(compile_exp,load_size) entry(ptr);
dcl	compare_expression entry(ptr,ptr) returns(bit(1) aligned) reducible;
dcl	share_expression entry(ptr) returns(ptr),
	base_man$store_ptr_to entry(ptr,ptr),
	store_bit_address entry(ptr,ptr,fixed bin(18)),
	base_man$load_var entry(fixed bin,ptr,fixed bin),
	c_a entry(fixed bin,fixed bin) returns(ptr),
	(long_op$extend_stack,adjust_ref_count) entry(ptr,fixed bin(15)),
	store$save_string_temp entry(ptr),
	long_op$c_or_b entry(ptr,fixed bin,fixed bin(15)),
	need_temp entry(ptr,bit(2) aligned),
	xr_man$load_any_const entry(fixed bin,fixed bin(3)),
	xr_man$load_const entry(fixed bin,fixed bin),
	xr_man$super_lock entry(fixed bin),
	m_a entry(ptr,bit(2) aligned),
	expmac$zero entry(fixed bin(15)),
	expmac$many entry(fixed bin(15),ptr,fixed bin),
	state_man$flush entry,
	state_man$flush_address entry(ptr),
	cg_error entry(fixed bin,fixed bin),
	generate_constant$relocatable entry(ptr,fixed bin,bit(1) aligned) returns(ptr);

dcl	(addr,bit,fixed,hbound,null,substr) builtin;

dcl (	call_ent_var	init(230),
	zero_mac		init(308),
	lda		init(1),
	alloc_char_temp	init(89),
	realloc_char_temp	init(92),
	prepare_call	init(362),
	prepare_quick_call	init(363),
	prepare_call_long   init(741),
	prepare_quick_call_long  init(742),
	quick_call	init(367)) fixed bin(15) int static;

%include cg_reference;
%include operator;
%include list;
%include symbol;
%include block;
%include temporary;
%include data_types;
%include op_codes;
%include nodes;
%include boundary;
%include cgsystem;
%include its;

	save_cur_node = cg_stat$cur_node;
	node_pt, cg_stat$cur_node = pt;
	ret_pt = node_pt -> operand(1);

	/* get info about entry */

	q = node_pt -> operand(2);
	ent_pt = prepare_operand(q,1,atom);
	if ^ atom then ent_pt = compile_exp$save(q);

	ent_type = ent_pt -> reference.data_type;
	if ent_type ^= int_entry then quick = "0"b;
	else do;
	     ent_blk = ent_pt -> reference.symbol -> symbol.equivalence;
	     quick = ent_blk -> block.no_stack;
	     end;

	/* get ptr to std_arg_list operator */

	sal_pt = node_pt -> operand(3);

	/* The rest of the main procedure is put in a begin block so that
	   the extents of arrays (and bit vectors) that hold values for
	   each arg in the arg_list will conform to the number of args, via
	   auto adjustable storage, thus avoiding an artificial limit on
	   the number of args in a call. */

	if sal_pt = null
	     then arg_list_extent = 1;
	     else arg_list_extent = sal_pt->operand(2)->list.number;

     begin;
	dcl rand_pt(arg_list_extent) ptr;
	dcl (adjust,already)  bit(arg_list_extent);
     

	if sal_pt = null
	then do;

	     /* no arguments, no sweat if this is quick call */

	     if quick
	     then do;
		call state_man$flush;
		call expmac((quick_call),ent_pt);
		goto done;
		end;

	     /* use temp location for arglist */

	     arglist = cg_stat$double_temp;
	     descs = null;
	     n_args = 0;
	     goto l3;
	     end;

	/* get ptr to arglist and skip if we already evaluated it */

	arglist = sal_pt -> operand(1);
	arglist -> reference.units = word_;
	arglist -> reference.perm_address = "0"b;
	if arglist -> reference.evaluated 
	then do;
	     arglist->reference.no_address = "1"b;
	     goto l2;
	     end;

	args = sal_pt -> operand(2);
	n_args = args -> list.number;

	if n_args > max_list_elements
	then do;
	     call cg_error(340,max_list_elements);
	     n_args = max_list_elements;
	     end;

	/* get info about all the arguments of the call */

	do i = 1 to n_args;
	     q = args -> element(i);
	     p = prepare_operand(q,-1,atom);

	     if atom then goto step;
	     if q -> node.type ^= operator_node then goto step;

	     if q -> operator.op_code = assign | q -> operator.op_code = assign_size_ck
	     then do;

		if p -> reference.length = null then goto l1;

		/* we have adjustable string temp = something,
		   check to see if we have the same size on both
		   sides of the assignment */

		/* We have to be prepared to restore the
		   original value of the data_type field
		   of operand(2) if it is a reference,
		   because if we don't, prepare_operand
		   will get confused and not evaluate
		   the length expression, if any. */

		p2 = q -> operand(2);
		if p2 -> node.type = operator_node 
		     then p2 = p2 -> operand(1);
		dt = p2 -> reference.data_type;

		p2 = prepare_operand((q -> operand(2)),-1,atom);
		p2s = p2 -> reference.length;

		reset = "0"b;

		if p2s = p -> reference.length
		then;
		else if compare_expression(p2s,(p -> reference.length))
		     then do;

			/* Have same size on both sides of assign, so optimize */

			p2s = share_expression(p2s);
			if p2s -> node.type = reference_node
			     then p2s = prepare_operand(p2s,1,useless);
			p -> reference.length = p2s;
			end;
		     else reset = "1"b;

		if (p -> reference.data_type ^= p2 -> reference.data_type) | atom
		then do;

		     /* We restore the data_type field before
		        calling compile_exp$save if the
		        2 length exprs were not the
		        same, as previously mentioned */

		     if reset
			then p2 -> reference.data_type = dt;
		     p = compile_exp$save(q);
		     end;
		else do;
		     p -> reference.ref_count = p -> reference.ref_count + 1;
		     dt = p -> reference.data_type - char_string;
		     call compile_exp((q -> operand(2)));
		     call long_op$extend_stack(p,realloc_char_temp+dt);
		     call store$save_string_temp(p);
		     call adjust_ref_count((q -> operand(2)),-1);
		     end;

		goto step;
		end;

	     if p -> reference.long_ref
	     then p = compile_exp$save_exp(q);
	     else do;
l1:		if p -> reference.c_length > 0
		 | p -> reference.data_type < char_string
		 | p -> reference.data_type > bit_string
		then p = compile_exp$save_exp(q);
		else do;

		     /* have zero length string being passed out */

		     p = q -> operand(1);

		     call stack_temp$assign_temp(p);

		     if p -> reference.varying_ref
		     then do;
			p -> reference.c_offset = p -> reference.c_offset - 1;
			p -> reference.ref_count = p -> reference.ref_count + 1;
			call expmac((zero_mac),p);
			p -> reference.c_offset = p -> reference.c_offset + 1;
			end;
		     end;
		end;

step:	     rand_pt(i) = p;
	     if p -> reference.length ^= null
	     then if p -> reference.ref_count = 1
		then call need_temp(p,"01"b);
	     end;

	/* allocate space for temp result of function, if necessary */

	if p -> reference.temp_ref
	then if ^ p -> reference.allocated
	     then do;

		if ^ p -> reference.allocate
		then do;
		     p, ret_pt, rand_pt(n_args) = copy_temp(p);
		     p -> reference.ref_count = 2;
		     end;

		call stack_temp$assign_temp(p);
		p -> reference.value_in.storage = "1"b;
		end;

	/* check to see if we can generate a constant arg list */

	if quick
	then do;
	     use_itp = check_arg_addrs();
	     if use_itp
	     then do;
		call gen_itp_list;
		go to l2;
		end;
	     end;

	/* allocate space for arg list if necessary */

	if ^ arglist -> reference.allocated
	then do;
	     if ^ arglist -> reference.allocate then arglist = copy_temp(arglist);
	     call stack_temp$assign_temp(arglist);
	     end;

	last_freed = arglist -> reference.qualifier -> temporary.last_freed;

	arg_pos = arglist -> reference.qualifier -> temporary.location;

	if arg_pos + 2*n_args + 1 < 16384
	     then ap = c_a(arg_pos,4);
	     else do;
		ap = c_a(0,4);
		call xr_man$load_const(arg_pos,1);	/* xr1 is safe because it is out of the pool */
		ap -> address.tag = "001001"b;
		arg_pos = 0;
		string(arglist -> reference.address) = string(ap -> reference.address);
		arglist->reference.perm_address = "1"b;
		end;

	/* put ptrs to arguments into arg list.  If an arg is a temporary, we will
	   adjust the reference count up by 1 so that the temporary remains allocated
	   until we return from call_op.  If we did not do this and some of the
	   registers had to be saved in storage, one of the temporaries used for
	   an arg passed by value might get used. */

	adjust = "0"b;
	do i = 1 to n_args;
	     ap -> address.offset = bit(fixed(arg_pos + 2*i,15),15);
	     p = rand_pt(i);

	     if p -> reference.temp_ref
	     then do;
		p -> reference.ref_count = p -> reference.ref_count + 1;
		substr(adjust,i,1) = "1"b;
		end;

	     call store_bit_address(ap,p,last_freed);
	     end;

	/* decide if we have to skip a position in the arg list for stack ptr */

	skip = fixed(((ent_type = int_entry) & ^ quick) | (ent_type = entry_variable),1) + n_args;

	descs = sal_pt -> operand(3);
	if descs = null then goto l2;

	/* put ptrs to descriptors into arg list */

	already = "0"b;
	do i = 1 to n_args;

	     if substr(already,i,1) then goto next;

	     ap -> address.offset = bit(fixed(arg_pos + 2*(i+skip),15),15);
	     p = prepare_operand((descs -> element(i)),1,atom);
	     call base_man$store_ptr_to(p,ap);

	    /* if same descriptor used later, store ptr to it now */

	     do j = i + 1 to n_args;
		if p = descs -> element(j)
		then do;
		     ap -> address.offset = bit(fixed(arg_pos + 2*(j+skip),15),15);
		     call base_man$store_ptr_to(p,ap);
		     substr(already,j,1) = "1"b;
		     end;
		end;

next:	     end;

l2:

	/* generate call */

l3:	arg(1) = arglist;
	if n_args > 127
	     then arg(2) = c_a((n_args*2),3);   /* for prepare_call_long macros */
	     else arg(2) = c_a((n_args*2048),2);  /* for prepare_call macros */

	if ent_type = int_entry & ^ quick
	then do;
	     j = cg_stat$cur_level - ent_pt -> reference.symbol -> symbol.block_node -> block.level;

	     if j ^= 0
	     then do;
		call xr_man$load_const(j,7);
		call xr_man$super_lock(7);
		ent_type = int_entry_other;
		end;

	     end;

	if ret_pt ^= null
	then if ^ ret_pt -> reference.shared
	     then if cg_stat$cur_tree = node_pt
		then call adjust_ref_count(ret_pt,-1);

	if quick
	then do;
	     if use_itp
	     then do;
		call base_man$load_var(2,arglist,1);
		if descs ^= null
		     then call expmac((lda),arglist);
		end;
	     else if n_args > 127
		    then call expmac$many((prepare_quick_call_long),addr(arg),2);
	              else call expmac$many((prepare_quick_call),addr(arg),2);

	     call state_man$flush;
	     call expmac((quick_call),ent_pt);
	     end;
	else do;
	     if n_args > 127
		then call expmac$many((prepare_call_long),addr(arg),2);
		else call expmac$many((prepare_call),addr(arg),2);
	     call base_man$load_var(2,ent_pt,1);
	     call state_man$flush;
	     call expmac$zero(call_ent_var + 2*(ent_type - entry_variable) + fixed(descs ^= null,1));
	     end;

	if adjust = "0"b then goto done;

	do i = 1 to n_args;
	     if substr(adjust,i,1)
	     then do;
		p = rand_pt(i);
		call adjust_ref_count(p,-1);
		end;
	     end;

done:
	ent_pt -> reference.perm_address = "0"b;
	cg_stat$cur_node = save_cur_node;

	if ret_pt ^= null
	then if ^ ret_pt -> reference.shared
	     then ret_pt -> reference.evaluated = "1"b;

	return(ret_pt);
/**/
check_arg_addrs:	proc reducible returns(bit(1) aligned);

dcl	     (f,p,s) ptr;

	     /* checks args to see if all addresses are suitable for use
	        in a constant arg list */

	     if cg_stat$cur_block -> block.last_auto_loc >= 16384
		then go to fail;

	     /* make sure quick block contains no non-quick blocks */

	     if ent_blk -> block.son ^= null
	     then if ^ check_block((ent_blk -> block.son))
		then go to fail;

	     /* now check args for constant addresses */

	     do i = 1 to n_args;
		p = rand_pt(i);

		if p -> reference.offset ^= null
		     then go to fail;

		s = p -> reference.symbol;

		if p -> reference.temp_ref
		then do;
		     if p -> reference.address_in.storage
			then go to fail;

		     if p -> reference.aggregate
		     then do;
			do f = s repeat f -> symbol.father while(f -> symbol.father ^= null);
			     end;
			if f -> symbol.word_size ^= null
			     then go to fail;
			end;
		     end;

		else if p -> reference.qualifier ^= null
		     then go to fail;
		     else if s -> symbol.auto
			then if cg_stat$cur_level ^= s -> symbol.block_node -> block.level
			     then go to fail;
			     else;
			else if s -> symbol.constant
			     then do;
				if s -> symbol.equivalence ^= null
				     then s = s -> symbol.equivalence;

				if ^ s -> symbol.allocated
				then go to fail;
				else if p -> reference.units ^= 0
				     then if p -> reference.units ^= word_
					then go to fail;
					else;
				     else;
				end;

			     else go to fail;
		end;

	     return("1"b);

fail:	     return("0"b);

	     end;


/**/
check_block:   proc(pt) reducible returns(bit(1) aligned);

dcl	     (p,pt) ptr;

	     /* make sure all contained blocks are quick */

	      do p = pt repeat p -> block.brother while(p ^= null);
		if ^ p -> block.no_stack
		     then go to fail;
		if p -> block.son ^= null
		then if ^ check_block((p -> block.son))
		     then go to fail;
		end;

	     return("1"b);

fail:	     return("0"b);

	     end;
/**/
gen_itp_list:	proc;

dcl	     iscan fixed bin;
dcl	     doing_descriptors bit(1) aligned;

dcl	     1 arg_list auto aligned,
	     2 header aligned,
	       3 arg_count fixed bin(17) unal,
	       3 code bit(18) unal,
	       3 desc_count fixed bin(17) unal,
	       3 pad bit(18) unal,
	     2 itp_list(128) like itp aligned;

	     /* generates an argument list of constant addresses using
	        ITP pairs and ordinary indirect words */

	     doing_descriptors = "0"b;
	     arg_list.code, arg_list.pad = "0"b;
	     adjust = "0"b;
	     iscan = 0;
	     arg_list.arg_count = 2 * n_args;

	     /* fill in addresses of arguments */

	     call fill_list;

	     /* process descriptors, if any */

	     descs = sal_pt -> operand(3);
	     if descs ^= null
	     then do;
		arg_list.desc_count = 2 * n_args;
		doing_descriptors = "1"b;
		call fill_list;
		end;
	     else arg_list.desc_count = 0;

	     /* generate the constant argument list */

	     arglist = generate_constant$relocatable(addr(arg_list),2 * iscan + 2,"1"b);

fill_list:	proc;

dcl		ind_word bit(36) aligned based;
dcl		eis bit(2) aligned;
dcl		p ptr;

		/* fills in the arg_list */

		do i = 1 to n_args;
		     iscan = iscan + 1;

		     if ^ doing_descriptors
			then p = rand_pt(i);
			else p = prepare_operand((descs -> element(i)),1,atom);

		     if string(p -> reference.address_in.b)
			then call state_man$flush_address(p);

		     /* make the arg addressable */

		     if p -> reference.units = word_
			then eis = "00"b;
			else eis = "11"b;

		     call m_a(p,eis);

		     if p -> reference.ic_ref
		     then do;
			p -> reference.ic_ref = "0"b;
			p -> address.tag = "000000"b;
			end;

		     /* depending on ext_base, make an ITP pair or an indirect word */

		     string(itp_list(iscan)) = (72)"0"b;

		     if p -> address.ext_base
		     then do;
			itp_list(iscan).pr_no = p -> address.base;
			itp_list(iscan).itp_mod = "100001"b;	/* 41(8) - ITP */
			itp_list(iscan).offset = bit(fixed(p -> address.offset,18),18);
			if p -> reference.c_f_offset ^= 0
			then if p -> reference.units = bit_
			     then itp_list(iscan).bit_offset = bit(p -> reference.c_f_offset,6);
			     else if p -> reference.units = character_
				then itp_list(iscan).bit_offset = bit(fixed(bits_per_char * p -> reference.c_f_offset,6),6);
				else itp_list(iscan).bit_offset = bit(fixed(bits_per_char
					* divide(p -> reference.c_f_offset,packed_digits_per_char,6),6),6);
			end;

		     else addr(itp_list(iscan)) -> ind_word = string(p -> reference.address);

		     /* adjust the reference count for this use of the argument */

		     if ^ p -> reference.shared
		     then if p -> reference.temp_ref & ^ doing_descriptors
			then substr(adjust,i,1) = "1"b;
			else call adjust_ref_count(p,-1);
		     end;

		end;

	     end;


             end; /* begin block */


	end;
