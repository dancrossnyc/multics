/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(89-02-28,RWaters), approve(89-02-28,MCR8068), audit(89-09-07,Vu),
     install(89-09-19,MR12.3-1068):
     Fix bug 1899.
                                                   END HISTORY COMMENTS */


/* Program to make a reference addressable

   Initial Version: 16 April 1971 by BLW for Version II
	Modified: 10 May 1973 by RAB for multiple base regs
	Modified:	19 June 1973 by RAB for EIS
	Modified:	4 June 1975 by RAB for separate_static
	Modified:	27 November 1975 by RAB to fix 1431
	Modified:	11 May 1976 by RAB to fix 1496
	Modified:	2 Oct 1976 by RAB to fix 1530
	Modified:	9 Mar 1977 by RAB to eliminate mod_word operator
	Modified:	11 Jan 1978 by RAB to set base_regs(i).used
	Modified:	11 Aug 1978 by RAB to fix 1734
	Modified:	31 Dec 1978 by RAB to fix 1807 (bad code for internal
		file constants if linkage section >16k)
	Modified: 14 Dec 1988 by RW null pointer with defined references.
*/
/* format: style3,^indattr,ifthendo,ifthen,^indnoniterdo,indproc,^elsestmt,dclind9,idind23 */
%page;
m_a:
     proc (pt, bits);

dcl      pt ptr,					/* points at ref node to be made addressable */
         bits aligned bit (2),			/* 2 bits as follows: */
         no_ind aligned bit (1),			/* "1"b if no indirection allowed */
         eis aligned bit (1);				/* "1"b if addressing for EIS instruction */

dcl      (
         cg_stat$cur_block,
         cg_stat$cur_statement,
         cg_stat$long_string_temp
         ) ptr ext,
         cg_stat$extended_stack bit (1) ext,
         cg_stat$text_pos fixed bin (18) ext,
         cg_stat$cur_level fixed bin ext;

dcl      ref ptr,					/* points at ref node to be made addressable */
         r1 ptr;					/* points at ref node from which addressing info
				   is obtained.  r1 starts off equal to ref. */

dcl      (p1, p2, ro, s1, q, vwo) ptr,
         (i, k) fixed bin,
         xr fixed bin (3),
         base bit (3),
         (dont_load, have_loaded, useless) bit (1) aligned,
         (word_offset, save_word_offset, off, delta) fixed bin (15),
         (fract_offset, save_fract_offset, fo) fixed bin (6),
         (ind_word, multiple) fixed bin (18),
         base_offset fixed bin (24),
         locked bit (1) aligned,
         fok bit (1) aligned,
         (tag, tagind) bit (6) aligned,
         reloc bit (12) aligned,
         op_code bit (9) aligned;

dcl      (abs, bit, divide, fixed, mod, null, string, substr) builtin;

dcl      m_a entry (ptr, bit (2) aligned);
dcl      expmac entry (fixed bin (15), ptr);
dcl      base_man$load_arg_ptr entry (fixed bin, ptr, fixed bin) returns (bit (3) aligned);
dcl      base_man$load_stack_indirect entry (fixed bin (18)) returns (bit (3) aligned);
dcl      base_man$load_display entry (fixed bin) returns (bit (3) aligned);
dcl      base_man$load_link_indirect entry (fixed bin, bit (12) aligned) returns (bit (3) aligned);
dcl      base_man$load_controlled entry (fixed bin, fixed bin (15)) returns (bit (3) aligned);
dcl      base_man$load_linkage entry returns (bit (3) aligned);
dcl      base_man$load_static entry returns (bit (3) aligned);
dcl      base_man_link_or_static entry returns (bit (3) aligned) variable;
dcl      base_man$load_any_var entry (fixed bin, ptr) returns (bit (3) aligned);
dcl      base_man$load_arg entry (fixed bin, ptr) returns (bit (3) aligned);
dcl      base_man$load_var entry (fixed bin, ptr, fixed bin),
         stack_temp$free_temp entry (ptr),
         stack_temp$assign_temp entry (ptr),
         stack_temp$assign_block entry (ptr, fixed bin),
         stack_temp$assign_aggregate entry (ptr),
         stack_temp$assign_return_value entry (ptr),
         copy_temp entry (ptr) returns (ptr),
         cg_error entry (fixed bin, fixed bin),
         error entry (fixed bin, ptr, ptr),
         prepare_operand entry (ptr, fixed bin, bit (1) aligned) returns (ptr),
         aq_man$load_any_const entry (fixed bin (24), fixed bin (2)),
         aq_man$load_any_var entry (ptr, fixed bin (2), fixed bin (24)),
         xr_man$lock entry (ptr, fixed bin (3)),
         xr_man$unlock entry (fixed bin (3)),
         xr_man$load_any_const entry (fixed bin (18), fixed bin (3)),
         xr_man$load_any_var entry (ptr, fixed bin (3), fixed bin (18));

dcl      (
         r_mod init ("001"b),
         ri_mod init ("011"b),
         ir_mod init ("111"b)
         ) bit (3) int static;

dcl      (
         aq_mod init ("0001"b),
         iaq_mod init ("1101"b)
         ) bit (4) int static;

dcl      fix_bin fixed bin (15) based;

dcl      (
         first_base init (1),
         last_base init (6)
         ) fixed bin int static;

dcl      load_pt init (60) fixed bin (15) int static;

%page;
%include cgsystem;
%page;
%include nodes;
%page;
%include cg_reference;
%page;
%include symbol;
%page;
%include temporary;
%page;
%include operator;
%page;
%include block;
%page;
%include relocation_bits;
%page;
%include op_codes;
%page;
%include bases;
%page;
%include machine_state;
%page;
%include boundary;
%page;
/* program */

	no_ind = substr (bits, 1, 1);
	eis = substr (bits, 2, 1);

	ref, r1 = pt;
	if ^ref -> reference.no_address then
	     if ref -> reference.perm_address then
		if no_ind then
		     goto test1;
		else
		     return;

	dont_load, ref -> reference.even, ref -> reference.forward_ref, ref -> reference.ic_ref,
	     ref -> reference.relocation, string (ref -> reference.address) = "0"b;

	ref -> reference.c_f_offset = 0;

	s1 = ref -> reference.symbol;

/* check for address already in a base register 
	   (we skip this code for temporaries so that
	    store$save_string_temp works)	        */

	if ^ref -> reference.temp_ref then do;

	     if string (ref -> reference.address_in.b) then
		do i = first_base to last_base;
		     if ref -> reference.address_in.b (i) then do;
			ref -> reference.base = bases (i);
			ref -> reference.ext_base = "1"b;
			base_regs (i).used = cg_stat$text_pos;
			return;
		     end;
		end;

	end;

	locked, reloc = "0"b;

/* get variable word offset */

	call get_vwo (ref);

	word_offset, fract_offset = 0;
	call get_c_offset;

	if ^eis then
	     fok = "1"b;
	else
	     fok = fract_offset = 0 & ^(no_ind & vwo ^= null);

	if ref -> reference.temp_ref then do;

temp:
	     if r1 -> reference.aggregate then do;
		if s1 -> symbol.varying then
		     word_offset = word_offset + 1;

/* if the temp aggregate is a structure, we want to allocate
		   the level 1 temporary instead of the descendant */

		p1 = s1;
		do while (p1 -> symbol.father ^= null);
		     p1 = p1 -> symbol.father;
		end;

		if p1 -> symbol.initial = null then
		     call stack_temp$assign_aggregate (p1);

		p2 = p1 -> symbol.initial;

		if p1 -> symbol.word_size = null then do;
		     word_offset = word_offset + p2 -> temporary.location;
		     goto lv;
		end;

		call load_vwo;

		if word_offset = 0 & fok & abs (p2 -> temporary.location) < 16384 then do;
		     tag = tagind;
		     word_offset = p2 -> temporary.location;
		     goto t1;
		end;

		ref -> address.base = base_man$load_stack_indirect (p2 -> temporary.location);
		goto so1;
	     end;

	     if r1 -> reference.address_in.storage then do;
		if r1 -> reference.allocated then
		     if r1 -> reference.qualifier ^= null then
			ind_word = r1 -> reference.qualifier -> temporary.location;
		     else
			goto err330;
		else if r1 -> reference.value_in.string_aq then
		     ind_word = fixed (cg_stat$long_string_temp -> address.offset, 15);
		else do;
err330:
		     call error (330, cg_stat$cur_statement, r1);
		     return;
		end;
		if word_offset = 0 & fok then do;
		     r1 -> reference.even = "1"b;
		     word_offset = ind_word;
		     call load_vwo;
		     tag = tag | substr (ri_mod, 1, 2);
		     goto t1;
		end;
		else do;
		     call load_vwo;
		     ref -> address.base = base_man$load_stack_indirect (ind_word);
		     goto so;
		end;
	     end;

	     if ^r1 -> reference.allocated then do;
		if ^r1 -> reference.allocate then
		     ref, r1, pt = copy_temp (r1);
		call stack_temp$assign_temp (r1);
	     end;
	     else if r1 -> reference.qualifier = null then do;
		call error (316, cg_stat$cur_statement, r1);
		return;
	     end;

	     word_offset = word_offset + r1 -> reference.qualifier -> temporary.location;
	     goto lv;
	end;

	p1 = ref -> reference.qualifier;

	if s1 -> node.type ^= symbol_node then
	     goto dr;

	if s1 -> symbol.return_value then do;

	     do p2 = s1 repeat p2 -> symbol.father while (p2 -> symbol.father ^= null);
	     end;

	     p1 = p2 -> symbol.initial;

	     if p1 ^= null /* not 1st reference */ then do;
		if s1 -> symbol.varying then
		     if s1 -> symbol.dimensioned | s1 -> symbol.member then
			word_offset = word_offset + 1;
		call load_vwo;

		if word_offset = 0 & fok & abs (p1 -> temporary.location) < 16384 then do;
		     word_offset = p1 -> temporary.location;
		     tag = tagind;
		end;
		else do;
		     ref -> address.base = base_man$load_stack_indirect (p1 -> temporary.location);
		     goto so1;
		end;

	     end;
	     else do;				/* p1 is NULL */

/* 1st reference, get 2 word slot to hold ptr to datum */

		call stack_temp$assign_return_value (p2);
		p1 = p2 -> symbol.initial;
		word_offset = p1 -> temporary.location;
		call load_vwo;

/* the stack will get extended when call is made to the procedure
returning the star extent value, so turn the bit on now */

		cg_stat$extended_stack = "1"b;
	     end;

	     goto t1;
	end;

dr:
	if ref -> reference.defined_ref then do;
	     if p1 = null then do;			/* write file (afile) from (thing); where "thing" is a defined  structure */
		p1 = s1 -> symbol.reference -> reference.qualifier;
	     end;

	     r1 = p1;

l0:
	     if r1 -> node.type = operator_node then
		r1 = r1 -> operand (1);

	     if r1 -> reference.defined_ref then do;
		r1 = r1 -> reference.qualifier;
		goto l0;
	     end;

	     if s1 -> symbol.varying & s1 -> symbol.member then
		word_offset = word_offset + 1;

l0b:
	     s1 = r1 -> reference.symbol;

	     if r1 -> reference.temp_ref & r1 -> reference.address_in.storage then
		goto l0a;

	     if s1 -> symbol.return_value then
		goto l0a;

	     if vwo = null & ref -> reference.units = r1 -> reference.units then
		call get_vwo (r1);
	     else if r1 -> reference.offset ^= null then do;
l0a:
		if ^r1 -> reference.shared then
		     r1 -> reference.ref_count = r1 -> reference.ref_count + 1;
		ref -> address.base = base_man$load_any_var (2, r1);
		call load_vwo;
		goto so1;
	     end;

	     call get_c_offset;

	     if r1 -> reference.temp_ref then
		goto temp;

	     p1 = r1 -> reference.qualifier;
	end;

	if p1 ^= null then
	     goto have_qual;

	if s1 -> node.type = label_node then
	     goto lv;

	if s1 -> symbol.constant then do;
	     if s1 -> symbol.varying then
		word_offset = word_offset + 1;
	     if s1 -> symbol.file & s1 -> symbol.internal then
		word_offset = word_offset + s1 -> symbol.location;
	     goto lv;
	end;

	if s1 -> symbol.parameter | s1 -> symbol.param_desc then do;
	     p1 = s1 -> symbol.reference -> reference.qualifier;
	     goto have_qual;
	end;

	if r1 -> reference.temp_ref then
	     word_offset = word_offset + r1 -> reference.qualifier -> temporary.location;
	else if ^(s1 -> symbol.static & s1 -> symbol.external | s1 -> symbol.controlled) then
	     word_offset = word_offset + s1 -> symbol.location;

	if s1 -> symbol.varying then
	     if s1 -> symbol.auto | s1 -> symbol.static | s1 -> symbol.controlled then
		word_offset = word_offset + 1;

/* load variable word offset into an index register and reduce
	   word offset to a value less than 16384 */

lv:
	call load_vwo;

	if s1 ^= null then
	     if s1 -> node.type = label_node then
		goto l3a;

	if r1 -> reference.temp_ref then do;
t1:
	     ref -> address.base = sp;
	     goto so;
	end;

	if s1 -> symbol.auto then do;

	     k = cg_stat$cur_level - s1 -> symbol.block_node -> block.level;
	     if k = 0 then
		goto t1;

/* load ptr to display(k) level back */

	     ref -> address.base = base_man$load_display (k);

so:
	     if tag = "000000"b then
		ref -> reference.even = mod (word_offset, 2) = 0;

so1:
	     ref -> address.offset = bit (word_offset, 15);
	     if eis then
		ref -> reference.c_f_offset = fract_offset;

	     ref -> address.tag = tag;
	     ref -> reference.relocation = reloc;

seteb1:
	     ref -> address.ext_base = "1"b;

/* if no indirection is permitted, we may have to generate a
	        ptr to the reference in a base register */

	     if no_ind then do;

test1:
		if substr (ref -> address.tag, 1, 2) = "00"b then
		     return;

/* we have to load pointer to reference into a base to get rid
		   of indirection, but we don't want to count this as a reference */

		ref -> reference.perm_address = "1"b;

call_baseman:
		if ^ref -> reference.shared then
		     ref -> reference.ref_count = ref -> reference.ref_count + 1;

		base = base_man$load_any_var (2, ref);

		ref -> address.ext_base = "1"b;
		ref -> address.base = base;

		ref -> reference.c_f_offset = 0;
		ref -> address.tag, ref -> address.offset, ref -> reference.perm_address = "0"b;

	     end;

	     return;
	end;

	if s1 -> symbol.static then do;

	     if s1 -> symbol.internal then do;
is:
		reloc = rc_is15;
		ref -> address.base = base_man$load_static ();
		goto so;
	     end;

/* external static or reference to link */

lr:
	     reloc = rc_lp15;
	     base_man_link_or_static = base_man$load_linkage;

lr1:
	     if word_offset = 0 & fok then do;

		off = s1 -> symbol.location;
		if off >= 16384 then do;
		     if tag ^= (6)"0"b then
			goto gen;

		     multiple = off - mod (off, 16384);
		     call xr_man$load_any_const (multiple, xr);
		     tagind = ri_mod || bit (xr, 3);

		     off = off - multiple;
		end;

		ref -> address.base = base_man_link_or_static ();
		ref -> reference.relocation = reloc;
		ref -> address.offset = bit (fixed (off, 15), 15);
es:
		ref -> reference.tag = tagind;
		goto seteb1;
	     end;

/* generate an instruction of the form
			eapbp	lp|k,*
	        where 'k' is offset of link */

gen:
	     ref -> address.base = base_man$load_link_indirect ((s1 -> symbol.location), reloc);
	     reloc = "0"b;
	     goto so1;
	end;

	if s1 -> symbol.constant then do;

	     if s1 -> symbol.entry then
		if s1 -> symbol.initial ^= null | s1 -> symbol.internal then
		     goto l3a;
		else
		     goto lr;

	     if s1 -> symbol.external then
		goto lr;

	     if s1 -> symbol.file then
		goto is;

	     if s1 -> symbol.equivalence ^= null then
		s1 = s1 -> symbol.equivalence;

l3a:
	     if ^s1 -> symbol.allocated then do;
		ref -> reference.forward_ref = "1"b;

		if tag ^= "000000"b | word_offset ^= 0 then do;
		     p1 = s1 -> symbol.reference;
		     if p1 -> reference.data_type = 0 then
			p1 = prepare_operand (p1, 0, useless);
		     ref -> address.base = base_man$load_any_var (2, p1);
		     goto so1;
		end;

		if s1 -> node.type = symbol_node then
		     if s1 -> symbol.c_word_size = 2 | s1 -> symbol.boundary = mod2_ then
			ref -> reference.even = "1"b;

		goto l3b;
	     end;

/* the constant reference occurs earlier in text section */

	     word_offset = word_offset + s1 -> symbol.location;

	     if tag = "000000"b then do;
		ref -> reference.even = mod (word_offset, 2) = 0;
l3b:
		ref -> reference.ic_ref = "1"b;
		ref -> address.tag = "000100"b;	/* IC */
	     end;
	     else do;
		ref -> reference.relocation = rc_t;
		ref -> address.tag = tag;
	     end;

/* put an 18 bit offset into the address */

	     substr (string (ref -> reference.address), 1, 18) = bit (fixed (word_offset, 18), 18);
	     if eis then
		ref -> reference.c_f_offset = fract_offset;
	     return;
	end;

	if s1 -> symbol.controlled then do;

	     if tag = "0"b then
		ref -> reference.even = mod (word_offset, 2) = 0;

	     if s1 -> symbol.internal then do;
		reloc = rc_is15;
		base_man_link_or_static = base_man$load_static;
		goto lr1;
	     end;

/* external controlled */

	     delta = 2 * fixed (s1 -> symbol.arg_descriptor, 1);

	     if word_offset = 0 & fok then do;
		ref -> address.base = base_man$load_link_indirect ((s1 -> symbol.location), (rc_lp15));
		ref -> address.offset = bit (delta, 15);
		ref -> address.tag = tagind;
	     end;
	     else do;
		ref -> address.base = base_man$load_controlled ((s1 -> symbol.location), delta);
		ref -> address.offset = bit (word_offset, 15);
		ref -> address.tag = tag;
		if eis then
		     ref -> reference.c_f_offset = fract_offset;
	     end;

	     goto seteb1;
	end;

/* ERROR */

	call cg_error (305, fixed (string (s1 -> symbol.storage_class), 10));
	goto t1;

/* have a qualifier */

have_qual:
	if s1 -> symbol.varying then
	     if s1 -> symbol.based | (s1 -> symbol.auto & s1 -> symbol.exp_extents) | s1 -> symbol.member then
		word_offset = word_offset + 1;

	if eis then
	     if ref -> reference.units = word_ then
		if abs (word_offset) >= 16384 then
		     goto call_baseman;

	if p1 -> node.type = reference_node then
	     goto l5;

	op_code = p1 -> operator.op_code;

	if op_code = addr_fun then do;
	     if p1 -> operand (1) -> reference.evaluated then
		goto l4a;

	     r1 = p1 -> operand (2);

	     if r1 -> reference.varying_ref then
		word_offset = word_offset - 1;

	     if r1 -> reference.defined_ref then
		goto l0a;
	     goto l0b;
	end;

	if op_code = param_ptr then do;
	     i = 0;				/* load arg ptr */
	     goto l4;
	end;

	if op_code = param_desc_ptr then do;
	     i = 1;				/* load desc ptr */

l4:
	     call load_vwo;

	     q = p1 -> operand (3);
	     k = p1 -> operand (2) -> reference.symbol -> symbol.initial -> fix_bin;

	     if word_offset = 0 & fok & ^no_ind then do;
		ref -> address.base = base_man$load_arg (i, q);
		ref -> address.offset = bit (fixed (2 * (k - i), 15), 15);
		goto es;
	     end;

	     ref -> address.base = base_man$load_arg_ptr (i, q, k);
	     goto so1;
	end;

/* the operator is not a special one, so it must have been
	   evaluated by prepare_operand, pick up the temporary */

l4a:
	p1 = p1 -> operand (1);

l5:
	if ^p1 -> reference.shared then
	     p1 -> reference.ref_count = p1 -> reference.ref_count + 1;

/* check to see if the value of the qualifier is in a base */

	do i = first_base to last_base;
	     if p1 -> reference.value_in.b (i) then do;

/* value is in base, load vwo into an xr and
		   see if value of qualifier is still in base;
		   if so, we're home free! */

		call load_vwo;

		if p1 -> reference.value_in.b (i) then do;
		     ref -> address.base = bases (i);
		     base_regs (i).used = cg_stat$text_pos;

		     if ^p1 -> reference.shared then
			p1 -> reference.ref_count = p1 -> reference.ref_count - 1;
		     goto so1;
		end;

/* the qualifier got forced out of the base by
   the process of making the variable word offset
   addressable, so go lock the offset in the index */

		goto lock;
	     end;

	end;

/* if the variable word offset and qualifier are not both automatic
	   variables declared in the current stack frame, we may have a
	   conflict such that the base register(s) needed to address the
	   offset may conflict with the base register(s) needed to address
	   the qualifier.  We resolve this problem by loading the offset
	   into the index register before making the pointer addressable
	   rather than afterwards, and call a special entry to "lock"
	   the value into the index register.  (Note that if the ref has a "big"
	   offset, loading it requires the a or q, which could affect
	   the qualifier's offset.) */

	if ^ro -> reference.big_offset then do;
	     if vwo = null then
		goto l6;

	     p2 = vwo -> reference.symbol;
	     if p2 -> symbol.temporary then
		goto l6;

	     if p2 -> symbol.auto then
		if p2 -> symbol.block_node = cg_stat$cur_block then
		     goto l6;

	     if p1 -> reference.temp_ref then
		goto l6;

	     p2 = p1 -> reference.symbol;
	     if p2 -> symbol.auto then
		if p2 -> symbol.block_node = cg_stat$cur_block then
		     goto l6;
	end;

/* may have the conflict */

	call load_vwo;

lock:
	if xr >= 0 then do;
	     call xr_man$lock (vwo, xr);
	     locked = "1"b;
	end;

	word_offset = save_word_offset;
	fract_offset = save_fract_offset;

/* make the qualifier permanently addressable */

l6:
	call m_a (p1, "00"b);
	p1 -> reference.perm_address = "1"b;

	if locked then do;
	     if vwo -> reference.value_in.x (xr) then
		dont_load = "1"b;
	     call xr_man$unlock (xr);
	     if base_offset ^= 0 then
		vwo -> reference.value_in.x (xr) = "0"b;
	end;

	call load_vwo;

/* we may be able to use the ptr via indirection if the qualified
	   variable has a zero word offset and there is no subscript or
	   indirection on the qualifier */

	if word_offset ^= 0 then
	     goto l7;

	if ^fok then
	     goto l7;

	if no_ind then
	     goto l7;

	if tag then
	     if substr (p1 -> reference.tag, 3, 4) then
		goto l7;

	if substr (p1 -> reference.tag, 1, 2) then
	     base = base_man$load_any_var (2, p1);
	else if ^p1 -> reference.shared then
	     p1 -> reference.ref_count = p1 -> reference.ref_count - 1;

	string (ref -> address) = string (p1 -> address);
	ref -> reference.relocation = p1 -> reference.relocation;

	if tag then
	     ref -> address.tag = tagind;
	else
	     substr (ref -> address.tag, 1, 2) = ri_mod;

	p1 -> reference.perm_address = "0"b;

	goto seteb1;

/* can't use the qualifier via indirection, have to load
	   it into a base register */

l7:
	ref -> address.base = base_man$load_any_var (1, p1);
	p1 -> reference.perm_address = "0"b;

	goto so1;

%page;
get_c_offset:
     proc ();

dcl      word_off fixed bin (15);
dcl      fract_off fixed bin (6);

	if r1 -> reference.c_offset = 0 then
	     return;

	word_off = divide (r1 -> reference.c_offset, units_per_word (r1 -> reference.units), 15, 0);
	fract_off = mod (r1 -> reference.c_offset, units_per_word (r1 -> reference.units));

	if fract_off ^= 0 then
	     if r1 -> reference.c_offset < 0 then
		word_off = word_off - 1;

	word_offset = word_offset + word_off;

	if ref -> reference.units = r1 -> reference.units then do;
	     fract_offset = fract_offset + fract_off;

	     if fract_offset >= units_per_word (r1 -> reference.units) then do;
		fract_offset = fract_offset - units_per_word (r1 -> reference.units);
		word_offset = word_offset + 1;
	     end;
	end;

     end get_c_offset;


%page;
/* vwo takes on two different meanings depending on the value of eis.  When
   eis is "0"b, vwo means variable_word_offset.  However, when eis is "1"b,
   vwo refers to variable offset instead of variable_word_offset unless 
   reference.modword_in_offset is ON.  The EIS instructions take their offsets
   in the reference units rather than in word units like the other instructions. */

get_vwo:
     proc (rp);

dcl      rp ptr parameter;

	have_loaded = "0"b;

	ro = rp;

	vwo = rp -> reference.offset;

	if vwo ^= null then do;
	     if rp -> reference.units = word_ | rp -> reference.modword_in_offset then do;
		if eis then
		     goto call_baseman;
	     end;
	     else if ^eis then
		goto print;

	     if vwo -> node.type = operator_node then
		vwo = vwo -> operand (1);

	     if ^vwo -> reference.shared then
		vwo -> reference.ref_count = vwo -> reference.ref_count + 1;
	end;

	return;

print:
	call error (312, cg_stat$cur_statement, rp);
	vwo = null;
     end get_vwo;
%page;
load_vwo:
     proc ();

dcl      bxr bit (3) aligned;
dcl      aq fixed bin (2);
dcl      baq bit (2) aligned;

dcl      max_num (18) fixed bin (18) int static
	    init (1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143);

	xr = -1;

	save_word_offset = word_offset;
	save_fract_offset = fract_offset;
	base_offset = 0;

	if s1 ^= null then do;
	     if s1 -> node.type ^= symbol_node then
		goto vwo_1;
	     if s1 -> symbol.constant & ^ro -> reference.temp_ref & ^(s1 -> symbol.internal & s1 -> symbol.file) then
		goto vwo_1;
	end;

	if abs (word_offset) >= 16384 then do;
	     base_offset = word_offset - mod (word_offset, 16384);
	     word_offset = word_offset - base_offset;
	end;

vwo_1:
	if eis then do;
	     if base_offset ^= 0 then
		if ro -> reference.units = word_ then
		     goto call_baseman;
		else
		     base_offset = base_offset * units_per_word (ro -> reference.units);
	     if ^no_ind then do;
		base_offset = base_offset + fract_offset;
		fract_offset = 0;
		fok = "1"b;
	     end;
	end;

	if dont_load then
	     goto vwo_3;

	if vwo ^= null then do;

	     if eis then do;
		if ro -> reference.big_offset then
		     goto large;
		if base_offset > 0 then
		     if base_offset + max_num (vwo -> reference.symbol -> symbol.c_dcl_size)
			> max_index_register_value then
			goto large;
	     end;

	     if have_loaded then
		if ^vwo -> reference.shared then
		     vwo -> reference.ref_count = vwo -> reference.ref_count + 1;

	     have_loaded = "1"b;

/* can use QL | AL modification if value of offset is in Q|A register
		   and we don't have complex data type */

	     if s1 -> node.type = symbol_node then
		if s1 -> symbol.complex then
		     goto vwo_1a;

	     if base_offset ^= 0 then
		goto vwo_1a;

	     if vwo -> reference.value_in.q then do;
		tag = "000110"b;			/* ql */
		tagind = "110110"b;			/* *ql */

vwo_1b:
		if ^vwo -> reference.shared then
		     vwo -> reference.ref_count = vwo -> reference.ref_count - 1;

		goto vwo_3;
	     end;

	     if vwo -> reference.value_in.a then do;
		tag = "000101"b;			/* al */
		tagind = "110101"b;			/* *al */
		goto vwo_1b;
	     end;

vwo_1a:
	     call xr_man$load_any_var (vwo, xr, (base_offset));
	     goto vwo_2;
	end;

	if base_offset ^= 0 then do;
	     if base_offset >= 262144 then do;
		call aq_man$load_any_const (base_offset, aq);
		goto vwo_4;
	     end;
	     call xr_man$load_any_const ((base_offset), xr);
vwo_2:
	     bxr = bit (xr, 3);
	     tag = r_mod || bxr;
	     tagind = ir_mod || bxr;
	end;
	else do;
	     tag = "000000"b;
	     tagind = "010000"b;
	end;

vwo_3:
	if word_offset < 0 then
	     word_offset = word_offset + 262144;

	return;

large:
	if have_loaded then
	     goto vwo_3;
	call aq_man$load_any_var (vwo, aq, base_offset);
vwo_4:
	baq = bit (aq, 2);
	tag = aq_mod || baq;
	tagind = iaq_mod || baq;
	have_loaded = "1"b;
	goto vwo_3;

     end load_vwo;

     end m_a;
