/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

check_o_and_s: proc(pt) returns(ptr);

dcl	pt ptr;		/* points at operator node */

dcl	(d,p,q,p1) ptr,
	(i,m,n) fixed bin,
	(mod,null) builtin;

dcl	get_variable entry(ptr) returns(ptr),
	create_list entry(fixed bin) returns(ptr);

dcl	fix_bin	fixed bin based;

dcl	1 descriptor based aligned like desc_;

%include operator;
%include list;
%include block;
%include reference;
%include symbol;
%include nodes;
%include op_codes;
%include descriptor;
%include desc_types;

	p = pt;
	if p -> node.type ^= operator_node
	then do;
no:	     return(null);
	     end;

	if p -> op_code ^= desc_size then goto no;

	q = p -> operand(2);
	if q -> node.type ^= reference_node then goto no;

	d = q;

	q = q -> reference.qualifier;
	if q = null then goto no;

	if q -> node.type ^= operator_node then goto no;
	if q -> op_code ^= param_desc_ptr then goto no;

	if d -> reference.symbol -> symbol.descriptor -> symbol.initial -> descriptor.type_ = structure_desc
	     then go to no;

	n = 2 * q -> operand(2) -> reference.symbol -> symbol.initial -> fix_bin;

	p = q -> operand(3);
	p1 = p -> block.o_and_s;
	if p1 = null then goto no;

	if p1 -> list.number < n
	then do;
	     m = n + mod(n,2);
	     q = create_list(m);

	     do i = 1 to p1 -> list.number;
		q -> element(i) = p1 -> element(i);
		end;

	     p -> block.o_and_s, p1 = q;
	     end;

	q = p1 -> element(n);
	if q = null then p1 -> element(n), q = get_variable(p);
	return(q);


	end;
