/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This procedure is called to adjust the reference count of a node up or down.
   It also adjusts the reference counts of any length, qualifier, or offset expressions.

   Initial Version: 29 January 1972 by BLW
	Modified:	12 February 1973 by RAB to conform to reference_count design
	Modified:	9 March 1977 by RAB to change mod_word handling
	Modified:	9 April 1977 by RAB to remove mod_word operator	*/

adjust_ref_count: proc(pt,delta);

dcl	pt ptr,		/* points at a reference node */
	delta fixed bin;	/* amount of change */

dcl	(p,q) ptr,
	n fixed bin,
	stack_temp$free_temp entry(ptr),
	(null,substr) builtin;

dcl	cg_stat$cur_statement ptr ext;
dcl	error entry(fixed bin,ptr,ptr);

%include reference;
%include operator;
%include nodes;
%include temporary;

	p = pt;
	n = delta;

	if p -> node.type = operator_node then p = p -> operand(1);

	if ^ p -> reference.shared 
	then do;
		p -> reference.ref_count = p -> reference.ref_count + n;

		if p -> reference.hit_zero
		     then do;
			call error(313,cg_stat$cur_statement,p);
			return;
			end;

		if p -> reference.ref_count = 0
		     then do;
			if p -> reference.symbol ^= null
			     then p -> reference.hit_zero = "1"b;
			end;
		     else if p -> reference.ref_count < 0
			then if p -> reference.symbol ^= null
			     then do;
				call error(316,cg_stat$cur_statement,p);
				return;
			          end;
			     else;
			else return;
	     end;
	else return;

	q = p -> reference.length;
	if q ^= null
	then do;
	     if q -> node.type = operator_node then q = q -> operand(1);

	     if ^ q -> reference.shared then call adjust_ref_count(q,-1);
	     end;

	q = p -> reference.qualifier;
	if q ^= null
	then do;
	     if q -> node.type = temporary_node
	     then call check_temp;
	     else do;
		if q -> node.type = operator_node
		     then q = q -> operand(1);
		if ^q -> reference.shared
		     then call adjust_ref_count(q,-1);
		end;
	     end;

	q = p -> reference.offset;
	if q = null then return;

	if q -> node.type = operator_node
	     then q = q -> operand(1);

	if ^ q -> reference.shared then call adjust_ref_count(q,-1);
	return;


check_temp:	proc;

	     p -> reference.qualifier -> temporary.ref_count
	       = p -> reference.qualifier -> temporary.ref_count - 1;
	     if p -> reference.qualifier -> temporary.ref_count > 0
		then p -> reference.qualifier = null;
		else call stack_temp$free_temp(p);

	     end;

	end;
