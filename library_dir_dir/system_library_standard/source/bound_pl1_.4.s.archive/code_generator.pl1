/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* This is the "main program" of the code generator.  It performs various
   initialization tasks, assigns storage and constants, compiles the
   program, and then finishes up the object segment.

   Initial Version:  1 February 1971 by BLW
	Modified: 22 January 1973 by BLW
	Modified:	9 July 1973 by RAB for EIS
	Modified:	5 June 1975 by EEW for separate_static
	Modified:	19 June 1975 by RAB for listing label arrays
	Modified:	10 January 1976 by RAB for cg_stat$return_operator to fix 1453
	Modified:	1 June 1976 by RAB for *system links
	Modified:	27 Sept 1976 by RAB to fix 1523
	Modified:	21 Oct 1976 by RAB to fix 1540
	Modified:	1 Dec 1976 by RAB for -long_profile	
	Modified: April 1977 by RHS to use get_temp_segments_ and release_temp_segments_
	Modified:	25 August 1977 by RAB to insert debugging code for
		call to release_temp_segments_	
	Modified: 22 Feb 1978 by PCK to implement the stop statement and options(main)
	Modified: 4 October 1980 by M. N. Davidoff to fix cleanup handler bugs.  Fixes 2023.
	Modified: 19 November 1981 by C. Hornig to fix long_profile with separate_static.
*/
/* format: style3 */
code_gen_:
     proc (seg_name, compiler_name, version_name, root, validate_proc, temporary_list, constant_list, ok_ptr, object_pt,
	clock_time, profile_size, produce_listing, symbols_on, print_cp_dcl, map, assembly_list, table_option,
	generate_symtab, print, error_finish, bit_cnt, npages, ncpu, link, dummy_block, generate_map, nnpages, nncpu,
	long_profile);

dcl	seg_name		char (32) var,		/* name of program being compiled */
	compiler_name	char (3) var,		/* name of compiler, i.e. "pl1" */
	version_name	char (132) var,		/* version of compiler */
	root		ptr,			/* ptr to root block */
	validate_proc	ptr,			/* ptr to dcl of validation proc */
	temporary_list	ptr,			/* ptr to list of temporaries */
	constant_list	ptr,			/* ptr to list of constants */
	ok_ptr		ptr,			/* ptr to OK list for get data */
	object_pt		ptr,			/* ptr to object segment to fill-in */
	clock_time	fixed bin (71),		/* clock reading at start of compilation */
	profile_size	fixed bin,		/* size of profile table */
	produce_listing	bit (1) aligned,		/* ON if listing being produced */
	symbols_on	bit (1) aligned,		/* ON if symbol map should be written */
	print_cp_dcl	bit (1) aligned,		/* ON to see compiler produced dcls */
	map		bit (1) aligned,		/* ON to get map of object program */
	assembly_list	bit (1) aligned,		/* ON to get listing of instructions */
	table_option	bit (1) aligned,		/* ON if "table" option used */
	generate_symtab	bit (1) aligned,		/* ON if run-time symbol table needed */
	print		entry (ptr, bit (1) aligned, bit (1) aligned),
						/* program to call to print symbols */
	error_finish	entry,			/* program to call to finish up errors */
	bit_cnt		fixed bin (22),		/* set to bit count of object seg */
	(npages, nnpages)	fixed bin,		/* set to number of page faults */
	(ncpu, nncpu)	fixed bin (71),		/* set to CPU time used */
	link		bit (1) aligned,		/* ON if link to pl1_operators_ desired */
	dummy_block	ptr,			/* ptr to block used in encoding expressions
					   for runtime symbol table */
	generate_map	bit (1) aligned,		/* ON if statement map wanted */
	long_profile	bit (1) aligned;		/* ON if long_profile desired */

dcl	(
	cg_stat$double_temp,
	cg_stat$long_string_temp,
	cg_stat$dummy_block,
	cg_stat$ms_list,
	cg_stat$jump_label,
	cg_stat$m_s_p,
	cg_stat$name_list,
	cg_stat$format_list,
	cg_stat$complex_ac,
	cg_stat$dummy_statement,
	cg_stat$stat_base,
	cg_stat$link_base,
	cg_stat$link_reloc_base,
	cg_stat$sym_base,
	cg_stat$next_ref,
	cg_stat$sym_reloc_base,
	cg_stat$root,
	cg_stat$validate_proc,
	cg_stat$first_ref,
	cg_stat$cur_statement,
	cg_stat$temporary_list,
	cg_stat$constant_list,
	cg_stat$text_base,
	cg_stat$entry_arg,
	cg_stat$sym_use_base,
	cg_stat$text_reloc_base,
	cg_stat$encoded_values,
	cg_stat$def_base,
	cg_stat$def_reloc_base,
	cg_stat$desc_list_ptr,
	cg_stat$first_op,
	cg_stat$next_op,
	cg_stat$agg_temps,
	cg_stat$objmap_pt,
	cg_stat$cur_node,
	cg_stat$label_list,
	cg_stat$last_label,
	cg_stat$return_operator,
	cg_stat$stop_operator,
	cg_stat$profile_base,
	cg_stat$return_main_operator
	)		ptr ext;

dcl	(
	cg_stat$link_origin,
	cg_stat$def_origin,
	cg_stat$sym_origin,
	cg_stat$last_call,
	cg_stat$stat_pos,
	cg_stat$stat_rel,
	cg_stat$def_pos,
	cg_stat$text_pos,
	cg_stat$link_pos,
	cg_stat$sym_pos,
	cg_stat$list_break	(4),
	cg_stat$cur_level,
	cg_stat$link_begin,
	cg_stat$profile_pos,
	cg_stat$max_program_size,
	cg_stat$bit_count,
	cg_stat$link_rel,
	cg_stat$sym_rel,
	cg_stat$def_pool	(0:10),
	cg_stat$def_pool_size,
	cg_stat$profile_start
	)		fixed bin ext;

dcl	cg_stat$map_start	fixed bin (18) ext;

dcl	(
	cg_stat$save_exp_called,
	cg_stat$generate_symtab,
	cg_stat$extended_stack,
	cg_stat$profile_option,
	cg_stat$separate_static,
	cg_stat$skip_to_label,
	cg_stat$table_option,
	cg_stat$generate_map,
	cg_stat$io_used,
	cg_stat$use_type_6,
	cg_stat$long_profile,
	cg_stat$debug
	)		bit (1) aligned ext static;

dcl	ctl_char$ff	char (1) aligned ext;

dcl	cg_stat$seg_name	char (32) var ext,
	cg_stat$compiler_name
			char (12) var ext,
	cg_stat$version_name
			char (132) var ext,
	cg_stat$clock_time	fixed bin (71) ext,
	cg_stat$used_operator
			bit (900) ext;

dcl	1 cg_stat$statement_map
			unaligned ext,
	  2 (first, last)	bit (18);

dcl	pl1_stat_$version	fixed bin ext static;

dcl	(p, q, qr, ok, text_base, text_reloc_base)
			ptr,
	clength		fixed bin (24),
	(text_pos, stat_pos, link_pos, sym_pos, amt, def_pos, defrel, statrel, linkrel, symbolrel, n)
			fixed bin (18),
	(i, code)		fixed bin,
	(pages, ppages)	fixed bin int static,
	(cpu, ccpu)	fixed bin (71) int static;

dcl	(
	gen_pl1_symbol$beg_symbol,
	compile_formats,
	gen_pl1_symbol$end_symbol,
	gen_pl1_linkage$init_linkage
	)		entry,
	error		entry (fixed bin, ptr, ptr);
dcl	com_err_		entry options (variable);
dcl	(assign_storage, gen_pl1_linkage, compile_block)
			entry (ptr),
	mst$block_nodes	entry (ptr, fixed bin) returns (fixed bin);
dcl	(
	pl1_print$non_varying,
	pl1_print$non_varying_nl
	)		entry (char (*) aligned, fixed bin),
	hcs_$get_usage_values
			entry (fixed bin, fixed bin (71), fixed bin),
	hcs_$set_bc_seg	entry (ptr, fixed bin, fixed bin),
	(display_pl1_map, display_pl1_text)
			entry (ptr),
	create_block	entry (bit (9) aligned, ptr) returns (ptr),
	create_statement	entry (bit (9) aligned, ptr, ptr, bit (12) aligned) returns (ptr),
	create_reference	entry (ptr) returns (ptr),
	create_label	entry (ptr, ptr, bit (3) aligned) returns (ptr),
	state_man$create_ms entry returns (ptr);
dcl	compile_link	entry (char (*) aligned, bit (18) aligned, fixed bin) returns (fixed bin);
dcl	c_a		entry (fixed bin, fixed bin) returns (ptr),
	cg_error		entry (fixed bin, fixed bin);
dcl	debug		entry options (variable);
dcl	ioa_		entry options (variable),
	expmac		entry (fixed bin (15), ptr),
	expmac$fill_usage	entry (fixed bin (18), fixed bin (17));

dcl	(get_temp_segments_, release_temp_segments_)
			entry (char (*), (*) ptr, fixed bin);

dcl	profile_width	init (2) fixed bin int static;

dcl	(addrel, bit, divide, fixed, mod, null, ptr, size, substr, verify)
			builtin;

dcl	(out_of_bounds, cleanup)
			condition;

dcl	1 ok_list		aligned based,
	  2 number	fixed bin,
	  2 offset	(1) unaligned bit (18);

dcl	1 ok_list_reloc	aligned based,
	  2 number	fixed bin,
	  2 offset	(1) unaligned bit (18);

dcl	1 half		aligned based,
	  2 left		unal bit (18),
	  2 right		unal bit (18);

dcl	image		(amt) fixed bin based,
	def_image		(def_pos) fixed bin based,
	link_image	(link_pos) fixed bin based,
	stat_image	(stat_pos) fixed bin based,
	symbol_image	(sym_pos) fixed bin based;

dcl	based_cs		char (clength) based aligned;
dcl	based_bs		bit (clength) based aligned;

dcl	get_ops_mac	init (195) fixed bin (15) int static;

dcl	return_operator_loc init (409) fixed bin (15) int static options (constant);
dcl	stop_operator_loc	init (801) fixed bin (15) int static options (constant);
dcl	return_main_operator_loc
			init (802) fixed bin (15) int static options (constant);

dcl	temp_segs		(8) ptr;
dcl	ss_temp_seg	(1) ptr;
dcl	my_name		char (32);

%include symbol;
%include block;
%include reference;
%include runtime_symbol;
%include operator;
%include list;
%include boundary;
%include block_types;
%include stack_head;
%include bases;
%include declare_type;
%include object_map;
%include cgsystem;
%include relbts;
%include its;
%include long_profile;
%include pl1_version;

/* program */

	cg_stat$bit_count = 0;
	pages = 0;
	ppages = 0;
	cpu = 0;
	ccpu = 0;

	if pl1_stat_$version ^= pl1_version | compiler_name ^= "pl1"
	then call error (342, null, null);

	my_name = compiler_name;

/* create scratch segments and set pointers to various buffers */

	temp_segs (*) = null;
	ss_temp_seg (*) = null;

	on cleanup
	     begin;
		call release_temp_segments_ (my_name, temp_segs (*), code);
		call release_temp_segments_ (my_name, ss_temp_seg (*), code);
	     end;

	call get_temp_segments_ (my_name, temp_segs, code);
	if code ^= 0
	then do;
get_temp_segs_failed:
		call com_err_ (code, my_name, "get_temp_segments_");
		goto done;
	     end;

	cg_stat$link_base = temp_segs (1);
	cg_stat$link_reloc_base = temp_segs (2);
	cg_stat$def_base = temp_segs (3);
	cg_stat$def_reloc_base = temp_segs (4);
	cg_stat$sym_base = temp_segs (5);
	cg_stat$sym_reloc_base = temp_segs (6);
	cg_stat$text_reloc_base = temp_segs (7);
	cg_stat$sym_use_base = temp_segs (8);

	cg_stat$link_origin, cg_stat$def_origin, cg_stat$sym_origin = 0;

	if cg_stat$separate_static
	then do;
		call get_temp_segments_ (my_name, ss_temp_seg, code);
		cg_stat$stat_base = ss_temp_seg (1);
		if code ^= 0
		then goto get_temp_segs_failed;
	     end;

/* initialize position in various buffers */

	cg_stat$def_pos, cg_stat$stat_pos, cg_stat$text_pos, cg_stat$sym_pos = 0;
	cg_stat$link_pos = 8;

/* set up static versions of input arguments */

	cg_stat$seg_name = seg_name;
	cg_stat$compiler_name = "PL/I";
	cg_stat$use_type_6 = "0"b;
	cg_stat$version_name = version_name;
	cg_stat$root = root;
	cg_stat$validate_proc = validate_proc;
	cg_stat$temporary_list = temporary_list;
	cg_stat$constant_list = constant_list;
	text_base, cg_stat$text_base = ptr (object_pt, 0);
	text_reloc_base = cg_stat$text_reloc_base;
	cg_stat$clock_time = clock_time;
	cg_stat$table_option = table_option;
	cg_stat$long_profile = long_profile;
	cg_stat$generate_symtab = generate_symtab;

/* the generate_symtab bit will only be on at entry to code generator
	   if put data or get data statements were used in program */

	cg_stat$io_used = generate_symtab;

/* initialize various other parts of the compiler */

	cg_stat$last_call = 0;

	cg_stat$cur_node, cg_stat$desc_list_ptr, cg_stat$label_list, cg_stat$last_label, cg_stat$first_ref,
	     cg_stat$next_ref, cg_stat$ms_list, cg_stat$first_op, cg_stat$next_op, cg_stat$name_list,
	     cg_stat$format_list, cg_stat$cur_statement, cg_stat$agg_temps = null;

	cg_stat$skip_to_label, cg_stat$used_operator = "0"b;

	cg_stat$m_s_p = state_man$create_ms ();

/* create pointers to ref nodes for string operations */

	cg_stat$complex_ac = stk_add (complex_ac_loc);
	cg_stat$double_temp = stk_add (double_temp_loc);
	cg_stat$long_string_temp = stk_add (long_string_loc);
	cg_stat$long_string_temp -> reference.tag = "010000"b;
						/* * */
	cg_stat$return_operator = stk_add (return_operator_loc);
	cg_stat$return_operator -> address.base = ap;
	cg_stat$stop_operator = stk_add (stop_operator_loc);
	cg_stat$stop_operator -> address.base = ap;
	cg_stat$return_main_operator = stk_add (return_main_operator_loc);
	cg_stat$return_main_operator -> address.base = ap;

/* Initialize definition pool for external static without init clauses */

	do i = 0 to cg_stat$def_pool_size;
	     cg_stat$def_pool (i) = 0;
	end;

/* assign storage */

	cg_stat$root -> block.level = 0;
	call assign_storage ((cg_stat$root -> block.son));

	if cg_stat$long_profile
	then do;
		cg_stat$profile_option = "0"b;
		cg_stat$profile_pos = size (long_profile_header);
		amt = size (long_profile_header) + profile_size * size (long_profile_entry);

		if cg_stat$separate_static
		then do;
			cg_stat$profile_start = cg_stat$stat_pos + mod (cg_stat$stat_pos, 2);
			cg_stat$profile_base = addrel (cg_stat$stat_base, cg_stat$profile_start);
			cg_stat$stat_pos = cg_stat$profile_start + amt;
		     end;
		else do;
			cg_stat$profile_start = cg_stat$link_pos + mod (cg_stat$link_pos, 2);
			cg_stat$profile_base = addrel (cg_stat$link_base, cg_stat$profile_start);
			cg_stat$link_pos = cg_stat$profile_start + amt;
		     end;

		cg_stat$profile_base -> long_profile_header.last_offset = dummy_entry_offset;
	     end;

	else do;
		cg_stat$profile_option = profile_size ^= 0;
		if cg_stat$profile_option
		then do;
			amt = profile_width * (profile_size + 1);

			if cg_stat$separate_static
			then do;
				cg_stat$profile_base = cg_stat$stat_base;
				cg_stat$profile_pos = cg_stat$stat_pos;
				cg_stat$stat_pos = cg_stat$stat_pos + amt;
			     end;
			else do;
				cg_stat$profile_base = cg_stat$link_base;
				cg_stat$profile_pos = cg_stat$link_pos;
				cg_stat$link_pos = cg_stat$link_pos + amt;
			     end;
		     end;
	     end;

	cg_stat$generate_map = generate_map | cg_stat$table_option | cg_stat$profile_option | cg_stat$long_profile;

	cg_stat$link_begin = cg_stat$link_pos;
	cg_stat$list_break (1) = cg_stat$text_pos;

/* generate linkage section */

	call gen_pl1_linkage$init_linkage;
	call gen_pl1_linkage (root);

/* assign multi-word constants */

	cg_stat$list_break (2), text_pos = cg_stat$text_pos;

	p = cg_stat$constant_list;
	do while (p ^= null);

	     q = p -> symbol.equivalence;
	     if q ^= null
	     then do;
		     q -> symbol.passed_as_arg =
			q -> symbol.passed_as_arg
			| (p -> symbol.passed_as_arg | p -> symbol.arg_descriptor | p -> symbol.aliasable);
		     goto loop;
		end;

	     if p -> symbol.allocate
	     then do;

		     q = p -> symbol.initial;
		     amt = p -> symbol.c_word_size;

		     if amt = 0
		     then go to clear;

		     if amt > 2
		     then do;
			     clength = p -> symbol.c_bit_size;
			     if p -> symbol.char
			     then do;
				     clength = divide (clength, bits_per_char, 24, 0);
				     if verify (q -> based_cs, substr (q -> based_cs, 1, 1)) = 0
				     then go to clear;
				end;
			     else if p -> symbol.bit
			     then if (q -> based_bs = "0"b) | (^q -> based_bs = "0"b)
				then go to clear;
			end;
		     else if amt = 1
		     then do;
			     if p -> symbol.passed_as_arg
			     then goto put;
			     if p -> symbol.arg_descriptor
			     then goto put;
			     if p -> symbol.dcl_type = by_declare & table_option
			     then goto put;
			     if p -> symbol.dimensioned
			     then goto put;
			     if p -> symbol.aliasable
			     then goto put;

			     if q -> half.left = "0"b
			     then goto clear;
			     if q -> half.right = "0"b
			     then goto clear;
			     if q -> half.left ^= (18)"1"b
			     then goto put;

clear:
			     p -> symbol.allocate = "0"b;
			     goto loop;
			end;

		     if amt = 2 | p -> symbol.boundary = mod2_
		     then text_pos = text_pos + mod (text_pos, 2);

put:
		     p -> symbol.location = text_pos;
		     p -> symbol.allocated = "1"b;

		     addrel (text_base, text_pos) -> image = q -> image;

		     text_pos = text_pos + amt;
		end;

loop:
	     p = p -> symbol.multi_use;
	end;

	cg_stat$list_break (3), cg_stat$text_pos = text_pos;

	if ^link
	then cg_stat$entry_arg = null;
	else do;

/* generate sequence to get ptr to operator segment */

		call expmac ((get_ops_mac), c_a (compile_link ("pl2_operators_$entry_operators", "0"b, 0), 9));

/* get reference node to record where we put sequence just generated
	        (we can't use c_a since there may be a number of prologue statements
	         compiled before we ever use the reference node in an entry) 	     */

		p = create_reference (null);
		p -> reference.ic_ref = "1"b;
		p -> reference.tag = "000100"b;	/* IC */
		p -> reference.address.offset = bit (fixed (text_pos, 15), 15);
		p -> reference.no_address = "0"b;
		p -> reference.perm_address = "1"b;
		cg_stat$entry_arg = p;
	     end;

	cg_stat$list_break (4) = cg_stat$text_pos;

/* create symbol table header and generate run-time
	   symbol table if it is needed */

	call gen_pl1_symbol$beg_symbol;

	if dummy_block ^= null
	then cg_stat$dummy_block = dummy_block;
	else cg_stat$dummy_block = create_block (internal_procedure, null);

	cg_stat$jump_label = create_label (cg_stat$dummy_block, null, (by_compiler));
	cg_stat$dummy_statement = create_statement ((9)"0"b, cg_stat$dummy_block, null, (12)"0"b);
	cg_stat$cur_level = 0;

	cg_stat$encoded_values = null;
	if cg_stat$generate_symtab | table_option
	then do;

/* generate run-time symbol table */

		code = mst$block_nodes (cg_stat$root, 0);

/* process the OK lists for get data */

		text_pos = cg_stat$text_pos;

		ok = ok_ptr;
		do while (ok ^= null);
		     q = addrel (text_base, text_pos);
		     qr = addrel (text_reloc_base, text_pos);
		     p = ok -> element (2);

		     q -> ok_list.number = p -> operator.number;
		     p -> operator.number = text_pos;

		     do i = 1 to q -> ok_list.number;
			q -> ok_list.offset (i) = bit (p -> operand (i) -> reference.symbol -> symbol.runtime, 18);
			qr -> ok_list_reloc.offset (i) = rc_s;
		     end;

		     text_pos = text_pos + divide (q -> ok_list.number + 3, 2, 18, 0);
		     ok = ok -> element (1);
		end;

		cg_stat$text_pos = text_pos;
	     end;

/* compile formats */

	if cg_stat$format_list ^= null
	then call compile_formats;

/* compile the program !! */

	cg_stat$map_start = cg_stat$sym_pos;
	cg_stat$statement_map.first = bit (cg_stat$map_start, 18);

	cg_stat$save_exp_called, cg_stat$extended_stack = "0"b;
	call compile_block (cg_stat$root);

/* now assign any constants that were generated during compilation
	   and any single word constants not usable via direct modifier */

	text_pos = cg_stat$text_pos;

	p = cg_stat$constant_list;
	do while (p ^= null);

	     if p -> symbol.allocated
	     then goto step;

	     if p -> symbol.allocate
	     then do;

		     q = p -> symbol.equivalence;
		     if q = null
		     then q = p;
		     else if q -> symbol.allocated
		     then do;
			     n = q -> symbol.location;
			     call fill_use (p, n);
			     goto step;
			end;

		     amt = q -> symbol.c_word_size;
		     if amt = 2 | q -> symbol.boundary = mod2_
		     then text_pos = text_pos + mod (text_pos, 2);

		     call fill_use (p, text_pos);

		     if q ^= p
		     then call fill_use (q, text_pos);

		     if p -> symbol.storage_block
		     then call gen_relocation;

		     q = addrel (text_base, text_pos);
		     q -> image = p -> symbol.initial -> image;

		     text_pos = text_pos + amt;
		end;

step:
	     p = p -> symbol.multi_use;
	end;

	cg_stat$text_pos = text_pos;

/* finish the long_profile */

	if cg_stat$long_profile
	then cg_stat$profile_base -> long_profile_header.nentries =
		divide (cg_stat$profile_pos - size (long_profile_header), size (long_profile_entry), 17, 0);

/* finish the symbol table */

	call gen_pl1_symbol$end_symbol;

/* finish up the object segment */

	on out_of_bounds call cg_error (311, cg_stat$max_program_size);

	text_pos = cg_stat$text_pos;
	def_pos = cg_stat$def_pos;
	stat_pos = cg_stat$stat_pos;
	link_pos = cg_stat$link_pos;
	sym_pos = cg_stat$sym_pos;

	defrel = text_pos;
	cg_stat$link_rel, linkrel = divide (defrel + def_pos + 1, 2, 17, 0) * 2;
	cg_stat$stat_rel, statrel = divide (linkrel + link_pos + 1, 2, 17, 0) * 2;
	cg_stat$sym_rel, symbolrel = divide (statrel + stat_pos + 1, 2, 17, 0) * 2;

	addrel (text_base, defrel) -> def_image = cg_stat$def_base -> def_image;
	addrel (text_base, linkrel) -> link_image = cg_stat$link_base -> link_image;
	if stat_pos > 0
	then addrel (text_base, statrel) -> stat_image = cg_stat$stat_base -> stat_image;
	addrel (text_base, symbolrel) -> symbol_image = cg_stat$sym_base -> symbol_image;

/* fill in standard object map */

	n = divide (symbolrel + sym_pos + 1, 2, 17, 0) * 2;
	p = addrel (text_base, n);
	cg_stat$objmap_pt = p;

	p -> object_map.decl_vers = 2;
	p -> object_map.identifier = "obj_map";
	p -> object_map.text_length = bit (text_pos, 18);
	p -> object_map.definition_offset = bit (defrel, 18);
	p -> object_map.definition_length = bit (def_pos, 18);
	p -> object_map.linkage_offset = bit (linkrel, 18);
	p -> object_map.linkage_length = bit (link_pos, 18);
	if cg_stat$separate_static
	then do;
		p -> object_map.static_offset = bit (statrel, 18);
		p -> object_map.static_length = bit (stat_pos, 18);
	     end;
	else do;
		p -> object_map.static_offset = bit (fixed (linkrel + 8, 18), 18);
		p -> object_map.static_length = bit (fixed (cg_stat$link_begin - 8, 18), 18);
	     end;
	p -> object_map.symbol_offset = bit (symbolrel, 18);
	p -> object_map.symbol_length = bit (sym_pos, 18);

	p -> object_map.format.relocatable, p -> object_map.format.procedure, p -> object_map.format.standard = "1"b;
	p -> object_map.format.separate_static = cg_stat$separate_static;

	addrel (p, size (p -> object_map)) -> map_ptr = bit (n, 18);

/* compute bit count of object segment */

	n = n + size (p -> object_map) + 1;
	cg_stat$bit_count = n * 36;

	call hcs_$set_bc_seg (text_base, cg_stat$bit_count, code);

	call hcs_$get_usage_values (pages, cpu, i);

	revert out_of_bounds;

	cg_stat$cur_statement = null;

	if produce_listing
	then do;
		if symbols_on
		then call print (cg_stat$root, print_cp_dcl, "0"b);

		call pl1_print$non_varying_nl ("", 0);

		call error_finish;

		if map
		then do;
			call pl1_print$non_varying_nl ("", 0);
			call display_pl1_map (cg_stat$root);
		     end;

		if assembly_list
		then do;
			call pl1_print$non_varying (ctl_char$ff, 1);
			call display_pl1_text (cg_stat$root);
		     end;
	     end;

done:
	call hcs_$get_usage_values (ppages, ccpu, i);

/* all done */

	if code ^= 0
	then call com_err_ (code, compiler_name, seg_name);

	bit_cnt = cg_stat$bit_count;
	npages = pages;
	ncpu = cpu;
	nnpages = ppages;
	nncpu = ccpu;

	pl1_stat_$version = 0;

	call release_temp_segments_ (my_name, temp_segs, code);
	if code ^= 0
	then goto release_failed;

	if cg_stat$separate_static
	then do;
		call release_temp_segments_ (my_name, ss_temp_seg, code);
release_failed:
		if code ^= 0
		then do;
			call com_err_ (code, my_name, "release_temp_segments_");
			if cg_stat$debug
			then do;
				call ioa_ ("debug: ");
				call debug;
			     end;
		     end;
	     end;

	return;

/* This entry is called by the command program to get the bit count
   when the listing segment has overflowed and a non-local return
   has been done past the code_generator */

return_bit_count:
     entry (bit_count, np, nc, nnp, nnc);

dcl	(bit_count, np, nnp)
			fixed bin,
	(nc, nnc)		fixed bin (71);

	pl1_stat_$version = 0;
	bit_count = cg_stat$bit_count;
	np = pages;
	nc = cpu;
	nnp = ppages;
	nnc = ccpu;

	return;

fill_use:
     proc (pt, loc);

dcl	pt		ptr,
	loc		fixed bin (18);

dcl	p		ptr;

	p = pt;
	call expmac$fill_usage (loc, (p -> symbol.location));
	p -> symbol.location = loc;
	if p -> symbol.varying
	then p -> symbol.location = p -> symbol.location + 1;
	p -> symbol.allocated = "1"b;

	if p -> symbol.runtime
	then addrel (cg_stat$sym_base, p -> symbol.runtime) -> runtime_symbol.address.location = bit (loc, 18);
     end fill_use;

stk_add:
     proc (k) returns (ptr);

dcl	k		fixed bin (15),
	q		ptr;

	q = create_reference (null);
	q -> reference.even, q -> reference.ext_base = "1"b;
	q -> reference.no_address = "0"b;
	q -> reference.perm_address = "1"b;
	q -> reference.base = sp;
	q -> reference.address.offset = bit (k, 15);
	q -> reference.units = word_;

	return (q);
     end stk_add;

/* generates relocation bits for relocatable constants
   (relocatable constants are those constants remaining to
   be allocated after return from compile_block that are
   declared with symbol.storage_block on) */

gen_relocation:
     proc;

dcl	c		ptr;
dcl	(i, rscan)	fixed bin;

dcl	1 descriptor	(amt) aligned based,
	  2 base		bit (3) unal,
	  2 offset	bit (15) unal,
	  2 fract		bit (2) unal,
	  2 type		bit (4) unal,
	  2 dscale	fixed bin (5) unal,
	  2 dlength	bit (6) unal;

	c = p -> symbol.initial;

	if p -> symbol.boundary < mod2_
	then do;

/* EIS descriptors */

		rscan = text_pos;
		do i = 1 to amt;
		     if c -> descriptor (i).base = lp
		     then addrel (text_reloc_base, rscan) -> half.left = rc_is15;
		     rscan = rscan + 1;
		end;
	     end;

	else do rscan = text_pos + 2 to text_pos + amt - 1 by 2;

/* arg list fileed with ITP modifiers
		        (skip over first doubleword) */

		c = addrel (c, 2);

		if c -> itp.itp_mod = "100001"b	/* 41(8) - ITP */
		then if c -> itp.pr_no = lp
		     then addrel (text_reloc_base, rscan + 1) -> half.left = rc_is18;
		     else ;
		else if c -> itp.itp_mod = "000000"b	/* 0 - ordinary indirect word */
		then addrel (text_reloc_base, rscan) -> half.left = rc_t;
	     end;
     end gen_relocation;

     end code_gen_;
