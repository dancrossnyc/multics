/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to create symbol table for PL/I

   Initial Version:  3 June 1970 by BLW
	Modified: 20 May 1971 by BLW
	Modified: 10 March 1972 by BLW for Version II
	Modified:  3 October 1972 by BLW
	Modified: 21 January 1973 by BLW for controlled
	Modified: 23 October 1973 by BLW for pictures 
	Modified:	13 October 1975 by RAB to fix 1430
	Modified:	23 August 1976 by RAB to fix 1516
	Modified:	10 November 1976 by RAB to fix 1548
	Modified:	18 July 1977 to diagnose over-large separation between declarations of a var 
	Modified: 17 July 1978 for unsigned binary by PCK
	Modified:	6 September 1978 by RAB to fix 1785
	Modified:	27 September 1978 by RAB to straighten out filling in the data_type field.
	Modified: 23 January 1979 by DS to fix bug 1817
	Modified: 25 Apr 1979 by PCK to implement 4-bit decimal.
	Modified: 25 March 1980 by M. N. Davidoff for new sym_sort_alphabetic calling sequence that is independent of
		pl1_symbol_print.
	Modified: 830509 BIM for symbol.explicit_packed.
*/
/* format: style3 */
mst$block_nodes:
     proc (pt, father) returns (fixed bin (18));

dcl	pt		ptr,			/* points at block node */
	father		fixed bin (18);		/* symbol location of father */

dcl	(
	cg_static_$sym_base,
	cg_static_$sym_reloc_base,
	cg_static_$cur_block,
	cg_static_$root
	)		ptr ext,
	cg_static_$table_option
			bit (1) ext,
	cg_static_$compiler_name
			char (12) varying ext,
	(
	cg_static_$cur_level,
	cg_static_$sym_pos,
	cg_static_$sym_origin
	)		fixed bin ext;

dcl	(p, p1, p2, bp, q, prev, sym_ptr, srp, cb, ref)
			ptr,
	(base_list, offset_list, block_list, quick_list)
			ptr int static,
	vec		(0:5) fixed bin (18) int static,
	(max_n, min_n)	fixed bin int static,
	(sym_pos, sym_loc, prev_loc, i, k, j, jstart, delta, units)
			fixed bin (18),
	co		fixed bin (31),
	lgth		(0:6) fixed bin (16) int static init (1, 2, 4, 8, 16, 32, 64);
dcl	get_data		bit (1) aligned;
dcl	(n, dtype, inc)	fixed bin (18),
	next_offset	fixed bin (14),
	class		fixed bin (4);

dcl	max_token_length	fixed bin int static init (256),
						/* expected max length */
	1 tokens		(256 /* max_token_length */) int static,
	  2 first		unal bit (18),		/* offset of first token with this length */
	  2 last		unal bit (18);		/* offset of last token with this length */

dcl	(addr, addrel, bit, divide, fixed, max, min, null, rel, string, substr, subtract)
			builtin;

dcl	mst$block_nodes	entry (ptr, fixed bin (18)) returns (fixed bin (18)),
	mst$data_nodes	entry (ptr, fixed bin (18)) returns (fixed bin (18));
dcl	sym_sort_alphabetic$by_size
			entry (ptr, fixed bin);
dcl	create_list	entry (fixed bin) returns (ptr),
	e_v		entry (ptr, fixed bin (35), ptr, fixed bin (31), fixed bin) returns (bit (36) aligned),
	error		entry (fixed bin, ptr, ptr);

dcl	(
	ext_entry_in_type	init (26),
	ext_entry_out_type	init (27),
	int_entry_type	init (25),
	picture_type	init (63)
	)		fixed bin static;

dcl	reloc		(0:9) bit (36) aligned based;

dcl	1 acc		aligned based,
	  2 count		unal bit (9),
	  2 string	unal char (n);

dcl	1 record		based,
	  2 next		ptr,
	  2 ptr		ptr,			/* points at symbol for ptr base or offset area */
	  2 sym_loc	fixed bin;		/* location of symbol node */

%include pl1_tree_areas;
%include token_list;
%include block;
%include list;
%include operator;
%include statement;
%include token;
%include label;
%include symbol;
%include reference;
%include array;
%include nodes;
%include boundary;
%include declare_type;
%include token_types;
%include block_types;
%include op_codes;
%include system;
%include relbts;
%include reloc_lower;
%include runtime_symbol;
%include pl1_descriptor_type_fcn;

/* program */

	bp = pt;

	if bp = cg_static_$root
	then do;
		base_list, offset_list, block_list, quick_list = null;
		max_n = 1;
		min_n = 1000;

		do i = 1 to max_token_length;
		     tokens.first (i), tokens.last (i) = "0"b;
		end;
	     end;

	sym_pos = cg_static_$sym_pos;
	sym_ptr = addrel (cg_static_$sym_base, sym_pos);

	cg_static_$cur_block = bp;
	cg_static_$cur_level = bp -> block.level;

	if bp -> block.block_type = begin_block
	then goto b1;

	if bp -> block.main = null
	then goto b1;
	q = bp -> block.main -> statement.labels -> element (2) -> reference.symbol -> symbol.token;

	if q -> token.loc = "0"b
	then call make_acc;

	sym_ptr -> runtime_block.name = bit (fixed (262144 + (fixed (q -> token.loc, 18) - sym_pos), 18), 18);

b1:
	bp -> block.symbol_block = sym_pos;

	p = create_list (2);
	p -> element (2) = sym_ptr;
	p -> element (1) = block_list;
	block_list = p;

	sym_ptr -> runtime_block.flag = "1"b;
	sym_ptr -> runtime_block.standard = "1"b;
	sym_ptr -> runtime_block.quick = bp -> block.no_stack;

	if sym_ptr -> runtime_block.quick
	then do;
		sym_ptr -> runtime_block.entry_info = bit (bp -> block.entry_info, 18);
		q = bp -> block.owner;
		call make_record (quick_list);
	     end;

	sym_ptr -> runtime_block.fortran = cg_static_$compiler_name = "fortran";
	sym_ptr -> runtime_block.type = "011000"b;	/* 24 */
	sym_ptr -> runtime_block.header = bit (fixed (262144 - sym_pos, 18), 18);
	sym_ptr -> runtime_block.father = bit (fixed (262144 + (father - sym_pos), 18), 18);

	cg_static_$sym_pos = sym_pos + 10;
	if sym_ptr -> runtime_block.quick
	then cg_static_$sym_pos = cg_static_$sym_pos + 1;
	p = bp -> block.declaration;
	get_data = bp -> block.get_data;

	k = 0;
	do while (p ^= null);
	     q = p;

	     if p -> symbol.dcl_type = by_compiler
	     then goto step;

	     if p -> node.type = label_node
	     then if cg_static_$table_option
		then goto yes;
		else goto step;

	     if p -> symbol.cross_references = null & ^p -> symbol.allocate & ^get_data
	     then go to step;

	     if p -> symbol.builtin
	     then goto step;
	     if p -> symbol.condition
	     then goto step;

	     if p -> symbol.runtime ^= "0"b
	     then goto step;

	     do while (q -> symbol.father ^= null);
		q = q -> symbol.father;
	     end;

	     if q -> symbol.entry & q -> symbol.external & q -> symbol.constant & q -> symbol.initial = null
	     then goto step;

	     if q -> symbol.put_in_symtab
	     then goto yes;
	     if get_data
	     then goto yes;
	     if ^cg_static_$table_option
	     then goto step;

/* we have to set the qualifier fields of all reference nodes
	        hanging from symbol nodes in a defined structure to point
	        to the base reference of the defined variable */

yes:
	     if q -> node.type = symbol_node
	     then if q -> symbol.defined
		then call set_qualifier (q, p -> symbol.reference -> reference.qualifier);

	     sym_loc = mst$data_nodes (q, sym_pos);

	     if sym_loc = 0
	     then goto step;

	     k = k + 1;
	     token_list (k) = q;

step:
	     p = p -> symbol.next;
	end;

	if k = 0
	then goto do_son;

	call sym_sort_alphabetic$by_size (pl1_stat_$token_list_ptr, (k));

	prev = null;
	jstart = 1;

	do i = 1 to k;

	     p = token_list (i);
	     if p -> node.type = label_node
	     then sym_loc = fixed (p -> label.symbol_table, 18);
	     else sym_loc = fixed (p -> symbol.runtime, 18);

	     delta = sym_loc - sym_pos;

	     if prev = null
	     then sym_ptr -> runtime_block.start = bit (delta, 18);
	     else do;
		     n = sym_loc - prev_loc;
		     if n > 0
		     then prev -> runtime_symbol.brother = bit (fixed (n, 18), 18);
		     else prev -> runtime_symbol.brother = bit (fixed (262144 + n, 18), 18);
		end;

	     n = p -> symbol.token -> token.size;

	     do j = jstart to 4;
		if n >= lgth (j)
		then if sym_ptr -> runtime_block.chain (j) = "0"b
		     then do;
			     jstart = j + 1;
			     sym_ptr -> runtime_block.chain (j) = bit (delta, 18);
			end;
	     end;

	     prev = addrel (cg_static_$sym_base, sym_loc);
	     prev_loc = sym_loc;

	end;

do_son:
	if bp -> block.son ^= null
	then sym_ptr -> runtime_block.son = bit (fixed (mst$block_nodes ((bp -> block.son), sym_pos) - sym_pos, 18), 18);

	if bp -> block.brother ^= null
	then sym_ptr -> runtime_block.brother =
		bit (fixed (mst$block_nodes ((bp -> block.brother), father) - sym_pos, 18), 18);

	if bp ^= cg_static_$root
	then goto thru;

/* make symbol table of based variable specify symbol table of variable
	   mentioned in the based(p) phrase */

	p = base_list;
	do while (p ^= null);
	     sym_loc = p -> record.sym_loc;
	     q = addrel (cg_static_$sym_base, sym_loc);

	     n = fixed (p -> record.ptr -> runtime, 18) - sym_loc;
	     if n >= 0
	     then q -> runtime_symbol.location = bit (fixed (n, 18), 18);
	     else q -> runtime_symbol.location = bit (fixed (262144 + n, 18), 18);

	     p = p -> record.next;
	end;

/* make size field in symbol table of offset variable specify symbol
	   table of variable mentioned in the offset(a) phrase */

	p = offset_list;
	do while (p ^= null);
	     sym_loc = p -> record.sym_loc;
	     addrel (cg_static_$sym_base, sym_loc) -> runtime_symbol.size =
		fixed (p -> record.ptr -> runtime, 18) - sym_loc;

	     p = p -> record.next;
	end;

/* link quick blocks to their owners */

	p = quick_list;
	do while (p ^= null);
	     sym_loc = p -> record.sym_loc;
	     q = addrel (cg_static_$sym_base, sym_loc);

	     q -> runtime_block.owner_flag = "1"b;

	     n = p -> record.ptr -> block.symbol_block - sym_loc;
	     if n >= 0
	     then q -> runtime_block.owner = bit (fixed (n, 18), 18);
	     else q -> runtime_block.owner = bit (fixed (262144 + n, 18), 18);

	     p = p -> record.next;
	end;

/* link together the fragments of the token list */

	i = min_n;

link:
	sym_loc = fixed (tokens.last (i), 18);
	p = addrel (cg_static_$sym_base, sym_loc);

	do j = i + 1 to max_n;
	     if tokens.first (j)
	     then do;
		     k = fixed (tokens.first (j), 18) - sym_loc;
		     if k >= 0
		     then p -> runtime_token.next = bit (k, 18);
		     else p -> runtime_token.next = bit (fixed (262144 + k, 18), 18);

		     i = j;
		     goto link;
		end;
	end;

/* set vec(i) to location of first token whose length n
	   is such that 2 ** i <= n < 2 ** (i+1) */

	vec (0), vec (1), vec (2), vec (3), vec (4), vec (5) = 0;

	do i = 0 to 5;
	     do j = lgth (i) to lgth (i + 1);
		if tokens.first (j)
		then do;
			vec (i) = fixed (tokens.first (j), 18);
			goto next_i;
		     end;
	     end;
next_i:
	end;

/* now set the token(i) field in all of the blocks we processed */

	p = block_list;
	do while (p ^= null);
	     q = p -> element (2);

	     sym_loc = fixed (rel (q), 18) - cg_static_$sym_origin;

	     do i = 0 to 5;
		if vec (i) ^= 0
		then do;
			k = vec (i) - sym_loc;
			if k >= 0
			then q -> runtime_block.token (i) = bit (k, 18);
			else q -> runtime_block.token (i) = bit (fixed (262144 + k, 18), 18);
		     end;
	     end;

	     p = p -> element (1);
	end;

thru:
	return (sym_pos);

mst$data_nodes:
     entry (pt, father) returns (fixed bin (18));

	p = pt;
	cb = cg_static_$cur_block;

	if p -> node.type = symbol_node
	then if p -> symbol.defined
	     then call check_defined (p -> symbol.equivalence);

	sym_pos = cg_static_$sym_pos;
	sym_ptr = addrel (cg_static_$sym_base, sym_pos);

	q = p -> symbol.token;
	if q -> token.loc = "0"b
	then call make_acc;

	k = fixed (q -> token.loc, 18);
	sym_ptr -> runtime_symbol.name = bit (fixed (262144 + k - sym_pos, 18), 18);

	p1 = addrel (cg_static_$sym_base, k - 1);
	if p1 -> runtime_token.dcl
	then do;
		next_offset =
		     16384 + fixed (rel (addrel (p1, p1 -> runtime_token.dcl)), 18) - cg_static_$sym_origin - sym_pos;
		if next_offset > 0
		then sym_ptr -> runtime_symbol.next = bit (fixed (next_offset, 14), 14);
		else call error (366, null, p);
	     end;
	p1 -> runtime_token.dcl = bit (fixed (sym_pos - k + 1, 18), 18);

	sym_ptr -> runtime_symbol.father = bit (fixed (262144 + (father - sym_pos), 18), 18);

	sym_ptr -> runtime_symbol.flag = "1"b;

	srp = addrel (cg_static_$sym_reloc_base, sym_pos);

	if p -> node.type = label_node
	then goto lab;

	p -> runtime = bit (sym_pos, 18);

	sym_ptr -> runtime_symbol.level = bit (fixed (p -> symbol.level, 6), 6);

	sym_ptr -> runtime_symbol.aligned = p -> symbol.aligned;
	sym_ptr -> runtime_symbol.packed = p -> symbol.packed | p -> symbol.explicit_packed;
	if p -> symbol.scale >= 0
	then sym_ptr -> runtime_symbol.scale = bit (fixed (p -> symbol.scale, 8), 8);
	else sym_ptr -> runtime_symbol.scale = bit (fixed (256 + p -> symbol.scale, 8), 8);

	if ^p -> symbol.entry
	then if p -> symbol.picture
	     then do;
		     sym_ptr -> runtime_symbol.size = p -> symbol.general -> reference.symbol -> symbol.location;
		     srp -> reloc (4) = rc_a_t;
		end;
	     else if p -> symtab_size = null
	     then sym_ptr -> runtime_symbol.size = p -> symbol.c_dcl_size;
	     else srp -> reloc (4) = e_v (p, sym_ptr -> runtime_symbol.size, (p -> symtab_size), 0, 1);

	ref = p -> symbol.reference;

	if p -> symbol.picture
	then dtype = picture_type;

	else if p -> symbol.entry & p -> symbol.constant
	then if p -> symbol.external
	     then if p -> symbol.initial ^= null
		then dtype = ext_entry_in_type;
		else dtype = ext_entry_out_type;
	     else dtype = int_entry_type;

	else do;
		dtype = pl1_descriptor_type (substr (string (p -> symbol.attributes), 1, 36), p -> symbol.c_dcl_size);

		if p -> symbol.offset
		then do;
			q = p -> symbol.general;
			if q ^= null
			then if q -> node.type = reference_node
			     then if q -> reference.offset = null
				then do;
					q = q -> reference.symbol;
					call make_record (offset_list);
				     end;
		     end;
	     end;

	p2 = p;

	if p2 -> symbol.defined
	then do;

/* defined ok, change so actually encode storage class of
	        base reference */

		p2 = ref -> reference.qualifier -> reference.symbol;
		ref = p2 -> symbol.reference;
	     end;

	if p2 -> symbol.auto
	then do;

		if ref -> reference.qualifier = null
		then class = 1;
		else do;
			class = 2;
			p2 = ref -> reference.qualifier -> reference.symbol;
		     end;

		goto l2c;
	     end;

	if p2 -> symbol.based
	then do;
		class = 3;

		q = ref -> reference.qualifier;
		if q = null
		then goto l2;

		if q -> node.type = reference_node
		then do;
			if q -> reference.offset ^= null
			then goto l2;

			q = q -> reference.symbol;
			if q -> symbol.cross_references ^= null
			then call make_record (base_list);
		     end;

		goto l2;
	     end;

	if p2 -> symbol.parameter
	then do;

		if ref -> reference.qualifier -> node.type = operator_node
		then do;
			class = 9;
			if p2 -> symbol.father ^= null
			then p2 -> symbol.location = p2 -> symbol.father -> symbol.location;
		     end;
		else do;
			class = 8;
			p2 = ref -> reference.qualifier -> reference.symbol;
		     end;

		goto l2c;
	     end;

	if p2 -> symbol.static
	then do;
static:
		if p2 -> symbol.external
		then srp -> reloc (3) = rc_lp18;
		else srp -> reloc (3) = rc_is18;
		class = 4 + fixed (p2 -> symbol.external, 1);
		goto l2c;
	     end;

	if p2 -> symbol.constant
	then do;
		if p2 -> symbol.file
		then goto static;

		class = 12;
		goto l2c;
	     end;

	if p2 -> symbol.controlled
	then do;
		class = 6 + fixed (p2 -> symbol.external, 1);
		goto l2c;
	     end;

	class = 0;

l2c:
	sym_ptr -> runtime_symbol.location = bit (fixed (p2 -> symbol.location, 18), 18);
l2:
	sym_ptr -> runtime_symbol.class = bit (class, 4);

	ref = p -> symbol.reference;

	if class = 12
	then srp -> reloc (3) = rc_t;			/* text relocation */

	p2 = ref -> reference.offset;
	co = ref -> reference.c_offset;

	units = ref -> reference.units;
	if units = 0
	then goto ec;

	if units = word_
	then do;
		units = 0;
		goto ec;
	     end;

	if p2 = null
	then goto ec;

	if p2 -> node.type ^= operator_node
	then goto ec;

	if p2 -> op_code = mod_bit
	then goto elim;
	if p2 -> op_code = mod_byte
	then goto elim;
	if p2 -> op_code ^= mod_half
	then goto ec;

elim:
	p2 = p2 -> operand (3);

ec:
	if p2 = null
	then sym_ptr -> runtime_symbol.offset = co;
	else srp -> reloc (5) = e_v (p, sym_ptr -> runtime_symbol.offset, p2, co, 2);

	call encode_runtime_units (sym_ptr -> runtime_symbol.units, sym_ptr -> runtime_symbol.use_digit, units);

	q = p -> symbol.array;

	if q = null
	then do;
		if sym_ptr -> runtime_symbol.offset = 0
		then do;
			sym_ptr -> runtime_symbol.simple = "1"b;
			inc = 5;
		     end;
		else inc = 6;
		goto l3;
	     end;

	units = q -> array.offset_units;
	if units = word_
	then units = 0;

	call encode_runtime_units (sym_ptr -> runtime_symbol.array_units, sym_ptr -> runtime_symbol.use_digit, units);

	sym_ptr -> runtime_symbol.ndims = bit (fixed (q -> number_of_dimensions, 6), 6);
	inc = 7 + 3 * q -> number_of_dimensions;

	p2 = q -> symtab_virtual_origin;
	if p2 = null
	then sym_ptr -> runtime_symbol.virtual_org = q -> c_virtual_origin;
	else srp -> reloc (6) = e_v (p, sym_ptr -> virtual_org, p2, (q -> c_virtual_origin), 3);

	p2 = addr (sym_ptr -> runtime_symbol.bounds (q -> number_of_dimensions));
	i = inc - 1;
	q = q -> array.bounds;

	do while (q ^= null);

	     if q -> symtab_lower = null
	     then p2 -> runtime_bound.lower = q -> c_lower;
	     else srp -> reloc (i - 2) = e_v (p, p2 -> runtime_bound.lower, (q -> symtab_lower), 0, 4);

	     if q -> symtab_upper = null
	     then p2 -> runtime_bound.upper = q -> c_upper;
	     else srp -> reloc (i - 1) = e_v (p, p2 -> runtime_bound.upper, (q -> symtab_upper), 0, 5);

	     if q -> c_multiplier ^= 0
	     then p2 -> runtime_bound.multiplier = q -> c_multiplier;
	     else if q -> symtab_multiplier = null
	     then call error (339, null, p);
	     else srp -> reloc (i) = e_v (p, p2 -> runtime_bound.multiplier, (q -> symtab_multiplier), 0, 6);

	     p2 = addrel (p2, -3);
	     q = q -> bound.next;
	     i = i - 3;

	end;

l3:
	cg_static_$sym_pos = sym_pos + inc;

	sym_ptr -> runtime_symbol.type = bit (fixed (dtype, 6), 6);

	q = p -> symbol.son;
	if q = null
	then goto done;

	prev_loc = mst$data_nodes (q, sym_pos);
	sym_ptr -> runtime_symbol.son = bit (fixed (prev_loc - sym_pos, 18), 18);

	q = q -> symbol.brother;
	do while (q ^= null);
	     sym_loc = mst$data_nodes (q, sym_pos);
	     addrel (cg_static_$sym_base, prev_loc) -> runtime_symbol.brother = bit (fixed (sym_loc - prev_loc, 18), 18);
	     prev_loc = sym_loc;
	     q = q -> symbol.brother;
	end;

done:
ret:
	return (sym_pos);

defined_error:
	call error (306, null, p);
	return (0);

/* have label node */

lab:
	p -> label.symbol_table = bit (sym_pos, 18);
	sym_ptr -> runtime_symbol.type = "011000"b;	/* label constant */

	if p -> label.array
	then do;
		inc = 10;
		sym_ptr -> runtime_symbol.ndims = "000001"b;
		sym_ptr -> runtime_symbol.location = bit (fixed (p -> label.location, 18), 18);

		sym_ptr -> runtime_symbol.virtual_org, sym_ptr -> runtime_symbol.bounds (1).lower = p -> label.low_bound;
		sym_ptr -> runtime_symbol.bounds (1).upper = p -> label.high_bound;
		sym_ptr -> runtime_symbol.bounds (1).multiplier = 1;
	     end;
	else do;
		inc = 4;
		sym_ptr -> runtime_symbol.simple = "1"b;
	     end;

	sym_ptr -> runtime_symbol.class = "1100"b;
	srp -> reloc (3) = rc_t;

	cg_static_$sym_pos = sym_pos + inc;

	goto ret;

make_record:
     proc (list_head);

dcl	list_head		ptr;

dcl	tp		ptr;

	allocate record in (tree_area) set (tp);
	tp -> record.next = list_head;
	list_head = tp;

	tp -> record.sym_loc = sym_pos;
	tp -> record.ptr = q;
     end;

set_qualifier:
     proc (sym_pt, qual);

dcl	sym_pt		ptr,			/* points at symbol node */
	qual		ptr unal;			/* points at reference node*/

dcl	sp		ptr;

	sp = sym_pt;
	do while (sp ^= null);
	     sp -> symbol.reference -> reference.qualifier = qual;
	     if sp -> symbol.son ^= null
	     then call set_qualifier ((sp -> symbol.son), qual);

	     sp = sp -> symbol.brother;
	end;

     end;

check_defined:
     proc (tree_in);

dcl	tree_in		ptr unal,
	tree		ptr,
	i		fixed bin;

	tree = tree_in;

	if tree = null
	then return;

	if tree -> node.type = operator_node
	then do i = 1 to tree -> operator.number;
		call check_defined (tree -> operand (i));
	     end;

	else if tree -> node.type = list_node
	then do i = 1 to tree -> list.number;
		call check_defined (tree -> element (i));
	     end;

	else if tree -> node.type = reference_node
	then call check_defined (tree -> reference.offset);

	else if tree -> node.type = token_node
	then do;
		if tree -> token.type = asterisk
		then goto defined_error;
		if tree -> token.type = isub
		then goto defined_error;
	     end;

     end;

make_acc:
     proc;

dcl	k		fixed bin (18),
	(tp1, tp2, tp3)	ptr;

/* this procedure is called to add a token to the list of tokens being
	        maintained in the symbol buffer. tokens.first(n) specifies the first
	       token on the list of tokens of size n, tokens.last(n) specifies
	       the last token on the list */

	n = q -> token.size;
	min_n = min (n, min_n);
	max_n = max (n, max_n);

	tp1 = addrel (sym_ptr, 1);
	tp1 -> acc.string = q -> token.string;
	tp1 -> acc.count = bit (fixed (n, 9), 9);

	q -> token.loc = bit (fixed (sym_pos + 1, 18), 18);

	if tokens.first (n) = (18)"0"b
	then do;
		tokens.first (n), tokens.last (n) = bit (sym_pos, 18);
		goto bump;
	     end;

	tp2 = null;
	tp3 = addrel (cg_static_$sym_base, tokens.first (n));
	do while (tp3 ^= null);
	     if addrel (tp3, 1) -> acc.string > tp1 -> acc.string
	     then do;
		     if tp2 = null
		     then tokens.first (n) = bit (sym_pos, 18);
		     else do;
			     k = sym_pos - fixed (rel (tp2), 18) + cg_static_$sym_origin;
			     if k >= 0
			     then tp2 -> runtime_token.next = bit (k, 18);
			     else tp2 -> runtime_token.next = bit (fixed (262144 + k, 18), 18);
			end;

		     k = fixed (rel (tp3), 18) - cg_static_$sym_origin - sym_pos;
		     if k >= 0
		     then sym_ptr -> runtime_token.next = bit (k, 18);
		     else sym_ptr -> runtime_token.next = bit (fixed (262144 + k, 18), 18);

		     goto bump;
		end;

	     tp2 = tp3;
	     if tp3 -> runtime_token.next
	     then tp3 = addrel (tp3, tp3 -> runtime_token.next);
	     else tp3 = null;
	end;

/* new token belongs at end of list */

	tokens.last (n) = bit (sym_pos, 18);
	k = sym_pos - fixed (rel (tp2), 18) + cg_static_$sym_origin;
	if k >= 0
	then tp2 -> runtime_token.next = bit (k, 18);
	else tp2 -> runtime_token.next = bit (fixed (262144 + k, 18), 18);

/* update position in symbol buffer by number of words in string plus 1 */

bump:
	k = divide (n + 4, 4, 17, 0) + 1;
	sym_ptr = addrel (sym_ptr, k);
	sym_pos = sym_pos + k;

     end;						/* Convert internal encoding of offset units to external (runtime symbol table) encoding */

encode_runtime_units:
     procedure (runtime_units, half_really_digit, internal_units);

/* parameters */

dcl	runtime_units	bit (2) unaligned;
dcl	half_really_digit	bit (1) unaligned;
dcl	internal_units	fixed bin (18);

	if internal_units <= bit_
	then runtime_units = bit (fixed (internal_units, 2), 2);
	else if internal_units = digit_
	then do;
		runtime_units = bit (fixed (character_, 2), 2);
		half_really_digit = "1"b;		/* External encoding of half_
						   is numerically equal to the internal encoding of char_ */
	     end;
	else runtime_units = bit (subtract (internal_units, 1, 2, 0), 2);

     end /* encode_runtime_units */;

     end /* mst */;
