/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) BULL HN Information Systems Inc., 1989   *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(1989-09-27,RWaters), approve(1989-09-27,MCR8068),
     audit(1989-09-27,Vu), install(1989-10-02,MR12.3-1080):
     Fixed to remove duplicate declaration attributes.
  2) change(1990-05-03,Huen), approve(1990-05-03,MCR8169),
     audit(1990-05-18,Gray), install(1990-05-30,MR12.4-1012):
     pl1_1885: Fix pl1 optimizer to handle the concatenation of a common string
     expression correctly.
  3) change(2017-02-09,Swenson), approve(2017-02-09,MCR10029),
     audit(2017-02-11,Davidoff), install(2017-02-11,MR12.6f-0016):
     Fix the previous fix (MCR8169) to string concatenation.  See
     http://multics-trac.swenson.org/ticket/9 for details.
                                                   END HISTORY COMMENTS */


/* program to compile concatenation operator

   Initial Version: 28 December, 1968 by BLW
	Modified:  9 September 1971 by BLW for Version II
	Modified: 27 July 1972 by BLW
	Modified:	8 June 1973 by RAB for EIS
	Modified: 14 Sept 1979 by PCK to fix bug 1855
*/

cat_op:	proc(node_pts,refs,code);

dcl	node_pts ptr,		/* points at operator node */
	refs(3) ptr,		/* reference nodes for operands */
	code fixed bin;		/* local context */

dcl	node_pt ptr defined (node_pts),
	ref(3) ptr defined (refs);

dcl	(p1,p2,p3,p,q2,q3) ptr,
	(dt,type,n,s2,size1,size2,size3) fixed bin,
	macro fixed bin(15),
	tag bit(4) aligned,
	base bit(3) aligned,
	(lunits,word_offset) fixed bin(15),
	string_temp entry(ptr,ptr,ptr) returns(ptr),
	adjust_ref_count entry(ptr,fixed bin),
	compile_exp entry(ptr),
	(compile_exp$save,compile_exp$save_exp) entry(ptr) returns(ptr),
	m_a entry(ptr,bit(2) aligned),
	base_man$load_any_var entry(fixed bin,ptr,bit(3) aligned),
	load_size$xr_or_aq entry(ptr,bit(4) aligned),
	state_man$erase_reg entry(bit(19) aligned),
	expmac$eis entry(fixed bin(15),ptr),
	aq_man$clear_q entry,
	c_a entry(fixed bin,fixed bin) returns(ptr),
	expmac$one entry(fixed bin(15),ptr,fixed bin),
	expmac entry(fixed bin(15),ptr);

dcl	(addr,divide,fixed,mod,null) builtin;

dcl	1 p1_address aligned based(addr(p1 -> reference.address)),
	2 base bit(3) unal,
	2 offset fixed bin(14) unal,
	2 op bit(9) unal,
	2 no_address bit(1) unal,
	2 inhibit bit(1) unal,
	2 ext_base bit(1) unal,
	2 tag bit(6) unal;


dcl (	cat_move_chars	init(218),
	lda		init(1),
	ldq		init(7),
	sta		init(4),
	ora		init(46),
	arl		init(245),
	lrl		init(62)) fixed bin(15) int static;

%include boundary;
%include cgsystem;
%include cg_reference;
%include operator;
%include data_types;
%include machine_state;

begin:	p = node_pt;

	p1 = ref(1);
	p2 = ref(2);
	p3 = ref(3);

	q2 = p -> operand(2);
	q3 = p -> operand(3);

	type = p1 -> reference.data_type;
	n = convert_size(type);
	size1 = p1 -> reference.c_length * n;
	size2 = p2 -> reference.c_length * n;
	size3 = p3 -> reference.c_length * n;
	s2 = fixed(size2 > bits_per_word,1);
	dt = type - char_string;

	goto switch(code);

	/* have atm || exp */

switch(2):
ae:	if p1 -> reference.long_ref then p3 = compile_exp$save_exp(q3);

	/* have atm || atm */

switch(3):
aa:	if p1 -> reference.long_ref
	then do;

	     /* resultant string is long */

/* Want to protect possible length expr of p2 */

aa_l1:	     if ^ p2 -> reference.shared
		then p2 -> reference.ref_count = p2 -> reference.ref_count + 1;

/* Call string_temp to allocate a temporary and move in p2 */

	     p1 = string_temp(p,p2,p3);

/* THE FOLLOWING SECTION SETS UP A MOVE TO EFFECT THE CONCATENATION */

aa_l3:

/* If p2's length was able to be inserted directly into a descriptor, try to optimize
  by changing the constant offset of the target */

	     if p2 -> reference.length = null
	     then if p2 -> reference.c_length < 4096
		then if ^ p2 -> reference.varying_ref
		     then do;
			call m_a(p1,"11"b);

			if dt = 0
			then lunits = character_;
			else lunits = bit_;

			word_offset = divide(p2 -> reference.c_length,units_per_word(lunits),15,0)
				  + p1_address.offset;
			if word_offset < 16383
			then do;
			     p1 -> reference.c_f_offset = mod(p2 -> reference.c_length,units_per_word(lunits))
						  + p1 -> reference.c_f_offset;
			     if p1 -> reference.c_f_offset >= units_per_word(lunits)
			     then do;
				p1 -> reference.c_f_offset = p1 -> reference.c_f_offset - units_per_word(lunits);
				word_offset = word_offset + 1;
				end;
			     p1_address.offset = word_offset;
			     go to set_perm;
			     end;
			end;

/* This sequence is used when p2's length was in a register .  We use p2's length as the 
   offset in p1 in which to move p3 for the concatenation */

	     call load_size$xr_or_aq(p2,tag);

	     call m_a(p1,"11"b);

	     if p1 -> address.tag
	     then do;
		p1 -> reference.ref_count = p1 -> reference.ref_count + 1;
		p1 -> reference.perm_address = "1"b;
		call base_man$load_any_var(2,p1,base);
		end;

	     p1 -> address.tag = "00"b || tag;

/* Issue the move macro for the concatenation */

set_perm:	     p1 -> reference.perm_address = "1"b;

	     call expmac$eis(cat_move_chars+dt,p3);

	     if dt > 0
		then machine_state.indicators = -1;

	     p1 -> reference.perm_address = "0"b;

	     if ^ p2 -> reference.shared
		then call adjust_ref_count(p2,-1);

	     return;
	     end;

	/* resultant string is short */

	if p2 -> reference.c_length = 0
	then do;
	     call compile_exp(q3);
	     return;
	     end;

aa_2:	if size2 = bits_per_word & mod(code,2) ^= 0
	then do;
aa_2a:	     call expmac((lda),p2);
aa_2b:	     call expmac((ldq),p3);
	     end;
	else do;
aa_3:	     call compile_exp(q3);


	     call state_man$erase_reg("1"b);	/* shift won't flush the register first */

	     if size1 > bits_per_word
	     then do;
		macro = lrl;

		/* clear q if necessary, so we
		   won't have garbage left over */

		if size3 <= bits_per_word
		then if size2 ^= bits_per_word
		     then if a_reg.length < bits_per_two_words
			then call aq_man$clear_q;
		end;

	     else macro = arl;

	     call expmac(macro,c_a(size2,1));

	     call expmac$one((ora),p2,s2);
	     end;

	a_reg.size = size1;
	return;

	/* have exp || exp */

switch(0):
ee:	if ^ p1 -> reference.long_ref
	then do;
ee1:	     p2 = compile_exp$save(q2);
	     goto aa_3;
	     end;

	p3 = compile_exp$save_exp(q3);

	/* have exp || atm */

switch(1):
ea:	if ^ p1 -> reference.long_ref
	then do;
	     if size2 ^= bits_per_word then goto ee1;
	     if p2 -> reference.ref_count < 1 then do;
		call compile_exp(q2);
		goto aa_2b;
		end;
	     else do;
		p2 = compile_exp$save(q2);	/* needed later */
		goto aa_2a;
		end;
	     end;

ea1:	if p2 -> reference.long_ref | p2 -> reference.varying_ref
	     then call compile_exp(q2);
	     else p2 = compile_exp$save_exp(q2);

	goto aa_l1;

	end;
