/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to compile a statement

   Initial Version: 31 March 1971 by BLW for Version
   Modified:  6 February 1973 by BLW
   Modified: 28 February 1973 by RAB
   Modified: 12 June 1973 by RAB for EIS
   Modified: 1 November 1973 by RAB for snap & system
   Modified: 23 June 1975 by EEW for separate static
   Modified: 20 August 1975 by RAB to fix bug 1396
   Modified: 1 November 1975 by RAB to optimize if stmts
   Modified: 10 January 1976 by RAB for cg_stat$return_operator to fix 1453
   Modified: 1 July 1976 by RAB for label array improvements
   Modified: 27 Sept 1976 by RAB to fix 1523
   Modified: 1 Dec 1976 by RAB for -long_profile
   Modified: 23 Jan 1977 by RAB for combine_tests
   Modified: 10 Feb 1977 by RAB for multiple cond names in on stmt
   Modified: 9 Feb 1978 by RAB to check $agg_temps on end stmt
   Modified: 11 Feb 1978 by RAB to fix 1687
   Modified: 15 Feb 1978 by PCK to implement options(main) and the stop statement
   Modified 790807 by PG to remove jump_three_way.
   Modified: 16 Nov 1979 by PCK to fix 1858
   Modified: 9 November 1981 by M. N. Davidoff to fix bug 1931 in which return and stop statements
	have garbage long profile information.
   Modified: 4 January 1983 BIM to note statements that begin do loops.
*/
/* format: style3 */
compile_statement:
     proc (pt);

dcl	pt		ptr;			/* points at statement node */

/* external static */

dcl	(
	cg_stat$cur_block,
	cg_stat$cur_statement,
	cg_stat$text_base,
	cg_stat$first_ref,
	cg_stat$m_s_p,
	cg_stat$agg_temps,
	cg_stat$text_reloc_base,
	cg_stat$sym_base,
	cg_stat$sym_reloc_base,
	cg_stat$next_ref,
	cg_stat$cur_tree,
	cg_stat$return_operator,
	cg_stat$profile_base,
	cg_stat$stop_operator,
	cg_stat$return_main_operator
	)		ptr ext,
	cg_stat$star_symbol_up_zero
			bit (18) ext,
	cg_stat$old_id	bit (27) ext,
	(
	cg_stat$text_pos,
	cg_stat$sym_pos,
	cg_stat$map_start,
	cg_stat$cur_level,
	cg_stat$profile_pos,
	cg_stat$profile_start
	)		fixed bin (18) ext,
	(
	cg_stat$generate_symtab,
	cg_stat$table_option,
	cg_stat$skip_to_label,
	cg_stat$generate_map,
	cg_stat$separate_static,
	cg_stat$extended_stack,
	cg_stat$in_prologue,
	cg_stat$profile_option,
	cg_stat$support,
	cg_stat$long_profile,
	cg_stat$optimize,
	cg_stat$in_thunk
	)		bit (1) ext;

dcl	cg_stat$stop_id	aligned bit (27) ext;

/* automatic */

dcl	(
	cb,
	p,
	q,
	q1,
	q2,
	q3,
	q4,
	tree,
	save_cb,
	arg		(4),
	p1
	)		ptr,
	(nargs, profile_pos)
			fixed bin,
	macro		fixed bin (15),
	save_label	label,
	recovery_label	label int static,
	(a1, a2, atomic, replace)
			bit (1) aligned,
	on_options	bit (2) aligned,
	(st_type, op)	bit (9) aligned,
	(i, text_pos, n)	fixed bin (18);

/* based */

dcl	fix_bin		fixed bin based;

dcl	1 eax_ins		aligned based,
	  2 offset	unal bit (18);

dcl	(word, relocation)	bit (36) aligned based;

/* internal static */

dcl	(
	reset_stack	init (194),
	ret_chars		init (586),
	ret_bits		init (590),
	ret_words		init (480),
	nop_mac		init (528),
	aos_mac		init (309),
	lxl0		init (64),
	leave_begin_block	init (97),
	tra		init (169),
	enable_mac	init (291),
	enable_file	init (606),
	enable_file_2	init (593),
	ss_enter_begin_block
			init (512),
	enter_begin_block	init (197),
	return_mac	init (198),
	support_mac	init (305),
	long_profile_mac	init (699),
	quick_return_mac	init (299),
	set_stack		init (175),
	begin_return_mac	init (288),
	begin_return_main_mac
			init (729),
	stop_mac		init (726),
	return_main_mac	init (727)
	)		fixed bin (15) int static options (constant);

/* builtins */

dcl	(addr, addrel, bit, fixed, null, size, string, substr)
			builtin;

/* entries */

dcl	create_list	entry (fixed bin) returns (ptr);
dcl	create_label	entry (ptr, ptr, bit (3) aligned) returns (ptr);
dcl	decode_node_id	entry (ptr, bit (1) aligned) returns (char (120) varying),
	error		entry (fixed bin, ptr, ptr),
	xr_man$load_const	entry (fixed bin (31), fixed bin),
	(
	xr_man$super_lock,
	xr_man$super_unlock
	)		entry (fixed bin),
	expmac$many	entry (fixed bin (15), ptr, fixed bin),
	(
	stack_temp$free_aggregates,
	state_man$flush,
	state_man$discard_ms
	)		entry,
	(adjust_ref_count, compile_entry)
			entry (ptr, fixed bin (18)),
	state_man$merge_ms	entry (ptr),
	state_man$create_ms entry returns (ptr),
	state_man$erase_reg entry (bit (19) aligned),
	(ioa_$nnl, debug)	entry options (variable),
	expmac		entry (fixed bin (15), ptr),
	c_a		entry (fixed bin (18), fixed bin) returns (ptr),
	copy_temp		entry (ptr) returns (ptr),
	prepare_operand	entry (ptr, fixed bin, bit (1) aligned) returns (ptr),
	compile_exp	entry (ptr),
	compile_exp$save_exp
			entry (ptr) returns (ptr),
	base_man$load_var	entry (fixed bin, ptr, fixed bin),
	long_op$no_size	entry (ptr, fixed bin (15)),
	load_size		entry (ptr),
	make_mod		entry (fixed bin (17), fixed bin) returns (fixed bin (18)),
	expmac$fill_usage	entry (fixed bin (18), fixed bin (17)),
	expmac$zero	entry (fixed bin (15)),
	expmac$abs	entry (ptr, fixed bin),
	optimize_if	entry (ptr),
	combine_tests	entry (ptr, ptr),
	compile_block$begin_block
			entry (ptr),
	compile_tree	entry (ptr);

%include block;
%include reference;
%include symbol;
%include label;
%include statement;
%include operator;
%include list;
%include runtime_symbol;
%include nodes;
%include statement_types;
%include statement_map;
%include profile_entry;
%include long_profile;
%include op_codes;
%include block_types;
%include declare_type;
%include relbts;
%include data_types;
%include jump_complement;

/* program */

	p, cg_stat$cur_statement = pt;
	cb = cg_stat$cur_block;

	profile_pos = 0;

	recovery_label = done;

	if cg_stat$stop_id = string (p -> statement.source_id)
	then do;
		call ioa_$nnl ("Compiling ^p (^a).^/debug: ", pt, decode_node_id (p, "0"b));
		call debug;
	     end;

	st_type = p -> statement.statement_type;

	if st_type = format_statement
	then return;

	text_pos, p -> statement.object.start, p -> statement.object.finish = cg_stat$text_pos;

	if st_type = entry_statement | st_type = procedure_statement
	then do;
		q = create_list (2);
		q -> element (2) = p;
		q -> element (1) = cb -> block.entry_list;
		cb -> block.entry_list = q;

		cg_stat$skip_to_label = "0"b;
		if cg_stat$m_s_p = null
		then cg_stat$m_s_p = state_man$create_ms ();

		call compile_entry (pt, n);

		if (cg_stat$table_option | cg_stat$generate_symtab) & ^cb -> block.no_stack
		then do;
			addrel (cg_stat$text_base, n) -> word =
			     cg_stat$star_symbol_up_zero || bit (fixed (cb -> block.symbol_block, 18), 18);
			addrel (cg_stat$text_reloc_base, n) -> relocation = rc_lp18 || rc_s;
		     end;

		if cg_stat$table_option
		then do;
			p1 = p -> statement.labels -> element (2) -> reference.symbol;
			addrel (cg_stat$sym_base, p1 -> symbol.runtime) -> runtime_symbol.location =
			     bit (fixed (p1 -> symbol.location, 18), 18);
		     end;

		if cg_stat$long_profile
		then if p -> statement.labels -> element (2) -> reference.symbol -> symbol.external
		     then do;
			     call gen_long_profile (dummy_entry_offset);
			     call gen_long_profile (dummy_entry_offset);
			     call gen_long_profile (control_entry_offset);
			     call gen_long_profile (control_entry_offset);
			     call gen_long_profile (dummy_entry_offset);
			end;

		goto done;
	     end;

	q = p -> statement.labels;
	if q = null & cg_stat$skip_to_label
	then return;

	if p -> statement.begins_loop
	& mod (text_pos, 2) ^= 0
	     then do;
	     call expmac$zero (nop_mac);
	     text_pos = text_pos + 1; /* start on even boundary */
	end;

	a1 = "0"b;
	do while (q ^= null);
	     p -> statement.reference_count = p -> statement.reference_count - 1;
	     p1 = q -> element (2);

	     if p1 -> node.type = reference_node
	     then do;
		     n = p1 -> reference.symbol -> label.location + p1 -> reference.c_offset;
		     if addrel (cg_stat$text_base, n) -> fix_bin ^= 0
		     then call error (326, p, p1);
		     else do;
			     cg_stat$text_pos = n;
			     call expmac ((tra), c_a (text_pos, 10));
			     cg_stat$text_pos = text_pos;
			end;
		end;
	     else do;
		     call expmac$fill_usage (text_pos, (p1 -> label.location));
		     p1 -> label.location = text_pos;
		     p1 -> label.allocated = "1"b;

		     if cg_stat$table_option
		     then addrel (cg_stat$sym_base, p1 -> label.symbol_table) -> runtime_symbol.location =
			     bit (text_pos, 18);
		end;

	     q = q -> element (1);
	end;

	if p -> statement.labels ^= null
	then do;

/* if there are no states attached to this statement and the reference
   count is zero, there were no references to the statement.  If this is
   an end statement and the root is null, this is the superfluous end
   statement generated by if_parse or do_parse.  We will ignore the
   statement in this case and avoid altering the machine state */

		if p -> state_list = null
		then if p -> reference_count = 0
		     then if p -> statement.root = null
			then if st_type = end_statement
			     then do;
				     if ^cg_stat$skip_to_label
				     then if cg_stat$extended_stack | cg_stat$agg_temps ^= null
					     | cg_stat$profile_option | cg_stat$long_profile
					then goto free_temps;
				     goto done;
				end;

		cg_stat$skip_to_label = "0"b;

/* merge together all of the possible machine states */

		call state_man$merge_ms (pt);
	     end;

free_temps:
	if p -> statement.free_temps
	then do;
		if cg_stat$extended_stack
		then call shorten_stack;

		if cg_stat$agg_temps ^= null
		then call stack_temp$free_aggregates;
	     end;

	tree, cg_stat$cur_tree = p -> statement.root;

	if cg_stat$profile_option
	then if p -> statement.put_in_profile & string (p -> statement.source_id) ^= "0"b
	     then do;
		     profile_pos = cg_stat$profile_pos;
		     call expmac ((aos_mac), c_a (profile_pos + 1, 13));
		     cg_stat$profile_pos = cg_stat$profile_pos + size (p -> profile_entry);
		end;

	if cg_stat$long_profile
	then if p -> statement.put_in_profile & string (p -> statement.source_id) ^= "0"b
	     then do;
		     profile_pos = cg_stat$profile_pos;
		     call gen_long_profile (profile_pos);
		     cg_stat$profile_pos = cg_stat$profile_pos + size (long_profile_entry);
		end;

/* ignore null statements except if they have nop operator */

	if st_type = null_statement
	then do;
		if tree = null
		then goto done;
		if tree -> operator.op_code = nop
		then call expmac$zero ((nop_mac));
		goto done;
	     end;

	if st_type = if_statement
	then do;

/* following code looks for constructs:

   if <condition> then return; _o_r
   if <condition> then stop;

   and compiles it as a conditional transfer to
   the _r_e_t_u_r_n, _r_e_t_u_r_n__m_a_i_n, or _s_t_o_p label in the operator segment */

		if tree -> op_code <= jump | tree -> op_code >= jump_if_ge
		then goto normal;

		p1 = tree -> operand (1);
		if p1 -> node.type ^= label_node
		then goto check_if;

		q1 = p -> statement.next;
		if q1 -> statement_type ^= return_statement & q1 -> statement_type ^= stop_statement
		then goto check_if;
		if q1 -> statement.labels ^= null
		then goto check_if;

		q = q1 -> statement.root;
		if q ^= null
		then do;
			if q -> operator.number ^= 0
			then goto check_if;
			if q -> op_code ^= std_return & q -> op_code ^= stop
			then goto check_if;
		     end;

		if cb -> block.no_stack
		then goto check_if;
		if cb -> block.block_type = begin_block
		then goto check_if;

		q2 = q1 -> statement.next;
		if p1 -> label.statement ^= q2
		then goto check_if;

/* all our tests succeeded, complement the sense of the jump and replace its
   operand(1) with a reference node having address ap|409, ap|801, or ap|802
   (return_operator_loc, stop_operator_loc, return_main_operator_loc defined
   in code_generator.pl1).  We don't use c_a because if stmt might be split. */

		tree -> op_code = jump_complement (fixed (substr (tree -> op_code, 6, 4), 4));
		if q1 -> statement_type = return_statement
		then if cb -> block.options_main
		     then tree -> operand (1) = cg_stat$return_main_operator;
		     else tree -> operand (1) = cg_stat$return_operator;
		else tree -> operand (1) = cg_stat$stop_operator;

		q1 -> statement_type = null_statement;
		q1 -> statement.root = null;

		q2 -> statement.reference_count = q2 -> statement.reference_count - 1;

/* following code checks for possibility of optimizing an
   if statement with a logical operator at the top */

check_if:
		if cg_stat$optimize
		then if ^p -> statement.irreducible & ^p -> statement.checked
		     then if tree -> op_code = jump_true | tree -> op_code = jump_false
			then if tree -> operand (2) -> node.type = operator_node
			     then if ^tree -> operand (2) -> operand (1) -> reference.evaluated
				then if tree -> operand (2) -> operand (1) -> reference.c_length = 1
				     then do;
					     q1 = p -> statement.next;
					     call optimize_if (pt);
					     if q1 ^= p -> statement.next
					     then call combine_tests (pt, (q1 -> statement.back));
					     tree, cg_stat$cur_tree = p -> statement.root;
					end;

		goto normal;
	     end;

	if st_type = begin_statement
	then do;
		save_label = recovery_label;
		if ^tree -> block.no_stack
		then do;
			q = addrel (cg_stat$text_base, cg_stat$text_pos);
			tree -> block.entry_list = q;

			if cg_stat$separate_static
			then macro = ss_enter_begin_block;
			else macro = enter_begin_block;
			call expmac$zero ((macro));

			if (cg_stat$table_option | cg_stat$generate_symtab)
			then do;
				addrel (cg_stat$text_base, cg_stat$text_pos) -> word =
				     cg_stat$star_symbol_up_zero
				     || bit (fixed (tree -> block.symbol_block, 18), 18);
				addrel (cg_stat$text_reloc_base, cg_stat$text_pos) -> relocation =
				     rc_lp18 || rc_s;
			     end;

			cg_stat$text_pos = cg_stat$text_pos + 1;

			if cg_stat$support
			then call expmac$zero ((support_mac));
		     end;

		call make_map_entry;

		call compile_block$begin_block ((tree));

		if cg_stat$m_s_p = null
		then cg_stat$m_s_p = state_man$create_ms ();

		cg_stat$cur_block = cb;
		cg_stat$skip_to_label = "0"b;
		cg_stat$cur_level = cb -> block.level;
		recovery_label = save_label;

		if ^tree -> block.no_stack
		then q -> eax_ins.offset = bit (make_mod (tree -> block.last_auto_loc, 16), 18);
		return;
	     end;

	if st_type = on_statement
	then do;
		nargs = 3;
		q1 = tree -> operand (1);
		arg (1) = prepare_operand ((q1 -> reference.symbol -> symbol.general), 1, atomic);
		on_options = p -> statement.snap || p -> statement.system;

		q2 = tree -> operand (2);
		if q2 ^= null
		then do;
			arg (2) = prepare_operand (q2, 1, atomic);
			if on_options ^= ""b
			then do;
				macro = enable_file_2;
				nargs = 4;
				arg (4) = c_a (fixed (bit (on_options, 18), 18), 2);
			     end;
			else macro = enable_file;
		     end;
		else do;
			n = q1 -> reference.symbol -> symbol.location;
			arg (2) = c_a (n, 1);
			arg (2) -> reference.address.op = on_options;
			macro = enable_mac;
		     end;

		arg (3) =
		     prepare_operand ((tree -> operand (3) -> block.main -> statement.labels -> element (2)), 1,
		     atomic);

		call xr_man$load_const ((arg (1) -> reference.c_length), 6);
		call xr_man$super_lock (6);

		call expmac$many (macro, addr (arg), nargs);

		call xr_man$super_unlock (6);

		if ^arg (3) -> reference.symbol -> symbol.allocated
		then do;
			p1 = create_label (cg_stat$cur_block, null, by_compiler);
			call expmac ((tra), prepare_operand (p1, 1, atomic));

			call make_map_entry;

			save_cb = cb;
			call compile_block$begin_block ((tree -> operand (3)));
			cb, cg_stat$cur_block = save_cb;
			cg_stat$cur_level = cb -> block.level;

			call expmac$fill_usage (cg_stat$text_pos, (p1 -> label.location));

			if cg_stat$m_s_p = null
			then cg_stat$m_s_p = state_man$create_ms ();
			cg_stat$skip_to_label = "0"b;
		     end;

		else call make_map_entry;

		call state_man$flush;
		return;
	     end;

	if st_type = end_statement
	then do;
		if tree = null
		then goto done;

		cg_stat$skip_to_label = cb -> block.block_type ^= begin_block;

		if cb -> block.no_stack
		then if cb -> block.block_type ^= begin_block
		     then call expmac ((quick_return_mac), c_a (cb -> block.entry_info, 4));
		     else ;

		else if cb -> block.block_type = begin_block
		then do;
			call state_man$flush;
			call expmac$zero (leave_begin_block);
		     end;

		else call return_from_nonquick_procedure (cb);

		goto done;
	     end;

	if st_type = return_statement
	then do;
		cg_stat$skip_to_label = "1"b;

		if tree = null
		then goto nr;

		op = tree -> operator.op_code;
		if op = std_return
		then goto nr;

/* have return of something with * bound or length */

		i = 0;
		if cb -> block.block_type = begin_block
		then do;

			q = cb;
			do while (q -> block.block_type = begin_block);
			     if ^q -> block.no_stack
			     then i = i + 1;
			     q = q -> block.father;
			end;

		     end;

/* we assume that we can't have a no stack procedure with returns(*) */

		q3 = c_a (i, 2);

		if op = return_string
		then do;
			replace = "0"b;
			q1 = prepare_operand ((tree -> operand (1)), 1, a1);

			if ^a1
			then if q1 -> reference.long_ref
			     then do;
				     q2 = q1 -> reference.length;
				     if q2 ^= null
				     then do;
					     if q2 -> node.type = operator_node
					     then do;
						     q4 = q2 -> operand (1);
						     if q4 -> reference.shared
						     then do;
							     q2 -> operand (1) = copy_temp (q4);
							     replace = "1"b;
							end;
						end;

					     call adjust_ref_count (q2, 1);
					end;

				     call compile_exp ((tree -> operand (1)));
				end;
			     else q1 = compile_exp$save_exp ((tree -> operand (1)));

			call load_size (q1);

			if replace
			then q2 -> operand (1) = q4;

			if q1 -> reference.data_type = char_string
			then macro = ret_chars;
			else macro = ret_bits;

l1:
			call gen_long_profile_for_last_statement;
			call expmac (lxl0, q3);
			call long_op$no_size (q1, macro);
			goto ret_done;
		     end;

/* must be return_words | return_bits operator */

		q2 = prepare_operand ((tree -> operand (2)), 1, a2);
		q1 = prepare_operand ((tree -> operand (1)), -1, a1);

		call compile_exp ((tree -> operand (2)));

		if op = return_bits
		then do;
			macro = ret_bits;
			goto l1;
		     end;

		if q1 -> reference.varying_ref
		then q1 -> reference.c_offset = q1 -> reference.c_offset - 1;

		call base_man$load_var (2, q1, 1);
		call gen_long_profile_for_last_statement;
		call expmac (ret_words, q3);

		if q1 -> reference.varying_ref
		then q1 -> reference.c_offset = q1 -> reference.c_offset + 1;

		goto ret_done;

/* have normal return operator */

nr:
		q = cb;
		if cb -> block.block_type ^= begin_block
		then if cb -> block.no_stack
		     then do;
qr:
			     if cg_stat$extended_stack
			     then call shorten_stack;
			     call expmac (quick_return_mac, c_a (q -> block.entry_info, 4));
			end;
		     else call return_from_nonquick_procedure (cb);

		else do;
			i = 0;

			do while (q -> block.block_type = begin_block);
			     if ^q -> block.no_stack
			     then i = i + 1;
			     q = q -> block.father;
			end;

			if q -> block.no_stack
			then do;
				if i ^= 0
				then do;
					call expmac ((set_stack), c_a (i, 2));
					cg_stat$extended_stack = "0"b;
				     end;
				goto qr;
			     end;

			if q -> block.options_main
			then macro = begin_return_main_mac;
			else macro = begin_return_mac;

			call gen_long_profile_for_last_statement;
			call expmac (macro, c_a (i, 2));
		     end;

ret_done:
		call state_man$discard_ms;
		cg_stat$extended_stack = "0"b;

		goto done;
	     end;

/* process stop statements */

	if st_type = stop_statement
	then do;
		cg_stat$skip_to_label = "1"b;
		call gen_long_profile_for_last_statement;
		call expmac$zero (stop_mac);
		call state_man$discard_ms;
		goto done;
	     end;

normal:
	if tree ^= null
	then call compile_tree (tree);

done:
	call make_map_entry;
	return;

recover:
     entry;

/* This entry causes compile_statement to return to the program
   that call it, thus effecting an error recovery after a fault */

	goto recovery_label;

shorten_stack:
     procedure;

	if st_type ^= procedure_statement
	then do;
		call state_man$erase_reg ("0000000000000001000"b);
						/* ab */
		call expmac$zero ((reset_stack));
	     end;

	cg_stat$extended_stack = "0"b;
     end shorten_stack;

make_map_entry:
     procedure;

/* This procedure makes a statement_map entry for the statement if
   one is needed and updates any necessary profile information */

dcl	q		ptr;

	p -> statement.object.finish = cg_stat$text_pos;

	if profile_pos ^= 0
	then addrel (cg_stat$profile_base, profile_pos) -> profile_entry.map =
		bit (fixed (cg_stat$sym_pos - cg_stat$map_start, 18), 18);

	if ^cg_stat$generate_map
	then goto reset;

	if cg_stat$in_thunk
	then goto reset;				/* Protects runtime symbol table.  (1858) */

/* make entry in map if we generated any code for this
   statement and its statement id is different from that
   of previous statement */

	if profile_pos = 0
	then do;
		if cg_stat$in_prologue
		then goto reset;

		if p -> statement.object.finish = text_pos
		then goto reset;

		if cg_stat$old_id = string (p -> statement.source_id)
		then goto reset;

		if p -> statement.source.length <= 0
		then goto reset;
	     end;

	cg_stat$old_id = string (p -> statement.source_id);

	q = addrel (cg_stat$sym_base, cg_stat$sym_pos);
	q -> statement_map.location = bit (text_pos, 18);
	string (q -> statement_map.source_id) = string (p -> statement.source_id);
	q -> statement_map.source_info.start = bit (fixed (p -> statement.source.start, 18), 18);
	q -> statement_map.source_info.length = bit (fixed (p -> statement.source.length, 9), 9);
	addrel (cg_stat$sym_reloc_base, cg_stat$sym_pos) -> relocation = rc_t;
	cg_stat$sym_pos = cg_stat$sym_pos + size (q -> statement_map);

reset:
	cg_stat$next_ref = cg_stat$first_ref;
     end make_map_entry;

return_from_nonquick_procedure:
     procedure (cb);

dcl	cb		ptr;			/* (Input) */

	call gen_long_profile_for_last_statement;

	if cb -> block.options_main
	then call expmac$zero (return_main_mac);
	else call expmac$zero (return_mac);
     end return_from_nonquick_procedure;

gen_long_profile_for_last_statement:
     procedure;

	if cg_stat$long_profile
	then call gen_long_profile (dummy_entry_offset);
     end gen_long_profile_for_last_statement;

gen_long_profile:
     procedure (offset);

dcl	offset		fixed bin;		/* offset of profile entry */

dcl	1 trailer		aligned,
	  2 header_relp	fixed bin (17) unal,
	  2 entry_offset	fixed bin (17) unal;

	call expmac$zero (long_profile_mac);

	addrel (cg_stat$text_reloc_base, cg_stat$text_pos) -> relocation = rc_is18;
	trailer.header_relp = cg_stat$profile_start;
	trailer.entry_offset = offset;
	call expmac$abs (addr (trailer), size (trailer));
     end gen_long_profile;

     end compile_statement;
