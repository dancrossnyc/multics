/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   *********************************************************** */
%;
/* ******************************************************
   *                                                    *
   *                                                    *
   * Copyright (c) 1972 by Massachusetts Institute of   *
   * Technology and Honeywell Information Systems, Inc. *
   *                                                    *
   *                                                    *
   ****************************************************** */

/* Procedures to generate conversions to and from fixed binary scaled

   Initial Version:  3 January 1972 by BLW	*/

fixed_to_float: proc(pt);

dcl	pt ptr;		/* points at a reference node */

dcl	(p,q) ptr,
	exp fixed bin(8),
	(type,scale) fixed bin,
	full_word bit(36) aligned,
	word bit(36) aligned based;

dcl	cg_stat$text_pos fixed bin(18) ext,
	cg_stat$text_base ptr ext;

dcl	(addrel,bit,fixed,substr) builtin;

dcl	expmac$zero entry(fixed bin(15)),
	expmac entry(fixed bin(15),ptr),
	generate_constant$bit_string entry(bit(*) aligned,fixed bin) returns(ptr);

dcl (	fx1_to_fl2	init(122),
	fx1_to_fx2	init(88),
	fxscaled_to_fl2	init(518),
	fl2_to_fx2	init(125),
	fl2_to_fxscaled	init(519)) fixed bin(15) int static;

%include cgsystem;
%include reference;
%include symbol;
%include data_types;

	p = pt;
	type = p -> reference.data_type;
	scale = p -> reference.symbol -> symbol.scale;

	if scale = 0
	then do;
	     call expmac$zero(fx1_to_fl2 + type - real_fix_bin_1);
	     return;
	     end;

	if type = real_fix_bin_1 then call expmac$zero((fx1_to_fx2));

	full_word = "0"b;
	exp = bits_per_two_words - 1 - scale;

	if exp >= 0 then substr(full_word,1,8) = bit(exp,8);
	else substr(full_word,1,8) = bit(fixed(256+exp,8),8);

	call expmac((fxscaled_to_fl2),generate_constant$bit_string(full_word,(bits_per_word)));
	return;

float_to_fixed: entry(pt);

	p = pt;
	scale = p -> reference.symbol -> symbol.scale;

	if scale = 0
	then do;
	     call expmac$zero((fl2_to_fx2));
	     return;
	     end;
	call expmac$zero((fl2_to_fxscaled));

	q = addrel(cg_stat$text_base,cg_stat$text_pos);
	exp = bits_per_two_words - 1 - scale;

	if exp >= 0 then substr(q -> word,1,8) = bit(exp,8);
	else substr(q -> word,1,8) = bit(fixed(256+exp,8),8);

	cg_stat$text_pos = cg_stat$text_pos + 1;
	end;
