" ***********************************************************
" *                                                         *
" * Copyright, (C) Honeywell Information Systems Inc., 1986 *
" *                                                         *
" ***********************************************************

" HISTORY COMMENTS:
"  1) change(86-07-15,Ginter), approve(86-07-15,MCR7287),
"     audit(86-07-16,Mabey):
"     Bug fixes for the MR12.0 release of the compiler
"                                                      END HISTORY COMMENTS

" pl/1 macro definition segment
"
"	Modified: 15 Feb 1978 by PCK to implement options(main) and the stop statement
"	Modified: 29 Mar 1978 by PCK to implement macro for storing sp
"	Modified: 16 June 1978 by PCK to implement size checking for unsigned binary
"	Modified: 25 Aug 1978 by RAB to help fix 1780
"	Modified: 19 Dec 1978 by RAB to improve ref cnt in bound_ck op
"	Modified: 24 Apr 1979 by PCK to implement 4-bit decimal
"	Modified: 16 Jul 1979 by RAB to remove absfx1_atm
"	Modified: 26 Jul 1979 by PCK to implement rank and byte builtins
"	Modified 790801 by PG to remove dvfx2, dvfx3, j_3_way*, and validate_pic.
"	Modified 790817 by RAB to improve code for a & ^ b where a and b are long strings.
"	Modified 790821 by RAB so that (move test)_andnot_1 use a fill of 1 to take care of source
"		being shorter than the target.
"	Modified December '79 by BSG for index_rev_* ops, and removing some superfluous
"		indications of sr erasing.
"	Modified 18 June 1980 by M. N. Davidoff to indicate that ix_chars and ix_rev_chars erase sr.
"		This turns out not to be superfluous.  (bug 1970)
"	Modified 11 September 81 by EBush to add prepare_call_long and
"		prepare_quick_call_long.
"	Modified 26 July 82 BIM wordno and segno
"	Modified 04 January 85 Keith Loepere to get ringno in baseptr right
"	Modified 20 June 86 MM unpack_fl1 modifies A and Q regs
"
	name	macro_table
	segdef	macro_table
	segdef	macro_count
	segdef	eax_array
"
	bool	op_vec,551	from assembly of pl1_operators
	bool	mod2_tab,543
	bool	mod4_tab,545
	bool	tct_mask_,242
	bool	ptr_mask_,460
	bool	fx1_to_fl2_,465	..
	bool	fx2_to_fl2_,466	..
	bool	blanks_,440	..
	bool	r_l_a_,474	..
	bool	r_g_s_,477	..
	bool	r_g_a_,503	..
	bool	r_l_s_,507	..
	bool	r_e_as_,512	..
	bool	r_ne_as_,515	..
	bool	r_le_a_,520	..
	bool	r_ge_s_,524	..
	bool	r_ge_a_,527	..
	bool	r_le_s_,532	..
	bool	set_stack_,540	..
	bool	ones,110		..
	equ	lg1,50
"
	equ	ops_ptr,28
	equ	csl_vector,-114
	equ	bitno_to_charno_,-790
"
	equ	ps_ptr,42
"
" The following bits are used to indicate which register are changed by a macro
"
	bool	a,400000
	bool	q,200000
	bool	aq,a+q
	bool	sr,100000
	bool	cr,040000
	bool	dr,020000
	bool	x0,010000
	bool	x1,004000
	bool	x2,002000
	bool	x3,001000
	bool	x4,000400
	bool	x5,000200
	bool	x6,000100
	bool	x7,000040
	bool	bp,000020
	bool	lp,000010
	bool	indices,x0+x1+x2+x3+x4+x5+x6+x7
	bool	bases,bp+lp
	bool	all,aq+indices+bases+cr+dr+sr
"
" The following bits indicate if a particular type of address modification
" is not allowed on arg1 of a macro
"
	bool	no_al,000004
	bool	no_ql,000002
	bool	perm,000001
"
" The following bits are used for expanding EIS macros
"
	bool	cat,400000
	bool	l_in_q,200000
	bool	compare,100000
	bool	xec_eis,40000
"
eax_array:
	eax0	0,ql
	eax1	0,ql
	eax2	0,ql
	eax3	0,ql
	eax4	0,ql
	eax5	0,ql
	eax6	0,ql
	eax7	0,ql
	eax0	0,al
	eax1	0,al
	eax2	0,al
	eax3	0,al
	eax4	0,al
	eax5	0,al
	eax6	0,al
	eax7	0,al
	eax0	0,au
	eax1	0,au
	eax2	0,au
	eax3	0,au
	eax4	0,au
	eax5	0,au
	eax6	0,au
	eax7	0,au
"
	equ	arg1,1*4096
	equ	arg2,2*4096
	equ	arg3,3*4096
	equ	arg4,4*4096
"
" The following symbols are used to define the types of operands for EIS instructions
"
	bool	addr,000000
	bool	dec,010000
	bool	char,020000
	bool	bit,030000
	bool	char4,040000
"
" The following bits are used to define the bool values for csl and csr instructions
"
	bool	move,03
	bool	and,01
	bool	or,07
	bool	xor,06
	bool	not,14
"
	bool	blank,040
	bool	plus,053
"
macro_table:
	lda	0		lda		1
	zero	a
	zero	lda_ldq,2		lda_ldq		2
	zero	aq+no_al
	ldaq	0		ldaq		3
	zero	aq
	sta	0		sta		4
	zero	0
	zero	sta_stq,2		sta_stq		5
	zero	0
	staq	0		staq		6
	zero	0
	ldq	0		ldfx1		7
	zero	q
	ldaq	0		ldfx2		8
	zero	aq
	fld	0		ldfl1		9
	zero	aq
	dfld	0		ldfl2		10
	zero	aq
	lcq	0		lcfx1		11
	zero	q
	lcaq	0		lcfx2		12
	zero	aq
	zero	lcfl1,2		lcfl1		13
	zero	aq
	zero	lcfl2,2		lcfl2		14
	zero	aq
	stq	0		stfx1		15
	zero	0
	staq	0		stfx2		16
	zero	0
	fst	0		stfl1		17
	zero	0
	dfst	0		stfl2		18
	zero	0
	adq	0		adfx1		19
	zero	q
	adaq	0		adfx2		20
	zero	aq
	adl	0		adfx3		21
	zero	aq
	sbq	0		sbfx1		22
	zero	q
	sbaq	0		sbfx2		23
	zero	aq
	zero	sbfx3,2		sbfx3		24
	zero	aq
	mpy	0		mpfx1		25
	zero	aq
	div	0		dvfx1		26
	zero	aq
	fad	0		adfl1		27
	zero	aq
	dfad	0		adfl2		28
	zero	aq
	fsb	0		sbfl1		29
	zero	aq
	dfsb	0		sbfl2		30
	zero	aq
	fmp	0		mpfl1		31
	zero	aq
	dfmp	0		mpfl2		32
	zero	aq
	fdv	0		dvfl1		33
	zero	aq
	dfdv	0		dvfl2		34
	zero	aq
	fdi	0		difl1		35
	zero	aq
	dfdi	0		difl2		36
	zero	aq
	zero	neg,1		neg		37
	zero	a
	zero	negl,1		negl		38
	zero	aq
	zero	fneg,1		fneg		39
	zero	aq
	ana	0		ana		40
	zero	a
	zero	ana_anq,2		ana_anq		41
	zero	aq
	anaq	0		anaq		42
	zero	aq
	ansa	0		ansa		43
	zero	0
	zero	ansa_ansq,2	ansa_ansq		44
	zero	0
	zero	ansa_ansq,2	ansaq		45
	zero	0
	ora	0		ora		46
	zero	a
	zero	ora_orq,2		ora_orq		47
	zero	aq
	oraq	0		oraq		48
	zero	aq
	orsa	0		orsa		49
	zero	0
	zero	orsa_orsq,2	orsa_orsq		50
	zero	0
	zero	orsa_orsq,2	orsaq		51
	zero	0
	era	0		era		52
	zero	a
	zero	era_erq,2		era_erq		53
	zero	aq
	eraq	0		eraq		54
	zero	aq
	ersa	0		ersa		55
	zero	0
	zero	ersa_ersq,2	ersa_ersq		56
	zero	0
	zero	ersa_ersq,2	ersaq		57
	zero	0
	zero	clear_aq,1	clear_aq		58
	zero	aq
	zero	clear_q,1		clear_q		59
	zero	q
	eppbp	0		load_pt		60
	zero	0
	spribp	0		store_pt		61
	zero	0
	lrl	0		lrl		62
	zero	q
	lls	0		lls		63
	zero	q
	lxl0	0		lxl0		64
	zero	0
	lxl1	0		lxl1		65
	zero	0
	lxl2	0		lxl2		66
	zero	0
	lxl3	0		lxl3		67
	zero	0
	lxl4	0		lxl4		68
	zero	0
	lxl5	0		lxl5		69
	zero	0
	lxl6	0		lxl6		70
	zero	0
	lxl7	0		lxl7		71
	zero	0
	ldx0	0		ldx0		72
	zero	0
	ldx1	0		ldx1		73
	zero	0
	ldx2	0		ldx2		74
	zero	0
	ldx3	0		ldx3		75
	zero	0
	ldx4	0		ldx4		76
	zero	0
	ldx5	0		ldx5		77
	zero	0
	ldx6	0		ldx6		78
	zero	0
	ldx7	0		ldx7		79
	zero	0
	adx0	0		adx0		80
	zero	0
	adx1	0		adx1		81
	zero	0
	adx2	0		adx2		82
	zero	0
	adx3	0		adx3		83
	zero	0
	adx4	0		adx4		84
	zero	0
	adx5	0		adx5		85
	zero	0
	adx6	0		adx6		86
	zero	0
	adx7	0		adx7		87
	zero	0
	zero	fx1_to_fx2,2	fx1_to_fx2	88
	zero	aq
	zero	alloc_char_temp,1	alloc_char_temp	89
	zero	a+bp+sr
	zero	alloc_bit_temp,1	alloc_bit_temp	90
	zero	a+bp+sr
	zero	alloc_temp,1	alloc_temp	91
	zero	aq+bp
	zero	realloc_char_temp,1 realloc_char_temp	92
	zero	aq+bp+sr
	zero	realloc_bit_temp,1	realloc_bit_temp	93
	zero	aq+bp+sr
	zero	sqrt_mac,1	sqrt_mac		94
	zero	0
	zero	dsqrt_mac,1	dsqrt_mac		95
	zero	0
	zero	test_bits,3	test_bits		96
	zero	0,compare
	zero	leave_begin_block,1 leave_begin_block	97
	zero	all
	zero	move_chars,3	move_chars	98
	zero	0
	zero	move_bits,3	move_bits		99
	zero	0
	zero	move_cs_load_1,3	move_cs_load_1	100
	zero	0
	zero	move_bs_load_1,3	move_bs_load_1	101
	zero	0
	zero	move_cs_load_2,3	move_cs_load_2	102
	zero	0
	zero	move_bs_load_2,3	move_bs_load_2	103
	zero	0
	zero	translate_2,1	translate_2	104
	zero	sr+cr+bp+aq
	zero	translate_3,1	translate_3	105
	zero	sr+cr+bp+aq
	zero	shift_and_mask_1,3	shift_and_mask_1	106
	zero	a
	zero	shift_and_mask_2,3	shift_and_mask_2	107
	zero	aq
	zero	b2c_mac,2		b2c_mac		108
	zero	aq
	zero	b2w_mac,2		b2w_mac		109
	zero	aq
	zero	c2b_mac,1		c2b_mac		110
	zero	aq
	zero	inline_translate	inline_translate	111
	zero	0
	zero	c2w_mac,2		c2w_mac		112
	zero	aq
	zero	pf_mac,2		pf_mac		113
	zero	aq
	zero	so_mac,2		so_mac		114
	zero	aq+bp
	zero	mod_bit_mac,1	mod_bit_mac	115
	zero	aq
	zero	mod2_mac,2	mod2_mac		116
	zero	q
	zero	mod4_mac,2	mod4_mac		117
	zero	q
	zero	mod8_mac,2	mod8_mac		118
	zero	q
	zero	mod16_mac,2	mod16_mac		119
	zero	q
	zero	ext_and_1,1	ext_and_1		120
	zero	aq+bp
	zero	ext_and_2,1	ext_and_2		121
	zero	aq+bp
	zero	fx1_to_fl2,1	fx1_to_fl2	122
	zero	aq
	zero	fx2_to_fl2,2	fx2_to_fl2	123
	zero	aq
	zero	fl2_to_fx1,1	fl2_to_fx1	124
	zero	aq
	zero	fl2_to_fx2,1	fl2_to_fx2	125
	zero	aq
	zero	absfx1,3		absfx1		126
	zero	q
	zero	absfx2,2		absfx2		127
	zero	aq
	zero	absfl1,2		absfl1		128
	zero	aq
	zero	absfl2,2		absfl2		129
	zero	aq
	zero	0		fx2_to_fx1	130
	zero	0
	zero	longbs_to_bs18,1	longbs_to_bs18	131
	zero	aq+bp
	zero	longbs_to_fx2,1	longbs_to_fx2	132
	zero	aq+bp
	zero	longbs_to_fl2,3	longbs_to_fl2	133
	zero	aq+bp
	als	0		als		134
	zero	0
	zero	blank_q,1		blank_q		135
	zero	aq
	cmpq	0		cpfx1		136
	zero	0
	cmpaq	0		cpfx2		137
	zero	0
	fcmp	0		cpfl1		138
	zero	0
	dfcmp	0		cpfl2		139
	zero	0
	cmpa	0		cpcs1		140
	zero	0
	zero	cpcs1_odd,3	cpcs1+1		141
	zero	0
	cmpaq	0		cpcs1+2		142
	zero	0
	cmpa	0		cpcs1+3		143
	zero	0
	zero	cpcs1_odd,3	cpcs1+4		144
	zero	0
	cmpaq	0		cpcs1+5		145
	zero	0
	zero	cpcs_ext1,1	cpcs1+6		146
	zero	aq+bp
	zero	cpcs_ext2,1	cpcs1+7		147
	zero	aq+bp
	zero	comp_bits,1	comp_bits		148
	zero	aq+bp
	cmpa	0		cpbs1		149
	zero	0
	zero	cpbs1_odd,3	cpbs1+1		150
	zero	0
	zero	cpbs1_even,2	cpbs1+2		151
	zero	0
	zero	cpbs2,3		cpbs1+3		152
	zero	0
	zero	cpbs2_odd,3	cpbs1+4		153
	zero	0
	cmpaq	0		cpbs1+5		154
	zero	0
	zero	cpbs_ext1,1	cpbs1+6		155
	zero	aq+bp
	zero	cpbs_ext2,1	cpbs1+7		156
	zero	aq+bp
	zero	test_translate,9	test_translate	157
	zero	q,compare
	zero	test_trans_rev,9	test_trans_rev	158
	zero	q,compare
	zero	r_l_a,1		r_l_a		159
	zero	a
	zero	r_l_s,1		r_l_s		160
	zero	a
	zero	r_g_a,1		r_g_a		161
	zero	a
	zero	r_g_s,1		r_g_s		162
	zero	a
	zero	r_e_as,1		r_e_as		163
	zero	a
	zero	r_ne_as,1		r_ne_as		164
	zero	a
	zero	r_le_a,1		r_le_a		165
	zero	a
	zero	r_le_s,1		r_le_s		166
	zero	a
	zero	r_ge_a,1		r_ge_a		167
	zero	a
	zero	r_ge_s,1		r_ge_s		168
	zero	a
	tra	0		tra		169
	zero	0
	zero	tra_ext_1,1	tra_ext_1		170
	zero	0
	zero	tra_ext_2,1	tra_ext_2		171
	zero	0
	zero	load_pt_reg,2	load_pt_reg	172
	zero	0
	zero	make_lv,3		make_lv		173
	zero	bp+cr+aq
	zero	store_lv,2	store_lv		174
	zero	aq+bp
	zero	set_stack,2	set_stack		175
	zero	aq+bp
	tmi	0		j_l_a		176
	zero	0
	tnc	0		j_l_s		177
	zero	0
	tpnz	0		j_g_a		178
	zero	0
	zero	j_g_s,2		j_g_s		179
	zero	0
	tze	0		j_e_as		180
	zero	0
	tnz	0		j_ne_as		181
	zero	0
	tmoz	0		j_le_a		182
	zero	0
	zero	j_le_s,2		j_le_s		183
	zero	0
	tpl	0		j_ge_a		184
	zero	0
	trc	0		j_ge_s		185
	zero	0
	zero	cp_chars,3	cp_chars		186
	zero	0,compare
	zero	cp_bits,3		cp_bits		187
	zero	0,compare
	zero	ftn_read,1	ftn_read		188
	zero	all
	zero	ftn_write,1	ftn_write		189
	zero	all
	zero	ftn_manip,1	ftn_manip		190
	zero	all
	zero	ftn_scalar_xmit,2	ftn_scalar_xmit	191
	zero	x6+bases
	zero	ftn_array_xmit,2	ftn_array_xmit	192
	zero	x6+bases
	zero	ftn_term,1	ftn_term		193
	zero	all
	zero	reset_stack,1	reset_stack	194
	zero	x0
	zero	get_ops_mac,4	get_ops_mac	195
	zero	0
	zero	entry_macro,3	entry_macro	196
	zero	all
	zero	enter_begin_block,2 enter_begin_block	197
	zero	0
	zero	return_mac,1	return_mac	198
	zero	0
	zero	inline_search,7	inline_search	199
	zero	q,compare
	zero	cat_realloc_char,1	cat_realloc_char	200
	zero	aq+bp
	zero	cat_realloc_bit,1	cat_realloc_bit	201
	zero	aq+bp
	zero	enter_prologue,1	enter_prologue	202
	zero	0
	zero	leave_prologue,2	leave_prologue	203
	zero	x0
	zero	call_prologue,1	call_prologue	204
	zero	all
	zero	load_offsets,2	load_offsets	205
	zero	q
	zero	store_offsets,2	store_offsets	206
	zero	q
	zero	inline_verify,7	inline_verify	207
	zero	q,compare
	zero	stac_mac,1	stac_mac		208
	zero	aq+bp
	zero	sign_mac,1	sign_mac		209
	zero	aq
	zero	qls_9,1		qls_9		210
	zero	0
	zero	set_bit_addr,1	set_bit_addr	211
	zero	0
	zero	pointer_mac_bs,1	pointer_mac_bs	212
	zero	bp
	zero	pointer_mac_fx,1	pointer_mac_fx	213
	zero	bp
	zero	addrel_mac_bs,1	addrel_mac_bs	214
	zero	bp
	zero	addrel_mac_fx,1	addrel_mac_fx	215
	zero	bp
	zero	baseptr_mac_bs,2	baseptr_mac_bs	216
	zero	bp
	zero	baseptr_mac_fx,2	baseptr_mac_fx	217
	zero	bp
	zero	cat_move_chars,3	cat_move_chars	218
	zero	0,cat
	zero	cat_move_bits,3	cat_move_bits	219
	zero	0,cat
	zero	cmp_suffix_1,2	cmp_suffix_1	220
	zero	0
	zero	move_numeric_edit,4 move_numeric_edit	221
	zero	0
	zero	dtb_1,3		dtb_1		222
	zero	0
	zero	dtb_2,3		dtb_2		223
	zero	0
	zero	btd_1,3		btd_1		224
	zero	0
	zero	btd_2,3		btd_2		225
	zero	0
	zero	cpbs3,3		cpbs3		226
	zero	0,compare
	zero	sin_mac,1		sin_mac		227
	zero	0
	zero	dsin_mac,1	dsin_mac		228
	zero	0
	zero	save_string_aq,3	save_string_aq	229
	zero	0
	zero	call_ent_var,1	call_ent_var	230
	zero	0
	zero	call_ent_var_d,1	call_ent_var_desc	231
	zero	0
	zero	call_ext_in,1	call_ext_in	232
	zero	0
	zero	call_ext_in_d,1	call_ext_in_desc	233
	zero	0
	zero	call_ext_out,1	call_ext_out	234
	zero	0
	zero	call_ext_out_d,1	call_ext_out_desc	235
	zero	0
	zero	call_int_this,1	call_int_this	236
	zero	0
	zero	call_int_this_d,1	call_int_this_desc	237
	zero	0
	zero	call_int_other,1	call_int_other	238
	zero	0
	zero	call_int_other_d,1	call_int_other_desc 239
	zero	0
	zero	segno_mac,2	segno_mac		240
	zero	q
	zero	baseno_mac,1	baseno_mac	241
	zero	a
	zero	off_mac_easy,2	off_mac_easy	242
	zero	aq
	zero	off_mac_easy_pk,2	off_mac_easy_pk	243
	zero	aq
	zero	args_by_2_mac,2	args_by_2_mac	244
	zero	q
	arl	0		arl		245
	zero	0
	zero	bound_ck_mac	bound_ck_mac	246
	zero	aq
	zero	min_fx1,3		min_fx1		247
	zero	q
	zero	min_fx2,3		min_fx2		248
	zero	aq
	zero	min_fl1,3		min_fl1		249
	zero	aq
	zero	min_fl2,3		min_fl2		250
	zero	aq
	zero	max_fx1,3		max_fx1		251
	zero	q
	zero	max_fx2,3		max_fx2		252
	zero	aq
	zero	max_fl1,3		max_fl1		253
	zero	aq
	zero	max_fl2,3		max_fl2		254
	zero	aq
	zero	neg_q,2		neg_q		255
	zero	q
	zero	ix_rev_chars,1	ix_rev_chars	256
	zero	aq+sr
	zero	copy_mac,3	copy_mac		257
	zero	0,l_in_q
	zero	mpfx2,2		mpfx2		258
	zero	aq+perm
	zero	mpfx3,2		mpfx3		259
	zero	aq+perm
	div	0		dvfx1		260
	zero	aq
	zero	test_andnot_0,3	test_andnot_0	261
	zero	0,compare
	zero	test_andnot_1,3	test_andnot_1	262
	zero	0,compare
	zero	substr_ck_mac	substr_ck_mac	263
	zero	aq
	zero	move_and,3	move_and		264
	zero	0
	zero	sind_mac,1	sind_mac		265
	zero	0
	zero	dsind_mac,1	dsind_mac		266
	zero	0
	zero	test_and,3	test_and		267
	zero	0,compare
	zero	set_ptr_to,2	set_ptr_to	268
	zero	0
	zero	mdfl1,2		mdfl1		269
	zero	aq+sr+perm
	zero	mdfl2,2		mdfl2		270
	zero	aq+sr+perm
	zero	mdfx1,2		mdfx1		271
	zero	aq+sr+perm
	zero	mdfx2,2		mdfx2		272
	zero	aq+sr+perm
	zero	mdfx3,2		mdfx3		273
	zero	aq+sr+perm
	zero	mdfx4,2		mdfx4		274
	zero	aq+sr+perm
	zero	make_desc_mac,2	make_desc_mac	275
	zero	q
	stcq	0		set_desc_size	276
	zero	0
	orsq	0		insert_adj	277
	zero	q
	zero	pic_test,4	pic_test		278
	zero	dr,compare
	zero	quick_desc_size,2	quick_desc_size	279
	zero	q
	zero	compare_files,3	compare_files	280
	zero	aq
	zero	pad_chars,1	pad_chars		281
	zero	aq
	zero	pad_bits,1	pad_bits		282
	zero	aq
	zero	load_link_pt,1	load_link_pt	283
	zero	0
	zero	get_desc_size,4	get_desc_size	284
	zero	q
	zero	assign_label_const,2 assign_label_const 285
	zero	0
	zero	load_display_ptr,1	load_display_ptr	286
	zero	0
	zero	walk_display_ptr,1	walk_display_ptr	287
	zero	0
	zero	begin_return,2	begin_return_mac	288
	zero	all
	zero	signal_mac,2	signal_mac	289
	zero	aq
	zero	revert_mac,1	revert_mac	290
	zero	0
	zero	enable_mac,4	enable_mac	291
	zero	all
	zero	get_area_mod_8,5	get_area_mod_8	292
	zero	q
	zero	fx1_to_bs,4	fx1_to_bs		293
	zero	a
	zero	fx2_to_bs,4	fx2_to_bs		294
	zero	aq
	stba	0		stba		295
	zero	0
	stbq	0		stbq		296
	zero	0
	stca	0		stca		297
	zero	0
	stcq	0		stcq		298
	zero	0
	zero	quick_return,1	quick_return	299
	zero	0
	zero	fetch_chars,1	fetch_chars	300
	zero	aq
	zero	fetch_bits,1	fetch_bits	301
	zero	aq
	zero	mod_byte_mac,3	mod_byte_mac	302
	zero	aq
	zero	mod_byte_mac_exp,3	mod_byte_mac_exp	303
	zero	aq
	zero	move_or,3		move_or		304
	zero	0
	zero	support_mac,1	support_mac	305
	zero	a
	zero	a_to_x0,1		a_to_x0		306
	zero	x0
	zero	zero_mac_p_1,1	zero_mac_p_1	307
	zero	0
	stz	0		zero_mac		308
	zero	0
	aos	0		aos_mac		309
	zero	0
	asq	0		incr_mac		310
	zero	0
	ssq	0		diff_mac		311
	zero	0
	nop	0		nop_mac		312
	zero	0
	zero	get_term_mac,1	get_term_mac	313
	zero	bases+x6
	zero	put_term_mac,1	put_term_mac	314
	zero	bases+x6
	zero	is_label_const,2	is_label_const	315
	zero	0
	zero	mod_half_mac,3	mod_half_mac	316
	zero	aq
	zero	mod_half_mac_exp,3	mod_half_mac_exp	317
	zero	aq
	zero	beg_ev_proc,5	beg_ev_proc	318
	zero	0
	zero	end_ev_proc,2	end_ev_proc	319
	zero	0
	zero	symtab_mac,4	symtab_mac	320
	zero	0
	zero	io_signal_mac,2	io_signal_mac	321
	zero	aq
	zero	end_ev_label,3	end_ev_label	322
	zero	0
	cana	0		cana		323
	zero	0
	canaq	0		canaq		324
	zero	0
	zero	compare_labels,7	compare_labels	325
	zero	aq
	zero	pointer_mac_const,1 point_mac_const	326
	zero	bp
	zero	addrel_mac_const,1	addrel_mac_const	327
	zero	bp
	zero	put_data,1	put_data		328
	zero	x6+bases
	zero	cos_mac,1		cos_mac,1		329
	zero	0
	zero	dcos_mac,1	dcos_mac		330
	zero	0
	zero	test_or,3		test_or		331
	zero	0,compare
	lda	0		test_lda		332
	zero	a
	zero	test_lda_ldq,3	test_lda_ldq	333
	zero	aq+no_al
	ldaq	0		test_ldaq		334
	zero	aq
	zero	move_not,3	move_not		335
	zero	0
	zero	cosd_mac,1	cosd_mac		336
	zero	0
	zero	dcosd_mac,1	dcosd_mac		337
	zero	0
	zero	test_not,3	test_not		338
	zero	0,compare
	zero	init_ps_mac,3	init_ps_mac	339
	zero	0
	zero	init_sslp,2	init_sslp		340
	zero	0
	zero	move_xor,3	move_xor		341
	zero	0
	zero	tan_mac,1		tan_mac		342
	zero	0
	zero	dtan_mac,1	dtan_mac		343
	zero	0
	zero	test_xor,3	test_xor		344
	zero	0,compare
	sxl0	0		sxl0		345
	zero	0
	sxl1	0		sxl1		346
	zero	0
	sxl2	0		sxl2		347
	zero	0
	sxl3	0		sxl3		348
	zero	0
	sxl4	0		sxl4		349
	zero	0
	sxl5	0		sxl5		350
	zero	0
	sxl6	0		sxl6		351
	zero	0
	sxl7	0		sxl7		352
	zero	7
	eax0	0		eax0		353
	zero	0
	eax1	0		eax1		354
	zero	0
	eax2	0		eax2		355
	zero	0
	eax3	0		eax3		356
	zero	0
	eax4	0		eax4		357
	zero	0
	eax5	0		eax5		358
	zero	0
	eax6	0		eax6		359
	zero	0
	eax7	0		eax7		360
	zero	0
	epplp	0		load_lp		361
	zero	0
	zero	prepare_call,2	prepare_call	362
	zero	aq
	zero	prepare_quick_call,3	prepare_quick_call	363
	zero	bp+aq
	zero	quick_entry,1	quick_entry	364
	zero	0
	zero	quick_entry_args,2	quick_entry_args	365
	zero	0
	zero	quick_entry_desc,4	quick_entry_desc	366
	zero	0
	zero	quick_call,1	quick_call	367
	zero	0
	zero	verify_rev_chars,1	verify_rev_chars	368
	zero	aq+sr
	zero	search_rev_chars,1	search_rev_chars	369
	zero	aq+sr
	eaa	0		eaa		371
	zero	a
	eaq	0		eaq		371
	zero	q
	llr	0		llr		372
	zero	aq
	a9bdx	0|0		setcharno_mac	373
	zero	0
	abdx	0|0		setbitno_mac	374
	zero	0
	zero	0		UNUSED		375
	zero	0
	epaq	0		epaq		376
	zero	aq
	zero	0		UNUSED		377
	zero	0
	zero	0		UNUSED		378
	zero	0
	zero	assign_lab_to_int,2 assign_lab_to_int	379
	zero	q
	zero	load_logical,2	load_logical	380
	zero	a
	zero	store_logical,3	store_logical	381
	zero	0
	zero	not_logical,1	not_logical	382
	zero	a
	zero	mask_logical,1	mask_logical	383
	zero	a
	zero	trunc_fl,1	trunc_fl		384
	zero	aq
	zero	tran_sign_fx1,2	tran_sign_fx1	385
	zero	aq+perm
	zero	tran_sign_fl,2	tran_sign_fl	386
	zero	aq+perm
	zero	fort_mod_fx1,2	fort_mod_fx1	387
	zero	aq
	zero	fort_mod_fl1,2	fort_mod_fl1	388
	zero	aq+perm
	zero	0		UNUSED		389
	zero	0
	zero	rflb1_to_cflb1,3	rflb1_to_cflb1	390
	zero	aq
	zero	move_andnot_0,3	move_andnot_0	391
	zero	0,0
	zero	move_andnot_1,3	move_andnot_1	392
	zero	0,0
	zero	store_bp_hard,3	store_bp_hard	393
	zero	aq
	zero	atm_rflb1_to_cflb1,2 atm_rflb1_to_cflb1 394
	zero	aq
	zero	rfb1_to_cflb1,1	rfb1_to_cflb1	395
	zero	aq
	zero	stream_prep_mac,3	stream_prep_mac	396
	zero	a+bases+x6
	zero	loop_end_var,4	loop_end_var	397
	zero	aq
	zero	rfb2_to_cflb1,1	rfb2_to_cflb1	398
	zero	aq
	zero	complex_mac	complex_mac	399
	zero	aq
	zero	conjg_mac		conjg_mac		400
	zero	aq
	zero	real_mac		real_mac		401
	zero	aq
	zero	imag_mac		imag_mac		402
	zero	aq
	zero	square_fx1,2	square_fx1	403
	zero	aq
	zero	h2w_mac,2		h2w_mac		404
	zero	aq
	zero	square_fl1,2	square_fl1	405
	zero	aq
	zero	square_fl2,2	square_fl2	406
	zero	aq
	zero	unpk_to_pk,1	unpk_to_pk	407
	zero	aq
	zero	pk_to_unpk,1	pk_to_unpk	408
	zero	aq
	sprilp	0		store_lp		409
	zero	0
	zero	bp_to_aq,2	bp_to_aq		410
	zero	aq
	zero	lp_to_aq,2	lp_to_aq		411
	zero	aq
	zero	real_to_real_tr,1	real_to_real_tr	412
	zero	all-sr
	zero	real_to_real_rd,1	real_to_real_rd	413
	zero	all-sr
	zero	any_to_any_tr,1	any_to_any_tr	414
	zero	all-sr
	zero	any_to_any_rd,1	any_to_any_rd	415
	zero	all-sr
	zero	unpack_pic,1	unpack_pic	416
	zero	all
	zero	edit_pic,1	edit_pic		417
	zero	all
	qrl	0		qrl		418
	zero	q
	zero	zero_chars,3	zero_chars	419
	zero	0
	zero	chars_move,3	chars_move	420
	zero	0
	zero	bits_move,3	bits_move		421
	zero	0
	zero	tand_mac,1	tand_mac		422
	zero	0
	zero	dtand_mac,1	dtand_mac		423
	zero	0
	zero	asin_mac,1	asin_mac		424
	zero	0
	zero	dasin_mac,1	dasin_mac		425
	zero	0
	zero	asind_mac,1	asind_mac		426
	zero	0
	zero	dasind_mac,1	dasind_mac	427
	zero	0
	zero	acos_mac,1	acos_mac		428
	zero	0
	zero	dacos_mac,1	dacos_mac		429
	zero	0
	zero	acosd_mac,1	acosd_mac		430
	zero	0
	zero	dacosd_mac,1	dacosd_mac	431
	zero	0
	zero	atan_mac,1	atan_mac		432
	zero	0
	zero	datan_mac,1	datan_mac		433
	zero	0
	zero	atand_mac,1	atand_mac		434
	zero	0
	zero	datand_mac,1	datand_mac	435
	zero	0
	zero	set_chars,1	set_chars		436
	zero	a+sr
	zero	set_bits,1	set_bits		437
	zero	a+sr
	zero	move_decimal,3	move_decimal	438
	zero	dr
	zero	move_decimal_rd,3	move_decimal_rd	439
	zero	dr
	zero	add_decimal,4	add_decimal	440
	zero	dr
	zero	add_decimal_rd,4	add_decimal_rd	441
	zero	dr
	zero	add_decimal_2,3	add_decimal_2	442
	zero	dr
	zero	add_decimal_2_rd,3	add_decimal_2_rd	443
	zero	dr
	zero	chars_move_vt,3	chars_move_vt	444
	zero	0,l_in_q
	zero	bits_move_vt,3	bits_move_vt	445
	zero	0,l_in_q
	zero	sub_decimal,4	sub_decimal	446
	zero	dr
	zero	sub_decimal_rd,4	sub_decimal_rd	447
	zero	dr
	zero	sub_decimal_2,3	sub_decimal_2	448
	zero	dr
	zero	sub_decimal_2_rd,3	sub_decimal_2_rd	449
	zero	dr
	zero	mult_decimal,4	mult_decimal	450
	zero	dr
	zero	mult_decimal_rd,4	mult_decimal_rd	451
	zero	dr
	zero	ix_chars,1	ix_chars		452
	zero	aq+sr
	zero	ix_bits,1		ix_bits		453
	zero	aq+bp+sr
	zero	mult_decimal_2,3	mult_decimal_2	454
	zero	dr
	zero	mult_decimal_2_rd,3 mult_decimal_2_rd	455
	zero	dr
	zero	div_decimal,4	div_decimal	456
	zero	dr
	zero	div_decimal_rd,4	div_decimal_rd	457
	zero	dr
	zero	div_decimal_2,3	div_decimal_2	458
	zero	dr
	zero	div_decimal_2_rd,3	div_decimal_2_rd	459
	zero	dr
	zero	ix_chars_1,8	ix_chars_1	460
	zero	q,compare
	zero	ix_bits_1,1	ix_bits_1		461
	zero	aq+bp+sr
	zero	ix_chars_2,8	ix_chars_2	462
	zero	q,compare
	zero	ix_rev_chars_1,8	ix_rev_chars_1	463
	zero	q,compare
	zero	ix_rev_chars_2,8	ix_rev_chars_2	464
	zero	q,compare
	zero	mpcdec,2		mpcdec		465
	zero	a+x1+x2+x3+x4
	zero	dvcdec,2		dvcdec		466
	zero	a+x1+x2+x3+x4
	zero	dvrcdec,2		dvrcdec		467
	zero	a+x1+x2+x3+x4
	zero	zero_bits,3	zero_bits		468
	zero	0
	zero	one_bits,3	one_bits		469
	zero	0
	zero	bool_mac_1,3	bool_mac_1	470
	zero	0,xec_eis
	zero	bool_mac_2,3	bool_mac_2	471
	zero	0,xec_eis
	zero	blank_chars,3	blank_chars	472
	zero	0
	zero	abs_decimal,3	abs_decimal	473
	zero	dr
	zero	min_dec,4		min_dec		474
	zero	dr
	zero	max_dec,4		max_dec		475
	zero	dr
	zero	copy_bits,3	copy_bits		476
	zero	0,cat
	zero	log2_mac,1	log2_mac		477
	zero	0
	zero	dlog2_mac,1	dlog2_mac		478
	zero	0
	zero	zero_chars_q,3	zero_chars_q	479
	zero	0,l_in_q
	zero	return_words,2	return_words	480
	zero	0
	zero	move_words,3	move_words	481
	zero	0,cat
	zero	log_mac,1		log_mac		482
	zero	0
	zero	dlog_mac,1	dlog_mac		483
	zero	0
	zero	one_chars,3	one_chars		484
	zero	0
	zero	recio_mac,2	recio_mac		485
	zero	aq+x6+bases
	zero	unpack_fl1,2	unpack_fl1	486
	zero	aq
	zero	unpack_fl2,2	unpack_fl2	487
	zero	0
	zero	unpack_cfl1,2	unpack_cfl1	488
	zero	0
	zero	pack_fl1,2	pack_fl1		489
	zero	0
	zero	pack_fl2,2	pack_fl2		490
	zero	0
	zero	pack_cfl1,2	pack_cfl1		491
	zero	0
	lrs	0		lrs		492
	zero	aq
	zero	open_mac,1	open_mac		493
	zero	x6+bases
	zero	close_mac,1	close_mac		494
	zero	x6+bases
	zero	get_list,1	get_list		495
	zero	x6+bases
	zero	log10_mac,1	log10_mac		496
	zero	0
	zero	dlog10_mac,1	dlog10_mac	497
	zero	0
	zero	put_field,1	put_field		498
	zero	bases+x6
	zero	get_edit,1	get_edit		499
	zero	x6+bases
	zero	exp_mac,1		exp_mac		500
	zero	0
	zero	dexp_mac,1	dexp_mac		501
	zero	0
	zero	alloc_based_area,2	alloc_based_area	502
	zero	0
	zero	put_list,1	put_list		503
	zero	x6+bases
	zero	atan2_mac,1	atan2_mac		504
	zero	0
	zero	datan2_mac,1	datan2_mac	505
	zero	0
	zero	put_field_chk,1	put_field_chk	506
	zero	bases+x6
	zero	put_edit,1	put_edit		507
	zero	x6+bases
	zero	testfx1,1		testfx1		508
	zero	0
	zero	testfx2,1		testfx2		509
	zero	0
	zero	testfl1,1		testfl1		510
	zero	0
	zero	testfl2,1		testfl2		511
	zero	0
	zero	ss_enter_begin_block,2  ss_enter_begin_block  512
	zero	0
	orq	0		form_desc		513
	zero	q
	qrs	0		qrs		514
	zero	q
	qls	0		qls		515
	zero	q
	zero	fetch_pp,2	fetch_pp		516
	zero	aq
	zero	store_pp,2	store_pp		517
	zero	0
	zero	fxscaled_to_fl2,2	fxscaled_to_fl2	518
	zero	aq
	zero	fl2_to_fxscaled,1	fl2_to_fxscaled	519
	zero	aq
	zero	trunc_fx1,1	trunc_fx1		520
	zero	q
	zero	trunc_fx2,1	trunc_fx2		521
	zero	aq
	zero	ceil_fx1,1	ceil_fx1		522
	zero	q
	zero	ceil_fx2,1	ceil_fx2		523
	zero	aq
	zero	ceil_fl,1		ceil_fl		524
	zero	aq
	zero	floor_fx1,1	floor_fx1		525
	zero	q
	zero	floor_fx2,1	floor_fx2		526
	zero	aq
	zero	floor_fl,1	floor_fl		527
	zero	aq
	zero	nop_mac,1		nop_mac		528
	zero	0
	zero	round_fx1,1	round_fx1		529
	zero	q
	zero	round_fx2,1	round_fx2		530
	zero	aq
	zero	round_fl,2	round_fl		531
	zero	aq+bp+sr
	zero	compare_decimal,3	compare_decimal	532
	zero	dr,compare
	sprisp	0		stack_ptr		533
	zero	0
	zero	repeat,1		repeat		534
	zero	aq+bp+sr
	zero	divide_fx1,2	divide_fx1	535
	zero	aq+sr+perm
	zero	divide_fx2,2	divide_fx2	536
	zero	aq+sr+perm
	zero	divide_fx3,2	divide_fx3	537
	zero	aq+sr+perm
	zero	divide_fx4,2	divide_fx4	538
	zero	aq+sr+perm
	zero	verify,1		verify		539
	zero	q+sr
	zero	search,1		search		540
	zero	q+sr
	zero	ceil_dec,2	ceil_dec		541
	zero	aq+x1+x2
	zero	floor_dec,2	floor_dec		542
	zero	aq+x1+x2
	zero	sign_dec,2	sign_dec		543
	zero	q
	zero	abs_cdec,2	abs_cdec		544
	zero	aq+x1+x2+x3+x4
	zero	trunc_dec,2	trunc_dec		545
	zero	aq+x1+x2
	zero	mod_dec,2		mod_dec		546
	zero	aq+x1+x2
	zero	reverse_cs,1	reverse_cs	547
	zero	aq+bp+sr
	zero	reverse_bs,1	reverse_bs	548
	zero	aq+bp+sr
	zero	scaled_mdfx1,2	scaled_mdfx1	549
	zero	aq+sr+perm
	zero	scaled_mdfx2,2	scaled_mdfx2	550
	zero	aq+sr+perm
	zero	scaled_mdfx3,2	scaled_mdfx3	551
	zero	aq+sr+perm
	zero	scaled_mdfx4,2	scaled_mdfx4	552
	zero	aq+sr+perm
	zero	size_check_fx1,1	size_check_fx1	553
	zero	0
	zero	size_check_fx2,1	size_check_fx2	554
	zero	0
	zero	chars_move_ck,3	chars_move_ck	555
	zero	0
	zero	bits_move_ck,3	bits_move_ck	556
	zero	0
	zero	atan2d_mac,1	atan2d_mac	557
	zero	0
	zero	datan2d_mac,1	datan2d_mac	558
	zero	0
	zero	int_p_real,1	int_p_real	559
	zero	0
	zero	int_p_dbl,1	int_p_dbl		560
	zero	0
	zero	dbl_p_real,1	dbl_p_real	561
	zero	0
	zero	dbl_p_dbl,1	dbl_p_dbl		562
	zero	0
	zero	signal_stringsize,1 signal_stringsize	563
	zero	0
	zero	dbl_p_int,1	dbl_p_int		564
	zero	0
	zero	real_p_real,1	real_p_real	565
	zero	0
	zero	size_ck_varying,4	size_ck_varying	566
	zero	q
	zero	size_ck_suffix,5	size_ck_suffix	567
	zero	q
	zero	move_3,6		move_3		568
	zero	a
	zero	move_odd_odd_3,4	move_odd_odd_3	569
	zero	aq
	zero	move_odd_odd_4,6	move_odd_odd_4	570
	zero	aq
	zero	move_odd_odd_5,6	move_odd_odd_5	571
	zero	aq
	zero	move_odd_even_3,5	move_odd_even_3	572
	zero	aq
	zero	move_odd_even_4,6	move_odd_even_4	573
	zero	aq
	zero	move_even_odd_3,5	move_even_odd_3	574
	zero	aq
	zero	move_even_odd_4,6	move_even_odd_4	575
	zero	aq
	zero	move_even_even_3,4	move_even_even_3	576
	zero	aq
	zero	move_even_even_4,4	move_even_even_4	577
	zero	aq
	zero	move_even_even_5,6	move_even_even_5	578
	zero	aq
	zero	move_even_even_6,6	move_even_even_6	579
	zero	aq
	zero	move_odd,2	move_odd		580
	zero	a
	zero	move_even,2	move_even		581
	zero	aq
	zero	size_ck_decimal,2	size_ck_decimal	582
	zero	all
	zero	xr_to_q,2		xr_to_q		583
	zero	q
	zero	packed_to_bp,2	packed_to_bp	584
	zero	bp
	zero	packed_bit_offset,1 packed_bit_offset	585
	zero	q
	zero	return_chars,1	return_chars	586
	zero	0
	zero	put_control,1	put_control	587
	zero	bases+x6
	zero	fetch_chars_eis,1	fetch_chars_eis	588
	zero	aq
	zero	fetch_bits_eis,1	fetch_bits_eis	589
	zero	aq
	zero	return_bits,1	return_bits	590
	zero	0
	zero	real_p_int,1	real_p_int	591
	zero	0
	zero	int_p_int,1	int_p_int		592
	zero	0
	zero	enable_file_2,5	enable_file_2	593
	zero	aq		(see macro)
	zero	ext_entry,3	ext_entry		594
	zero	all
	zero	ext_entry_desc,3	ext_entry_desc	595
	zero	all
	zero	int_entry,3	int_entry		596
	zero	all
	zero	int_entry_desc,3	int_entry_desc	597
	zero	all
	zero	val_entry,3	val_entry		598
	zero	all
	zero	val_entry_desc,3	val_entry_desc	599
	zero	all
	zero	off_mac_hard,2	off_mac_hard	600
	zero	aq
	zero	off_mac_hard_pk,2	off_mac_hard_pk	601
	zero	aq
	zero	pl1_ptr_easy,1	pl1_ptr_easy	602
	zero	aq+bp
	zero	pl1_ptr_easy_pk,1	pl1_ptr_easy_pk	603
	zero	aq+bp
	zero	pl1_ptr_hard,1	pl1_ptr_hard	604
	zero	aq+bp
	zero	pl1_ptr_hard_pk,1	pl1_ptr_hard_pk	605
	zero	aq+bp
	zero	enable_file,4	enable_file	606
	zero	aq		(see macro)
	zero	revert_file,3	revert_file	607
	zero	bp+lp+aq
	zero	alloc_block,2	alloc_block	608
	zero	bp+lp+aq+cr
	zero	free_block,2	free_block	609
	zero	bp+lp+aq+cr
	zero	push_ctl_data,2	push_ctl_data	610
	zero	bp+lp+aq+cr
	zero	push_ctl_desc,2	push_ctl_desc	611
	zero	bp+lp+aq+cr
	zero	pop_ctl_data,2	pop_ctl_data	612
	zero	bp+lp+aq+cr
	zero	pop_ctl_desc,2	pop_ctl_desc	613
	zero	bp+lp+aq+cr
	zero	allocation,2	allocation	614
	zero	bp+aq
	cana	0		and_for_test	615
	zero	0
	zero	ana_anq,2		and_for_test_odd	616
	zero	aq
	canaq	0		and_for_test_even	617
	zero	0
	epp1	0		load_ab		618
	zero	0
	epp3	0		load_bb		619
	zero	0
	epp5	0		load_lb		620
	zero	0
	epp7	0		load_sb		621
	zero	0
	spri1	0		store_ab		622
	zero	0
	spri3	0		store_bb		623
	zero	0
	spri5	0		store_lb		624
	zero	0
	spri7	0		store_sb		625
	zero	0
	zero	ab_to_aq,2	ab_to_aq		626
	zero	aq
	zero	bb_to_aq,2	bb_to_aq		627
	zero	aq
	zero	lb_to_aq,2	lb_to_aq		628
	zero	aq
	zero	sb_to_aq,2	sb_to_aq		629
	zero	aq
	sprpbp	0		store_packed_bp	630
	zero	0
	sprplp	0		store_packed_lp	631
	zero	0
	sprp1	0		store_packed_ab	632
	zero	0
	sprp3	0		store_packed_bb	633
	zero	0
	sprp5	0		store_packed_lb	634
	zero	0
	sprp7	0		store_packed_sb	635
	zero	0
	lprpbp	0		load_packed_bp	636
	zero	0
	lprplp	0		load_packed_lp	637
	zero	0
	lprp1	0		load_packed_ab	638
	zero	0
	lprp3	0		load_packed_bb	639
	zero	0
	lprp5	0		load_packed_lb	640
	zero	0
	lprp7	0		load_packed_sb	641
	zero	0
	zero	zero_bo_bp,1	zero_bo_bp	642
	zero	bp
	zero	abd,1		abd		643
	zero	0
	zero	a9bd,1		a9bd		644
	zero	0
	ada	0		ada		645
	zero	a
	zero	ss_ext_entry,3	ss_ext_entry	646
	zero	all
	zero	ss_ext_entry_desc,3 ss_ext_entry_desc	647
	zero	all
	zero	ss_int_entry,3	ss_int_entry	648
	zero	all
	zero	ss_int_entry_desc,3 ss_int_entry_desc	649
	zero	all
	zero	ss_val_entry,3	ss_val_entry	650
	zero	all
	zero	ss_val_entry_desc,3 ss_val_entry_desc	651
	zero	all
	zero	pointer_mac_c_ab,1	pointer_mac_c_ab	652
	zero	0
	zero	pointer_mac_c_bb,1	pointer_mac_c_bb	653
	zero	0
	zero	pointer_mac_c_lb,1	pointer_mac_c_lb	654
	zero	0
	zero	pointer_mac_c_sb,1	pointer_mac_c_sb	655
	zero	0
	zero	addrel_mac_c_ab,1	addrel_mac_c_ab	656
	zero	0
	zero	addrel_mac_c_bb,1	addrel_mac_c_bb	657
	zero	0
	zero	addrel_mac_c_lb,1	addrel_mac_c_lb	658
	zero	0
	zero	addrel_mac_c_sb,1	addrel_mac_c_sb	659
	zero	0
	zero	pointer_mac_bs_ab,1 pointer_mac_bs_ab	660
	zero	0
	zero	pointer_mac_fx_ab,1 pointer_mac_fx_ab	661
	zero	0
	zero	pointer_mac_bs_bb,1 pointer_mac_bs_bb	662
	zero	0
	zero	pointer_mac_fx_bb,1 pointer_mac_fx_bb	663
	zero	0
	zero	pointer_mac_bs_lb,1 pointer_mac_bs_lb	664
	zero	0
	zero	pointer_mac_fx_lb,1 pointer_mac_fx_lb	665
	zero	0
	zero	pointer_mac_bs_sb,1 pointer_mac_bs_sb	666
	zero	0
	zero	pointer_mac_fx_sb,1 pointer_mac_fx_sb	667
	zero	0
	zero	addrel_mac_bs_ab,1	addrel_mac_bs_ab	668
	zero	0
	zero	addrel_mac_fx_ab,1	addrel_mac_fx_ab	669
	zero	0
	zero	addrel_mac_bs_bb,1	addrel_mac_bs_bb	670
	zero	0
	zero	addrel_mac_fx_bb,1	addrel_mac_fx_bb	671
	zero	0
	zero	addrel_mac_bs_lb,1	addrel_mac_bs_lb	672
	zero	0
	zero	addrel_mac_fx_lb,1	addrel_mac_fx_lb	673
	zero	0
	zero	addrel_mac_bs_sb,1	addrel_mac_bs_sb	674
	zero	0
	zero	addrel_mac_fx_sb,1	addrel_mac_fx_sb	675
	zero	0
	zero	baseptr_mac_bs_ab,2 baseptr_mac_bs_ab	676
	zero	0
	zero	baseptr_mac_fx_ab,2 baseptr_mac_fx_ab	677
	zero	0
	zero	baseptr_mac_bs_bb,2 baseptr_mac_bs_bb	678
	zero	0
	zero	baseptr_mac_fx_bb,2 baseptr_mac_fx_bb	679
	zero	0
	zero	baseptr_mac_bs_lb,2 baseptr_mac_bs_lb	680
	zero	0
	zero	baseptr_mac_fx_lb,2 baseptr_mac_fx_lb	681
	zero	0
	zero	baseptr_mac_bs_sb,2 baseptr_mac_bs_sb	682
	zero	0
	zero	baseptr_mac_fx_sb,2 baseptr_mac_fx_sb	683
	zero	0
	zero	zero_bo_ab,1	zero_bo_ab	684
	zero	0
	zero	zero_bo_bb,1	zero_bo_bb	685
	zero	0
	zero	zero_bo_lb,1	zero_bo_lb	686
	zero	0
	zero	zero_bo_sb,1	zero_bo_sb	687
	zero	0
	anq	0		anq		688
	zero	q
	erq	0		erq		689
	zero	q
	ersq	0		ersq		690
	zero	0
	zero	charno_mac,5	charno_mac	691
	zero	aq
	zero	bitno_mac,6	bitno_mac		692
	zero      aq
	zero	0		UNUSED		693
	zero	0
	zero	0		UNUSED		694
	zero	0
	zero	alloc_based_mac,2	alloc_based_mac	695
	zero	0
	zero	free_based_mac,1	free_based_mac	696
	zero	0
	zero	empty_area_mac,1	empty_area_mac	697
	zero	0
	zero	size_ck_suffix_1,4	size_ck_suffix_1	698
	zero	0
	zero	long_profile_mac,1	long_profile_mac	699
	zero	0
	zero	ix_before_chars,1	ix_before_chars	700
	zero	aq+bp+sr
	zero	ix_before_bits,1	ix_before_bits	701
	zero	aq+bp+sr
	zero	ix_after_chars,1	ix_after_chars	702
	zero	aq+bp+sr
	zero	ix_after_bits,1	ix_after_bits	703
	zero	aq+bp+sr
	zero	ix_before_chars_1,5 ix_before_chars_1	704
	zero	q,compare
	zero	ix_before_bits_1,1	ix_before_bits_1	705
	zero	aq+bp+sr
	zero	ix_after_chars_1,7	ix_after_chars_1	706
	zero	q,compare
	zero	ix_after_bits_1,1	ix_after_bits_1	707
	zero	aq+bp+sr
	zero	ix_before_chars_2,7 ix_before_chars_2	708
	zero	q,compare
	zero	ix_after_chars_2,8	ix_after_chars_2	709
	zero	q,compare
	zero	verify_ltrim,1	verify_ltrim	710
	zero	q+sr
	zero	verify_rtrim,1	verify_rtrim	711
	zero	q+sr
	zero	verify_ltrim_inline,6 verify_ltrim_inline 712
	zero	q,compare
	zero	verify_rtrim_inline,6 verify_rtrim_inline 713
	zero	q,compare
	stx0	0		stx0		714
	zero	0
	stx1	0		stx1		715
	zero	0
	stx2	0		stx2		716
	zero	0
	stx3	0		stx3		717
	zero	0
	stx4	0		stx4		718
	zero	0
	stx5	0		stx5		719
	zero	0
	stx6	0		stx6		720
	zero	0
	stx7	0		stx7		721
	zero	0
	zero	stacq_mac,2	stacq_mac		722
	zero	aq
	zero	clock_mac,1	clock_mac		723
	zero	aq+lp		(also pr7)
	zero	vclock_mac,1	vclock_mac	724
	zero	aq+bp+lp		(also pr7)
	ars	0		ars		725
	zero	a
	zero	stop_mac,1	stop_mac		726
	zero	0
	zero	return_main_mac,1	return_main_mac	727
	zero	0
	zero	set_main_mac,1	set_main_mac	728
	zero	0
	zero	begin_return_main,2 begin_return_main	729
	zero	all
	sprp6	0		store_packed_sp	730
	zero	0
	zero	size_check_uns_fx1,1 size_check_uns_fx1 731
	zero	0
	zero	size_check_uns_fx2,1 size_check_uns_fx2 732
	zero	0
	zero	uns_fx1_to_bs,2	uns_fx1_to_bs	733
	zero	a
	zero	uns_fx2_to_bs,2	uns_fx2_to_bs	734
	zero	aq
	zero	xr18_to_q,2	xr18_to_q		735
	zero	q
	zero	a4bd,1		a4bd		736
	zero	0
	zero	abs_decimal_4bit,3	abs_decimal_4bit	737
	zero	dr
	zero	digit_to_bit,2	digit_to_bit	738
	zero	aq
	zero	zero_4bcs,3	zero_4bcs		739
	zero	dr
	zero	rank_eis_mac,3	rank_eis_mac	740
	zero	0
	zero	prepare_call_long,3 prepare_call_long	741
	zero	aq
	zero	prepare_quick_call_long,4	prepare_quick_call_long	742
	zero	bp+aq
	"
macro_count:
	vfd	36/(*-macro_table)/2 all macros must precede this line
"
" definitions of multi_word macros
"
lda_ldq:
	lda	arg1
	ldq	arg1+1
sta_stq:
	sta	arg1
	stq	arg1+1
lcfl1:
	fld	arg1
fneg:
	fneg
lcfl2:
	dfld	arg1
	fneg
sbfx3:
	adl	arg1
negl:
	negl
neg:
	neg
ana_anq:
	ana	arg1
	anq	arg1+1
ansa_ansq:
	ansa	arg1
	ansq	arg1+1
ora_orq:
	ora	arg1
	orq	arg1+1
orsa_orsq:
	orsa	arg1
	orsq	arg1+1
era_erq:
	era	arg1
	erq	arg1+1
ersa_ersq:
	ersa	arg1
	ersq	arg1+1
clear_aq:
	fld	0,dl
clear_q:
	ldq	0,dl
fx1_to_fx2:
	llr	36
	lrs	36
alloc_char_temp:
	tsx0	ap|op_vec+0
alloc_bit_temp:
	tsx0	ap|op_vec+1
alloc_temp:
	tsx0	ap|op_vec+2
realloc_char_temp:
	tsx0	ap|op_vec+3
realloc_bit_temp:
	tsx0	ap|op_vec+4
store_string:
	tsx0	ap|op_vec+28
cat_realloc_char:
	tsx0	ap|op_vec+29
cat_realloc_bit:
	tsx0	ap|op_vec+30
chars_move_vt:
chars_move:
move_chars:
cat_move_chars:
	mlr	(0),(0),fill(blank)
	zero	arg2,char
	zero	arg1,char
bits_move_vt:
bits_move:
copy_bits:
move_bits:
cat_move_bits:
	csl	(0),(0),bool(move)
	zero	arg2,bit
	zero	arg1,bit
move_cs_load_1:
	mlr	(0),(0),fill(0)
	zero	arg2,char
	zero	arg1,char+4
move_bs_load_1:
	csl	(0),(0),bool(move)
	zero	arg2,bit
	zero	arg1,bit+36
move_cs_load_2:
	mlr	(0),(0),fill(0)
	zero	arg2,char
	zero	arg1,char+8
move_bs_load_2:
	csl	(0),(0),bool(move)
	zero	arg2,bit
	zero	arg1,bit+72
save_string_aq:
	mlr	(pr),(0),fill(0)
	desc9a	sp|40,8
	zero	arg1,char+8
move_not:
	csl	(0),(0),bool(not)
	zero	arg2,bit
	zero	arg1,bit
move_and:
	csl	(0),(0),bool(and)
	zero	arg2,bit
	zero	arg1,bit
move_or:
	csl	(0),(0),bool(or)
	zero	arg2,bit
	zero	arg1,bit
move_andnot_0:
	csl	(0),(0),bool(02)
	zero	arg2,bit
	zero	arg1,bit
move_andnot_1:
	csl	(0),(0),bool(04),fill(1)	"forces zeroes in result if source shorter
	zero	arg2,bit
	zero	arg1,bit
test_bits:
	sztl	(0),(0),bool(move)
	zero	arg2,bit
	zero	arg1,bit
test_not:
	sztl	(0),(0),bool(not)
	zero	arg2,bit
	zero	arg1,bit
test_and:
	sztl	(0),(0),bool(and)
	zero	arg2,bit
	zero	arg1,bit
test_or:
	sztl	(0),(0),bool(or)
	zero	arg2,bit
	zero	arg1,bit
test_xor:
	sztl	(0),(0),bool(xor)
	zero	arg2,bit
	zero	arg1,bit
test_andnot_0:
	sztl	(0),(0),bool(02)
	zero	arg2,bit
	zero	arg1,bit
test_andnot_1:
	sztl	(0),(0),bool(04),fill(1)	"forces zeroes  in result if source shorter
	zero	arg2,bit
	zero	arg1,bit
move_decimal:
move_numeric:
	mvn	(0),(0)
	zero	arg2,dec
	zero	arg1,dec
move_decimal_rd:
	mvn	(0),(0),round
	zero	arg2,dec
	zero	arg1,dec
add_decimal:
	ad3d	(0),(0),(0)
	zero	arg2,dec
	zero	arg3,dec
	zero	arg1,dec
add_decimal_rd:
	ad3d	(0),(0),(0),round
	zero	arg2,dec
	zero	arg3,dec
	zero	arg1,dec
add_decimal_2:
	ad2d	(0),(0)
	zero	arg2,dec
	zero	arg1,dec
add_decimal_2_rd:
	ad2d	(0),(0),round
	zero	arg2,dec
	zero	arg1,dec
sub_decimal:
	sb3d	(0),(0),(0)
	zero	arg3,dec
	zero	arg2,dec
	zero	arg1,dec
sub_decimal_rd:
	sb3d	(0),(0),(0),round
	zero	arg3,dec
	zero	arg2,dec
	zero	arg1,dec
sub_decimal_2:
	sb2d	(0),(0)
	zero	arg2,dec
	zero	arg1,dec
sub_decimal_2_rd:
	sb2d	(0),(0),round
	zero	arg2,dec
	zero	arg1,dec
mult_decimal:
	mp3d	(0),(0),(0)
	zero	arg2,dec
	zero	arg3,dec
	zero	arg1,dec
mult_decimal_rd:
	mp3d	(0),(0),(0),round
	zero	arg2,dec
	zero	arg3,dec
	zero	arg1,dec
mult_decimal_2:
	mp2d	(0),(0)
	zero	arg2,dec
	zero	arg1,dec
mult_decimal_2_rd:
	mp2d	(0),(0),round
	zero	arg2,dec
	zero	arg1,dec
"
"	At present, the hardware does rounding on floating point decimal division incorrectly,
"	so we don't actually generate a divide with the round bit on.
"
div_decimal:
div_decimal_rd:
	dv3d	(0),(0),(0)
	zero	arg3,dec
	zero	arg2,dec
	zero	arg1,dec
div_decimal_2:
div_decimal_2_rd:
	dv2d	(0),(0)
	zero	arg2,dec
	zero	arg1,dec
compare_decimal:
	cmpn	(0),(0)
	zero	arg2,dec
	zero	arg1,dec
move_numeric_edit:
	mvne	(0),(0),(0)
	zero	arg2,dec
	zero	arg3,char
	zero	arg1,char
pic_test:
	cmpn	(0),(0)
	zero	arg1,dec
	zero	arg2,dec
	tze	arg3
dtb_1:
	dtb	(0),(0)
	zero	arg2,dec
	zero	arg1,char+4
dtb_2:
	dtb	(0),(0)
	zero	arg2,dec
	zero	arg1,char+8
btd_1:
	btd	(0),(0)
	zero	arg2,char+4
	zero	arg1,dec
btd_2:
	btd	(0),(0)
	zero	arg2,char+8
	zero	arg1,dec
mpcdec:
	epp2	arg1
	tsx0	ap|op_vec+392
dvcdec:
	epp2	arg1
	tsx0	ap|op_vec+393
dvrcdec:
	epp2	arg1
	tsx0	ap|op_vec+394
abs_decimal:
	mlr	(0),(0),fill(plus)
	zero	0
	zero	arg1,char+1
abs_decimal_4bit:
	mlr	(0),(0),fill(plus)
	zero	0
	zero	arg1,char4+1
min_dec:
	cmpn	(0),(0)
	zero	arg2,dec
	zero	arg1,dec
	tmoz	4,ic
max_dec:
	cmpn	(0),(0)
	zero	arg2,dec
	zero	arg1,dec
	tpl	4,ic
ceil_dec:
	epp2	arg1
	tsx0	ap|op_vec+395
floor_dec:
	epp2	arg1
	tsx0	ap|op_vec+396
sign_dec:
	epp2	arg1
	tsx0	ap|op_vec+397
abs_cdec:
	epp2	arg1
	tsx0	ap|op_vec+398
trunc_dec:
	epp2	arg1
	tsx0	ap|op_vec+399
mod_dec:
	epp2	arg1
	tsx0	ap|op_vec+400
comp_bits:
	tsx0	ap|op_vec+20
support_mac:
	tsx0	ap|op_vec+401
a_to_x0:
	eax0	0,al
b2c_mac:
	adq	8,dl
	div	9,dl
b2w_mac:
	adq	35,dl
	div	36,dl
c2b_mac:
	mpy	9,dl
c2w_mac:
	adq	3,dl
	qrs	2
digit_to_bit:
	mpy	9,dl
	qrs	1
pf_mac:
	qrs	9
	anq	=o777,dl
so_mac:
	tsx0	ap|op_vec+72
	spribp	arg1
longbs_to_bs18:
	tsx0	ap|op_vec+73
mod_bit_mac:
	div	36,dl
mod2_mac:
	adq	1,dl
	anq	=o777776,dl
mod4_mac:
	adq	3,dl
	anq	=o777774,dl
mod8_mac:
	adq	7,dl
	anq	=o777770,dl
mod16_mac:
	adq	15,dl
	anq	=o777760,dl
translate_2:
	tsx0	ap|op_vec+337
translate_3:
	tsx0	ap|op_vec+338
inline_translate:
	mvt	(0),(0),fill(blank)
	zero	arg2,char
	zero	arg1,char
	zero	arg3,addr
ext_and_1:
	tsx0	ap|op_vec+18
ext_and_2:
	tsx0	ap|op_vec+19
fx1_to_fl2:
	tsx0	ap|fx1_to_fl2_
trunc_fl:
	tsx0	ap|op_vec+235
fl2_to_fx1:
	tsx0	ap|op_vec+67
fx2_to_fl2:
	lde	=71b25,du
	fad	=0.,du
fl2_to_fx2:
	tsx0	ap|op_vec+68
longbs_to_fx2:
	tsx0	ap|op_vec+69
longbs_to_fl2:
	tsx0	ap|op_vec+69
	llr	36
	lrs	36
blank_q:
	ldq	ap|blanks_
cpcs1_odd:
cpbs2_odd:
	cmpa	arg1
	tnz	2,ic
	cmpq	arg1+1
cpcs_ext1:
	tsx0	ap|op_vec+24
cpcs_ext2:
	tsx0	ap|op_vec+25
cpbs1_odd:
	cmpa	arg1
	tnz	2,ic
	szn	arg1+1
cpbs1_even:
	ldq	0,du
	cmpaq	arg1
cpbs2:
	cmpa	arg1
	tnz	2,ic
	cmpq	0,du
cpbs_ext1:
	tsx0	ap|op_vec+26
cpbs_ext2:
	tsx0	ap|op_vec+27
cpbs3:
	cmpb	(0),(0)
	zero	arg1,bit
	zero	0
cp_chars:
	cmpc	(0),(0),fill(blank)
	zero	arg1,char
	zero	arg2,char
cp_bits:
	cmpb	(0),(0),fill(0)
	zero	arg1,bit
	zero	arg2,bit
r_l_a:
	tsx0	ap|r_l_a_
r_l_s:
	tsx0	ap|r_l_s_
r_g_a:
	tsx0	ap|r_g_a_
r_g_s:
	tsx0	ap|r_g_s_
r_e_as:
	tsx0	ap|r_e_as_
r_ne_as:
	tsx0	ap|r_ne_as_
r_le_a:
	tsx0	ap|r_le_a_
r_le_s:
	tsx0	ap|r_le_s_
r_ge_a:
	tsx0	ap|r_ge_a_
r_ge_s:
	tsx0	ap|r_ge_s_
tra_ext_1:
	tra	ap|op_vec+70
tra_ext_2:
	tra	ap|op_vec+71
load_pt_reg:
	eppbp	arg1
	spribp	sp|40
make_lv:
	eppbp	arg1
	ldq	arg2
	tsx0	ap|op_vec+66
store_lv:
	eppbp	arg1
	tsx0	ap|op_vec+65
set_stack:
	ldq	arg1
	tsx0	ap|set_stack_
j_g_s:
	tze	2,ic
	trc	arg1
j_le_s:
	tnc	arg1
	tze	arg1
reset_stack:
	tsx0	ap|op_vec+163
get_ops_mac:
	epaq	0,ic
	lprplp	sb|22,*au
	eppbp	arg1
	tra	0,0
ss_enter_begin_block:
	eax7	0
	tspbp	ap|op_vec+405
enter_begin_block:
	eax7	0
	tspbp	ap|op_vec+35
leave_begin_block:
	tsx0	ap|op_vec+36
return_mac:
	tra	ap|op_vec+48
entry_macro:
	eax7	0
	tsx0	arg2
	tspbp	arg1
enter_prologue:
	sxl0	arg1
leave_prologue:
	lxl0	arg1
	tra	0,0
call_prologue:
	tsx0	arg1
call_ent_var_d:
	tsx0	ap|op_vec+37
call_ent_var:
	tsx0	ap|op_vec+38
call_ext_in_d:
	tsx0	ap|op_vec+39
call_ext_in:
	tsx0	ap|op_vec+40
call_ext_out_d:
	tsx0	ap|op_vec+41
call_ext_out:
	tsx0	ap|op_vec+42
call_int_this_d:
	tsx0	ap|op_vec+43
call_int_this:
	tsx0	ap|op_vec+44
call_int_other_d:
	tsx0	ap|op_vec+45
call_int_other:
	tsx0	ap|op_vec+46
prepare_call:
	eax1	arg1
	fld	arg2
qls_9:
	qls	9
set_bit_addr:
	sxl1	arg1+1
pointer_mac_bs:
	eawpbp	0,au
pointer_mac_fx:
	eawpbp	0,ql
addrel_mac_bs:
	awd	bp|0,au
addrel_mac_fx:
	awd	bp|0,ql
baseptr_mac_bs:
	epbpbp	sp|0
	easpbp	0,au
baseptr_mac_fx:
	epbpbp	sp|0
	easpbp	0,ql
pointer_mac_bs_ab:
	eawpab	0,au
pointer_mac_fx_ab:
	eawpab	0,ql
pointer_mac_bs_bb:
	eawpbb	0,au
pointer_mac_fx_bb:
	eawpbb	0,ql
pointer_mac_bs_lb:
	eawplb	0,au
pointer_mac_fx_lb:
	eawplb	0,ql
pointer_mac_bs_sb:
	eawpsb	0,au
pointer_mac_fx_sb:
	eawpsb	0,ql
addrel_mac_bs_ab:
	awd	ab|0,au
addrel_mac_fx_ab:
	awd	ab|0,ql
addrel_mac_bs_bb:
	awd	bb|0,au
addrel_mac_fx_bb:
	awd	bb|0,ql
addrel_mac_bs_lb:
	awd	lb|0,au
addrel_mac_fx_lb:
	awd	lb|0,ql
addrel_mac_bs_sb:
	awd	sb|0,au
addrel_mac_fx_sb:
	awd	sb|0,ql
baseptr_mac_bs_ab:
	epbpab	sp|0
	easpab	0,au
baseptr_mac_fx_ab:
	epbpab	sp|0
	easpab	0,ql
baseptr_mac_bs_bb:
	epbpbb	sp|0
	easpbb	0,au
baseptr_mac_fx_bb:
	epbpbb	sp|0
	easpbb	0,ql
baseptr_mac_bs_lb:
	epbplb	sp|0
	easplb	0,au
baseptr_mac_fx_lb:
	epbplb	sp|0
	easplb	0,ql
baseptr_mac_bs_sb:
	epbpsb	sp|0
	easpsb	0,au
baseptr_mac_fx_sb:
	epbpsb	sp|0
	easpsb	0,ql
set_chars:
	tsx0	ap|op_vec+302
set_bits:
	tsx0	ap|op_vec+303
absfx1:
	tpl	3,ic
	erq	ap|ones
	adq	1,dl
absfx2:
	tpl	2,ic
	negl
absfl1:
absfl2:
	tpl	2,ic
	fneg
load_offsets:
	ldq	arg1+1
	sbq	arg2
store_offsets:
	ldq	arg1
	asq	arg2+1
stac_mac:
	tsx0	ap|op_vec+74
sign_mac:
	tsx0	ap|op_vec+75
baseno_mac:
	ana	=o077777,du
segno_mac:
	llr	18		" segno to QL
	anq	=o077777,dl	" by itself
mod_byte_mac:
	lda	arg1
	lrs	2
	qrl	34
mod_byte_mac_exp:
	lda	0,dl
	lls	34
	qrl	34
mod_half_mac:
	lda	arg1
	lrs	1
	qrl	35
mod_half_mac_exp:
	lda	0,dl
	lls	35
	qrl	35
"
bound_ck_mac:
	ifnot	atm2
	cplsave	arg2
*
	ifnot	atm3
	cplsave	arg3
*
	fetch	arg4
	lda	arg3
	switch	1,type2
	jump	bnd_ck_fx1
	jump	bnd_ck_fx2
bnd_ck_fx1:
	bump	arg2		"we don't want cwl to drop count to zero
	cwl	arg2
	tze	2,ic
	tsx0	ap|op_vec+76
	erase	q+lp
	ldq	arg2
	drop	arg2		"only 1st use of arg2 dropped the count
**
bnd_ck_fx2:
	cwl	arg2+1
	tze	2,ic
	tsx0	ap|op_vec+76
	erase	q+lp
	ldq	arg2+1
	drop	arg2
**
"
args_by_2_mac:
	ldq	sp|26,*
	qrs	18
min_fx1:
	cmpq	arg1
	tmi	2,ic
	ldq	arg1
min_fx2:
	cmpaq	arg1
	tmi	2,ic
	ldaq	arg1
min_fl1:
	fcmp	arg1
	tmi	2,ic
	fld	arg1
min_fl2:
	dfcmp	arg1
	tmi	2,ic
	dfld	arg1
max_fx1:
	cmpq	arg1
	tpl	2,ic
	ldq	arg1
max_fx2:
	cmpaq	arg1
	tpl	2,ic
	ldaq	arg1
max_fl1:
	fcmp	arg1
	tpl	2,ic
	fld	arg1
max_fl2:
	dfcmp	arg1
	tpl	2,ic
	dfld	arg1
neg_q:
	erq	ap|ones
	adq	1,dl
mpfx2:
	eppbp	arg1
	tsx0	ap|op_vec+80
mpfx3:
	eppbp	arg1
	tsx0	ap|op_vec+81
substr_ck_mac:
	ifnot	atm2
	cplsave	arg2
*
	ifnot	atm3
	cplsave	arg3
*
	fetch	arg4
	lda	arg3
	switch	1,type2
	jump	range_ck_fx1
	jump	range_ck_fx2
range_ck_fx1:
	bump	arg2
	cwl	arg2
	tze	2,ic
	tsx0	ap|op_vec+404
	erase	q+lp
	ldq	arg2
	drop	arg2	second use of arg2 in non-macro.
**
range_ck_fx2:
	cwl	arg2+1
	tze	2,ic
	tsx0	ap|op_vec+404
	erase	q+lp
	ldq	arg2+1
	drop	arg2
**
"
set_ptr_to:
	eppbp	arg1
	spribp	arg2
mdfl1:
	eppbp	arg1
	tsx0	ap|op_vec+89
mdfl2:
	eppbp	arg1
	tsx0	ap|op_vec+90
mdfx1:
	eppbp	arg1
	tsx0	ap|op_vec+91
mdfx2:
	eppbp	arg1
	tsx0	ap|op_vec+92
mdfx3:
	eppbp	arg1
	tsx0	ap|op_vec+93
mdfx4:
	eppbp	arg1
	tsx0	ap|op_vec+94
divide_fx1:
	epp2	arg1
	tsx0	ap|op_vec+329
divide_fx2:
	epp2	arg1
	tsx0	ap|op_vec+330
divide_fx3:
	epp2	arg1
	tsx0	ap|op_vec+331
divide_fx4:
	epp2	arg1
	tsx0	ap|op_vec+332
scaled_mdfx1:
	epp2	arg1
	tsx0	ap|op_vec+333
scaled_mdfx2:
	epp2	arg1
	tsx0	ap|op_vec+334
scaled_mdfx3:
	epp2	arg1
	tsx0	ap|op_vec+335
scaled_mdfx4:
	epp2	arg1
	tsx0	ap|op_vec+336
make_desc_mac:
	orq	arg2
	stq	arg1
quick_desc_size:
	ldq	arg1
	anq	ap|168		=o000077777777
get_desc_size:
	ldq	arg1
	tmi	2,ic
	anq	=o777777,dl
	anq	ap|168		=o000077777777
pad_chars:
	tsx0	ap|op_vec+99
pad_bits:
	tsx0	ap|op_vec+100
load_link_pt:
	epplp	sp|36,*
assign_label_const:
	sprilp	arg1
	sprisp	arg1+2
is_label_const:
	spribp	arg1
	sprisp	arg1+2
load_display_ptr:
	epplp	sp|32,*
walk_display_ptr:
	epplp	lp|32,*
begin_return:
	ldq	arg1
	tra	ap|op_vec+47
begin_return_main:
	ldq	arg1
	tra	ap|op_vec+443
revert_mac:
	stz	arg1+4
signal_mac:
	eppbp	arg1		string
	tsx0	ap|op_vec+101
enable_mac:
	eppbp	arg1		string
	tsx0	ap|op_vec+102
	tra	arg3		body of on_unit
	arg	arg2		stack loc of on_unit
get_area_mod_8:
	eppbp	arg1
	eaq	bp|7
	anq	=o777770,du
	eawpbp	0,qu
	spribp	arg2
fx1_to_bs:
	lda	arg1
	tpl	2,ic
	neg	0
	als	arg2
fx2_to_bs:
	ldaq	arg1
	tpl	2,ic
	negl	0
	lls	arg2
uns_fx1_to_bs:
	lda	arg1
	als	arg2
uns_fx2_to_bs:
	ldaq	arg1
	lls	arg2
ix_chars:
	tsx0	ap|op_vec+304
ix_rev_chars:
	tsx0	ap|op_vec+448
verify_rev_chars:
	tsx0	ap|op_vec+449
search_rev_chars:
	tsx0	ap|op_vec+450
ix_bits:
	tsx0	ap|op_vec+305
move_xor:
	csl	(0),(0),bool(xor)
	zero	arg2,bit
	zero	arg1,bit
beg_ev_proc:
	lxl7	0,dl
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+190
	vfd	18/2,18/0
	vfd	36/0
end_ev_proc:
	stq	arg1
	tra	ap|op_vec+48
symtab_mac:
	eppbp	arg2
	spribp	arg1+2
	adwpbp	arg3
	spribp	arg1+4
init_ps_mac:
	sprisp	arg1
	eppbp	arg1
	spribp	sp|ps_ptr
init_sslp:
	eppbp	arg2
	spribp	arg1+8
io_signal_mac:
	eppbp	arg1
	tsx0	ap|op_vec+139
end_ev_label:
	eppbp	arg1
	tsx0	ap|op_vec+65	move_label_variable
	tra	ap|op_vec+48	return
pointer_mac_const:
	eawpbp	0
addrel_mac_const:
	adwpbp	0,du
pointer_mac_c_ab:
	eawpab	0
pointer_mac_c_bb:
	eawpbb	0
pointer_mac_c_lb:
	eawplb	0
pointer_mac_c_sb:
	eawpsb	0
addrel_mac_c_ab:
	adwpab	0,du
addrel_mac_c_bb:
	adwpbb	0,du
addrel_mac_c_lb:
	adwplb	0,du
addrel_mac_c_sb:
	adwpsb	0,du
test_lda_ldq:
	lda	arg1
	ldq	arg1+1
	cmpaq	ap|0
testfx1:
	cmpq	0,dl
testfx2:
	cmpaq	ap|0
testfl1:
	fcmp	ap|2
testfl2:
	dfcmp	ap|2
ix_before_chars_1:
ix_chars_1:
	scm	(0),(0)
	zero	arg1,char
	zero	arg2,char
	arg	sp|46
	ldq	sp|46
	ttf	2,ic
	lcq	1,dl
	adq	1,dl
ix_chars_2:
	scd	(0),(0)
	zero	arg1,char
	zero	arg2,char
	arg	sp|46
	ldq	sp|46
	ttf	2,ic
	lcq	1,dl
	adq	1,dl
ix_rev_chars_1:
	scmr	(0),(0)
	zero	arg1,char
	zero	arg2,char
	arg	sp|46
	ldq	sp|46
	ttf	2,ic
	lcq	1,dl
	adq	1,dl
ix_rev_chars_2:
	scdr	(0),(0)
	zero	arg1,char
	zero	arg2,char
	arg	sp|46
	ldq	sp|46
	ttf	2,ic
	lcq	1,dl
	adq	1,dl
ix_bits_1:
	tsx0	ap|op_vec+307
zero_bits:
	csl	(0),(0),bool(move),fill(0)
	zero	0
	zero	arg1,bit
one_bits:
	csl	(0),(0),bool(move),fill(1)
	zero	0
	zero	arg1,bit
bool_mac_1:
	xec	ap|csl_vector,al
	zero	arg2,bit
	zero	arg1,bit
bool_mac_2:
	xec	ap|csl_vector,0
	zero	arg2,bit
	zero	arg1,bit
blank_chars:
	mlr	(0),(0),fill(blank)
	zero	0
	zero	arg1,char
zero_chars_q:
zero_chars:
	mlr	(0),(0)
	zero	0
	zero	arg1,char
one_chars:
	mlr	(0),(0),fill(777)
	zero	0
	zero	arg1,char
off_mac_easy:
	eppbp	arg1
	tsx0	ap|op_vec+285
off_mac_easy_pk:
	eppbp	arg1
	tsx0	ap|op_vec+286
off_mac_hard:
	eppbp	arg1
	tsx0	ap|op_vec+287
off_mac_hard_pk:
	eppbp	arg1
	tsx0	ap|op_vec+288
quick_return:
	rtcd	arg1
quick_entry:
quick_entry_args:
quick_entry_desc:
	sprilp	arg1
	spribp	arg1+2
	eppbp	bp|2,au
	spribp	arg1+4
quick_call:
	tsplp	arg1
prepare_quick_call:
	eppbp	arg1
	fld	arg2
	staq	bp|0
assign_lab_to_int:
	eax0	arg2
	sxl0	arg1
load_logical:
	lda	arg1
mask_logical:
	ana	=o400000,du
store_logical:
	era	arg1
	ana	=o400000,du
	ersa	arg1
not_logical:
	era	=o400000,du
tran_sign_fx1:
	eppbp	arg1
	tsx0	ap|op_vec+77
tran_sign_fl:
	eppbp	arg1
	tsx0	ap|op_vec+78
fort_mod_fx1:
	div	arg1
	lrs	36
fort_mod_fl1:
	eppbp	arg1
	tsx0	ap|op_vec+142
"unused_389:
"unused_391:
"unused_392:
rflb1_to_cflb1:
	fst	sp|44
	lda	sp|44
	ldq	=0.0,du
atm_rflb1_to_cflb1:
	lda	arg1
	ldq	=0.0,du
rfb1_to_cflb1:
	tsx0	ap|op_vec+143
rfb2_to_cflb1:
	tsx0	ap|op_vec+144
loop_end_var:
	ldq	arg2
	aos	arg2
	cmpq	arg3
	tmi	arg1
store_bp_hard:
	spribp	sp|46
	ldaq	sp|46
	staq	arg1
complex_mac:
	bump	arg1
	fetch	arg2
	fst	arg1
	drop	arg1
	fetch	arg3
	fst	arg1+1
**
conjg_mac:
	bump	arg1
	bump	arg2
	ifnot	atm2
	cplalt	arg2
*
	fld	arg2
	fst	arg1
	fld	arg2+1
	fneg	0
	fst	arg1+1
	drop	arg1
	drop	arg2
**
real_mac:
	ifnot	atm2
	cplalt	arg2
*
	fld	arg2
**
imag_mac:
	ifnot	atm2
	cplalt	arg2
*
	fld	arg2+1
	drop	arg2
**
square_fx1:
	stq	sp|46
	mpy	sp|46
square_fl1:
	fst	sp|46
	fmp	sp|46
square_fl2:
	dfst	sp|46
	dfmp	sp|46
h2w_mac:
	adq	1,dl
	qrs	1
unpk_to_pk:
	tsx0	ap|op_vec+7
pk_to_unpk:
	tsx0	ap|op_vec+6
bp_to_aq:
	spribp	sp|46
	ldaq	sp|46
lp_to_aq:
	sprilp	sp|46
	ldaq	sp|46
real_to_real_rd:
	tsx0	ap|op_vec+323
real_to_real_tr:
	tsx0	ap|op_vec+324
any_to_any_rd:
	tsx0	ap|op_vec+325
any_to_any_tr:
	tsx0	ap|op_vec+326
unpack_pic:
	tsx0	ap|op_vec+327
edit_pic:
	tsx0	ap|op_vec+328
shift_and_mask_1:
	als	arg1
	ana	arg2
	arl	arg1
shift_and_mask_2:
	lls	arg1
	anaq	arg2
	lrl	arg1
return_words:
	lxl0	arg1
	tra	ap|op_vec+183
return_bits:
	tra	ap|op_vec+309
return_chars:
	tra	ap|op_vec+308
fetch_chars:
	tsx0	ap|op_vec+196
fetch_bits:
fetch_bits_eis:
	tsx0	ap|op_vec+197
fetch_chars_eis:
	tsx0	ap|op_vec+403
get_term_mac:
	tsx0	ap|op_vec+198
put_term_mac:
	tsx0	ap|op_vec+199
put_data:
	tsx0	ap|op_vec+310
get_list:
	tsx0	ap|op_vec+314
get_edit:
	tsx0	ap|op_vec+313
put_list:
	tsx0	ap|op_vec+312
put_edit:
	tsx0	ap|op_vec+311
put_field:
	tsx0	ap|op_vec+406
put_field_chk:
	tsx0	ap|op_vec+407
put_control:
	tsx0	ap|op_vec+408
ftn_read:
	tsx0	ap|op_vec+317
ftn_write:
	tsx0	ap|op_vec+318
ftn_manip:
	tsx0	ap|op_vec+319
ftn_scalar_xmit:
	epp2	arg1
	tsx0	ap|op_vec+320
ftn_array_xmit:
	epp2	arg1
	tsx0	ap|op_vec+321
ftn_term:
	tsx0	ap|op_vec+322
stream_prep_mac:
	lda	arg1
	eppbp	arg2
	tsx0	ap|op_vec+205
recio_mac:
	lda	arg1
	tsx0	ap|op_vec+206
unpack_fl1:
	sta	sp|44
	fld	sp|44
unpack_fl2:
	staq	sp|44
	dfld	sp|44
unpack_cfl1:
	lrl	arg1
	als	arg1
pack_fl1:
	fst	sp|44
	lda	sp|44
pack_fl2:
	dfst	sp|44
	ldaq	sp|44
pack_cfl1:
	arl	arg1
	lls	arg1
open_mac:
	tsx0	ap|op_vec+207
close_mac:
	tsx0	ap|op_vec+208
compare_labels:
	ldaq	arg1
	eraq	arg2
	anaq	ap|ptr_mask_
	tnz	arg3
compare_files:
	ldaq	arg1+2
	eraq	arg2+2
	anaq	ap|ptr_mask_
fetch_pp:
	ldaq	arg1
	lda	sp|46
store_pp:
	spribp	arg1
	stq	arg1+1
fxscaled_to_fl2:
	lde	arg1
	fad	=0.,du
fl2_to_fxscaled:
	tsx0	ap|op_vec+226
"
trunc_fx1:
	tsx0	ap|op_vec+227
trunc_fx2:
	tsx0	ap|op_vec+228
ceil_fx1:
	tsx0	ap|op_vec+229
ceil_fx2:
	tsx0	ap|op_vec+230
ceil_fl:
	tsx0	ap|op_vec+231
floor_fx1:
	tsx0	ap|op_vec+232
floor_fx2:
	tsx0	ap|op_vec+233
floor_fl:
	tsx0	ap|op_vec+234
nop_mac:
	nop	0,du
round_fx1:
	tsx0	ap|op_vec+236
round_fx2:
	tsx0	ap|op_vec+237
round_fl:
	tsx0	ap|op_vec+292
	arg	arg1
repeat:
	tsx0	ap|op_vec+238
verify:
	tsx0	ap|op_vec+315
search:
	tsx0	ap|op_vec+316
reverse_cs:
	tsx0	ap|op_vec+251
reverse_bs:
	tsx0	ap|op_vec+252
chars_move_ck:
	mlr	(0),(0),fill(blank),enablefault
	zero	arg2,char
	zero	arg1,char
bits_move_ck:
	csl	(0),(0),bool(move),enablefault
	zero	arg2,bit
	zero	arg1,bit
signal_stringsize:
	tsx0	ap|op_vec+267
size_check_fx1:
	tsx0	ap|op_vec+265
size_check_fx2:
	tsx0	ap|op_vec+266
size_check_uns_fx1:
	tsx0	ap|op_vec+444
size_check_uns_fx2:
	tsx0	ap|op_vec+445
size_ck_varying:
	cmpq	arg1
	tmoz	3,ic
	tsx0	ap|op_vec+267
	ldq	arg1
size_ck_suffix:
	cmpq	arg1
	tpl	3,ic
	tsx0	ap|op_vec+267
	tra	2,ic
	ldq	arg1
cmp_suffix_1:
	cmpq	arg1
	tpl	5,ic
size_ck_suffix_1:
	cmpq	arg1
	tmi	3,ic
	tsx0	ap|op_vec+267
	tra	5,ic
size_ck_decimal:
	eax0	2,ic
	tov	ap|op_vec+385
move_3:
move_odd:
	lda	arg2
	sta	arg1
	lda	arg2+1
	sta	arg1+1
	lda	arg2+2
	sta	arg1+2
move_odd_odd_3:
move_odd_odd_5:
	lda	arg2
	sta	arg1
	ldaq	arg2+1
	staq	arg1+1
	ldaq	arg2+3
	staq	arg1+3
move_odd_odd_4:
	lda	arg2
	sta	arg1
	ldaq	arg2+1
	staq	arg1+1
	lda	arg2+3
	sta	arg1+3
move_odd_even_3:
	ldaq	arg2
	sta	arg1
	stq	arg1+1
	lda	arg2+2
	sta	arg1+2
move_odd_even_4:
	ldaq	arg2
	sta	arg1
	stq	arg1+1
	ldaq	arg2+2
	sta	arg1+2
	stq	arg1+3
move_even_odd_3:
	lda	arg2
	ldq	arg2+1
	staq	arg1
	lda	arg2+2
	sta	arg1+2
move_even_odd_4:
	lda	arg2
	ldq	arg2+1
	staq	arg1
	lda	arg2+2
	ldq	arg2+3
	staq	arg1+2
move_even:
move_even_even_3:
	ldaq	arg2
	staq	arg1
	lda	arg2+2
	sta	arg1+2
move_even_even_4:
move_even_even_6:
	ldaq	arg2
	staq	arg1
	ldaq	arg2+2
	staq	arg1+2
	ldaq	arg2+4
	staq	arg1+4
move_even_even_5:
	ldaq	arg2
	staq	arg1
	ldaq	arg2+2
	staq	arg1+2
	lda	arg2+4
	sta	arg1+4
pl1_ptr_hard:
	tsx0	ap|op_vec+270
pl1_ptr_hard_pk:
	tsx0	ap|op_vec+289
pl1_ptr_easy:
	tsx0	ap|op_vec+290
pl1_ptr_easy_pk:
	tsx0	ap|op_vec+291
xr_to_q:
	eaq	arg1
	qrs	18
xr18_to_q:
	eaq	arg1
	qrl	18
packed_to_bp:
	stq	sp|46
	lprpbp	sp|46
packed_bit_offset:
	qrl	30
move_words:
copy_mac:
	mlr	(0),(0)
	zero	arg2,char
	zero	arg1,char
ext_entry:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+188
ext_entry_desc:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+189
int_entry:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+190
int_entry_desc:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+191
val_entry:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+192
val_entry_desc:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+193
ss_ext_entry:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+386
ss_ext_entry_desc:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+387
ss_int_entry:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+388
ss_int_entry_desc:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+389
ss_val_entry:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+390
ss_val_entry_desc:
	eax7	0
	eppbp	sb|ops_ptr,*
	tspbp	bp|op_vec+391
inline_verify:
	scm	(0),(0)
	zero	arg2,char
	zero	arg1,char
	arg	sp|46
	ldq	1,dl
	ttn	2,ic
	ldq	0,dl
inline_search:
	scm	(0),(0)
	zero	arg2,char
	zero	arg1,char
	arg	sp|46
	ldq	1,dl
	ttf	2,ic
	ldq	0,dl
verify_ltrim_inline:
test_translate:
	tct	(0)
	zero	arg1,char
	zero	arg2,addr
	arg	sp|46
	ldq	sp|46
	anq	ap|tct_mask_
	ttf	2,ic
	lcq	1,dl
	adq	1,dl
verify_rtrim_inline:
test_trans_rev:
	tctr	(0)
	zero	arg1,char
	zero	arg2,addr
	arg	sp|46
	ldq	sp|46
	anq	ap|tct_mask_
	ttf	2,ic
	lcq	1,dl
	adq	1,dl
"
sqrt_mac:
	tsp3	ap|op_vec+339
sin_mac:
	tsp3	ap|op_vec+340
sind_mac:
	tsp3	ap|op_vec+341
cos_mac:
	tsp3	ap|op_vec+342
cosd_mac:
	tsp3	ap|op_vec+343
tan_mac:
	tsp3	ap|op_vec+344
tand_mac:
	tsp3	ap|op_vec+345
asin_mac:
	tsp3	ap|op_vec+346
asind_mac:
	tsp3	ap|op_vec+347
acos_mac:
	tsp3	ap|op_vec+348
acosd_mac:
	tsp3	ap|op_vec+349
atan_mac:
	tsp3	ap|op_vec+350
atand_mac:
	tsp3	ap|op_vec+351
log2_mac:
	tsp3	ap|op_vec+352
log_mac:
	tsp3	ap|op_vec+353
log10_mac:
	tsp3	ap|op_vec+354
exp_mac:
	tsp3	ap|op_vec+355
dsqrt_mac:
	tsp3	ap|op_vec+356
dsin_mac:
	tsp3	ap|op_vec+357
dsind_mac:
	tsp3	ap|op_vec+358
dcos_mac:
	tsp3	ap|op_vec+359
dcosd_mac:
	tsp3	ap|op_vec+360
dtan_mac:
	tsp3	ap|op_vec+361
dtand_mac:
	tsp3	ap|op_vec+362
dasin_mac:
	tsp3	ap|op_vec+363
dasind_mac:
	tsp3	ap|op_vec+364
dacos_mac:
	tsp3	ap|op_vec+365
dacosd_mac:
	tsp3	ap|op_vec+366
datan_mac:
	tsp3	ap|op_vec+367
datand_mac:
	tsp3	ap|op_vec+368
dlog2_mac:
	tsp3	ap|op_vec+369
dlog_mac:
	tsp3	ap|op_vec+370
dlog10_mac:
	tsp3	ap|op_vec+371
dexp_mac:
	tsp3	ap|op_vec+372
atan2_mac:
	tsp3	ap|op_vec+373
atan2d_mac:
	tsp3	ap|op_vec+374
datan2_mac:
	tsp3	ap|op_vec+375
datan2d_mac:
	tsp3	ap|op_vec+376
int_p_real:
	tsp3	ap|op_vec+377
int_p_dbl:
	tsp3	ap|op_vec+378
dbl_p_real:
	tsp3	ap|op_vec+379
dbl_p_dbl:
	tsp3	ap|op_vec+380
dbl_p_int:
	tsp3	ap|op_vec+381
real_p_real:
	tsp3	ap|op_vec+382
real_p_int:
	tsp3	ap|op_vec+383
int_p_int:
	tsp3	ap|op_vec+384
"				state_man$flush called after this macro
enable_file:
	eppbp	arg2
	eaa	arg1
	tsx0	ap|op_vec+293
	tra	arg3
"				state_man$flush called after this macro
enable_file_2:
	eppbp	arg2
	eaa	arg1
	ora	arg4
	tsx0	ap|op_vec+293
	tra	arg3
"
revert_file:
	eppbp	arg2
	eaa	arg1
	tsx0	ap|op_vec+294
"
alloc_block:
	eppbp	arg1
	tsx0	ap|op_vec+295
"
free_block:
	eppbp	arg1
	tsx0	ap|op_vec+296
"
push_ctl_data:
	eppbp	arg1
	tsx0	ap|op_vec+297
"
push_ctl_desc:
	eppbp	arg1
	tsx0	ap|op_vec+298
"
pop_ctl_data:
	eppbp	arg1
	tsx0	ap|op_vec+299
"
pop_ctl_desc:
	eppbp	arg1
	tsx0	ap|op_vec+300
"
allocation:
	eppbp	arg1
	tsx0	ap|op_vec+301
"
ab_to_aq:
	spri1	sp|46
	ldaq	sp|46
"
bb_to_aq:
	spri3	sp|46
	ldaq	sp|46
"
lb_to_aq:
	spri5	sp|46
	ldaq	sp|46
"
sb_to_aq:
	spri7	sp|46
	ldaq	sp|46
"
zero_bo_bp:
	adwpbp	0,du
zero_bo_ab:
	adwpab	0,du
zero_bo_bb:
	adwpbb	0,du
zero_bo_lb:
	adwplb	0,du
zero_bo_sb:
	adwpsb	0,du
"
abd:
	abd	ap|arg1
"
a9bd:
	a9bd	ap|arg1
"
a4bd:
	a4bd	ap|arg1
"
zero_mac_p_1:
	stz	arg1+1
"
alloc_based_area:
	tsx0	pr0|op_vec+409
	tra	arg1
alloc_based_mac:
	tsx0	pr0|op_vec+410
	tra	arg1
free_based_mac:
	tsx0	pr0|op_vec+411
empty_area_mac:
	tsx0	pr0|op_vec+412
"
long_profile_mac:
	tsx0	pr0|op_vec+426
"
ix_before_chars:
	tsx0	ap|op_vec+427
ix_before_bits:
	tsx0	ap|op_vec+428
ix_after_chars:
	tsx0	ap|op_vec+429
ix_after_bits:
	tsx0	ap|op_vec+430
ix_before_bits_1:
	tsx0	ap|op_vec+431
ix_after_chars_1:
	scm	(0),(0)
	zero	arg1,char
	zero	arg2,char
	arg	sp|46
	ldq	sp|46
	ttn	2,ic
	adq	1,dl
ix_after_bits_1:
	tsx0	ap|op_vec+432
ix_before_chars_2:
	scd	(0),(0)
	zero	arg1,char
	zero	arg2,char
	arg	sp|46
	ldq	sp|46
	ttf	2,ic
	adq	1,dl
ix_after_chars_2:
	scd	(0),(0)
	zero	arg1,char
	zero	arg2,char
	arg	sp|46
	ldq	sp|46
	adq	1,dl
	ttn	2,ic
	adq	1,dl
verify_ltrim:
	tsx0	ap|op_vec+433
verify_rtrim:
	tsx0	ap|op_vec+434
"
stacq_mac:
	ldq	arg1
	tsx0	ap|op_vec+435
"
clock_mac:
	tsx0	ap|op_vec+436
"
vclock_mac:
	tsx0	ap|op_vec+437
"
stop_mac:
	tra	ap|op_vec+440
"
return_main_mac:
	tra	ap|op_vec+441
"
set_main_mac:
	tsx0	ap|op_vec+442
"
zero_4bcs:
	mlr	(0),(0),fill(0)
	zero	0
	zero	arg1,char4+2
"
rank_eis_mac:
	mrl	(0),(0),fill(0)
	zero	arg2,char+1
	zero	arg1,char+4
"
prepare_call_long:
	eax1	arg1
	lda	arg2
	ldq	0,du
"
prepare_quick_call_long:
	eppbp	arg1
	lda	arg2
	ldq	0,du
	staq	bp|0

charno_mac:
	llr	18		" word count in AL, bit in QU
	ana	=o777777,dl	" flush ringno from AU
	als	2		" char count
	ada	ap|bitno_to_charno_,qu " bitno is in QU
	lrl	36		" back to the Q
bitno_mac:
				" S R
				" W B 
	llr	54		" B S
				" R W 
	ars	18		" 0 B
				" R W
	sta	sp|46		" stash
	anq	=o777777,dl	" 0 B
				" 0 W
	mpy	36,dl		" 0 0
				" W*36
	adq	sp|46		" 0 0
				" W*36+B

	end
