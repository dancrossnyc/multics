/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to generate store sequences

   Initial Version: 10 September 1971 by BLW
	Modified: 4 November 1972 by BLW
	Modified:	15 February 1973 by RAB
	Modified:	22 June 1973 by RAB for EIS
	Modified:	26 October 1975 by RAB to spec case fixed bin unal
	Modified:	19 March 1977 by RAB for aq_man$left_shift
		and aq_man$right_shift
	Modified:	7 August 1978 by RAB to fix 1751 by changing setting
		of store_it for complex_flt_bin_1
	Modified:	30 March 1980 by RAB for reference.(padded aligned)_for_store_ref.
		See prepare_operand for details.	*/

store:	proc(pt);

dcl	pt ptr;		/* points at reference node */

dcl	cg_stat$save_exp_called bit(1) aligned ext,
	cg_stat$text_pos fixed bin(18) ext,
	cg_stat$complex_ac ptr ext;

dcl	(p,q,arg(2)) ptr,
	(type,size,cfo,unit_size,unit_offset,d,i,j,k,u,n,n1,n2,n3,n4,units) fixed bin,
	(store_it,contiguous,all_ones,all_zeros,b1,arith) bit(1) aligned,
	(macro,offset) fixed bin(15),
	shift fixed bin(8),
	bs bit(12),
	mask bit(72) aligned,
	in_q fixed bin(1) initial(0),
	base3 bit(3) aligned,
	xec(2) bit(36) aligned,
	(ta,tq) bit(6);

dcl	m_a entry(ptr,bit(2) aligned);
dcl	c_a entry(fixed bin,fixed bin) returns(ptr),
	xr_man$load_const entry(fixed bin,fixed bin),
	expmac$abs entry(ptr,fixed bin),
	expmac$zero entry(fixed bin(15)),
	expmac$many entry(fixed bin(15),ptr,fixed bin),
	expmac$two_eis entry(fixed bin(15),ptr,ptr),
	long_op$c_or_b entry(ptr,fixed bin,fixed bin(15)),
	xr_man$load_var entry(ptr,fixed bin),
	base_man$load_any_var entry(fixed bin,ptr,bit(3) aligned),
	stack_temp$assign_block entry(ptr,fixed bin),
	state_man$flush_ref entry(ptr),
	state_man$erase_reg entry(bit(19) aligned),
	(aq_man$left_shift, aq_man$right_shift) entry(fixed bin(8),bit(1) aligned),
	aq_man$check_strings entry(fixed bin),
	aq_man$trim_aq entry(fixed bin),
	generate_constant entry(bit(*) aligned,fixed bin) returns(ptr),
	adjust_ref_count entry(ptr,fixed bin),
	expmac$one entry(fixed bin(15),ptr,fixed bin),
	expmac entry(fixed bin(15),ptr);

dcl	(abs,addr,addrel,bit,divide,fixed,mod,min,null,string,substr) builtin;

dcl (	bytes(2)		init(9,6),
	nbspw(2)		init(4,6)) fixed bin int static;

dcl	operator_table	init(262046) fixed bin(18) int static;	/* = 262144 - 98 */

	/* The following values are offsets obtained from a compilation
	   of pl1_operators_ */

dcl (	co_to_bo		init(0),
	ho_to_bo		init(4),
	store_a9_co	init(6),
	store_q9_co	init(26),		/* 32 octal */
	store_a9_ho	init(42),		/* 52 octal */
	store_q9_ho	init(54),		/* 66 octal */
	store_a6_ho	init(64),		/* 100 octal */
	store_q6_ho	init(82))		/* 122 octal */
			fixed bin static;

dcl	full(2) aligned bit(6) int static init("111100"b, "111111"b);

dcl	init_xec_7(2) bit(36) aligned int static
	init(	"000000000000000000111111011001011111"b,	/* lrl ap|0,7*	*/
		"000000000000000000111001110001001111"b);	/* xec ap|0,7	*/

dcl	init_xec_q(2) bit(36) aligned int static
	init(	"000000000000000000111111001001010110"b,	/* arl ap|0,ql*	*/
		"000000000000000000111001110001000110"b);	/* xec ap|0,ql	*/

dcl (	stfx1		init(15),
	stfx2		init(16),
	store_pt		init(61),
	shift_and_mask	init(106),
	als		init(134),
	ana(0:1)		init(40,688),
	anaq		init(42),
	era(0:1)		init(52,689),
	ersa(0:1)		init(55,690),
	lls		init(63),
	lrl		init(62),
	arl		init(245),
	orsa		init(49),
	pack_fl1		init(489),
	pack_cfl1		init(491),
	move_chars	init(98),
	store_units(2)	init(295,297),
	sta		init(4),
	st_reg(0:1)	init(4,15),
	store_logical	init(381)) fixed bin(15) int static;

%include cgsystem;
%include reference;
%include machine_state;
%include data_types;
%include boundary;
%include bases;

	all_zeros, all_ones = "0"b;

s0:	p = pt;

	if p -> reference.temp_ref & ^ p -> reference.aggregate
	then do;
	     if ^ p -> reference.allocated
	     then do;
		if p -> reference.data_type = complex_flt_bin_1
		then call expmac((stfx2),cg_stat$complex_ac);
		return;
		end;

	     store_it = cg_stat$save_exp_called;
	     end;
	else store_it = "1"b;

	goto l0;

store$force: entry(pt);

	all_zeros, all_ones = "0"b;
	p = pt;
	store_it = "1"b;

l0:	call state_man$flush_ref(p);

	type = p -> reference.data_type;

	if type = unpacked_ptr
	then do;
	     type = real_fix_bin_2;
	     goto l1;
	     end;

	if type = packed_ptr
	then do;
	     type = real_fix_bin_1;
	     goto l1;
	     end;

	if type >= char_string
	then do;
	     arith = "0"b;
	     goto string_;
	     end;

l1:	arith = "1"b;

	if ^ p -> reference.aligned_for_store_ref
	then do;

	     if p -> reference.temp_ref
		then p -> reference.value_in.storage = "1"b;

	     if type = real_fix_bin_1
	     then do;
		size = p -> reference.c_length;

		if p -> reference.hard_to_load
		then if size = bits_per_word
		     then do;
			in_q = 1;
			go to str1;
			end;
		     else;
		else do;
		     cfo = mod(p -> reference.c_offset * convert_offset(p -> reference.units),36);
		     if cfo < 0 then cfo = cfo + 36;

		     if cfo = bits_per_word - size
		     then do;
			in_q = 1;
			go to str1;
			end;
		     end;
		end;

	     call state_man$erase_reg("1"b);	/* erase a register */

	     a_reg.size, size = p -> reference.c_length;
	     a_reg.length = 72;

	     if type <= real_fix_bin_2
	     then do;
		a_reg.offset = 72 - size;
		goto str1;
		end;

	     if type <= real_flt_bin_2
	     then do;
		call expmac$zero(pack_fl1 - real_flt_bin_1 + type);
		a_reg.offset = 0;
		goto str1;
		end;

	     if type = complex_flt_bin_1
	     then do;
		k = bits_per_word - divide(size,2,17,0);
		if k > 0
		     then call expmac((pack_cfl1),c_a(k,1));
		a_reg.offset = 0;
		goto str1;
		end;

	     goto str1;
	     end;

	if type = complex_flt_bin_1 then macro = stfx2;
	else macro = stfx1 - 1 + type;

	if store_it then call expmac(macro,p);

up_q:	do i = 1 to q_reg.number;
	     if q_reg.variable(i) = p then goto thru;
	     end;

	if i < 11
	then do;
	     q_reg.number = i;
	     q_reg.variable(i) = p;
	     p -> reference.value_in.q = "1"b;
	     end;

thru:	if p -> reference.temp_ref & store_it
	then do;
	     p -> reference.store_ins = bit(fixed(cg_stat$text_pos - 1,18),18);
	     p -> reference.value_in.storage = "1"b;
	     end;

	return;

string_:	if ^ store_it then goto update_a;

	size = p -> reference.c_length * convert_size(type);

str1:

/* If a reference is hard_to_load, it is also hard to store and we will use EIS to
   accomplish the feat */

	if p -> reference.hard_to_load
	then do;

	     /* First shift string to the left of the aq */

	     if in_q = 0
	     then if a_reg.offset > 0
		then call aq_man$left_shift(a_reg.offset, a_reg.length > bits_per_word);

	     /* store the string in the double temp (sp|46) */

	     q = c_a(46,4);
	     q -> reference.c_length = p -> reference.c_length;

	     call expmac$one((st_reg(in_q)),q,fixed(size > bits_per_word,1));

	     /* Now update the machine state */

	     if ^ arith
		then call up_a;
		else type = bit_string;

	     /* Finally move from the temp to the actual reference */

	     if p -> reference.temp_ref
		then p -> reference.value_in.storage = "1"b;

	     call expmac$two_eis((move_chars + type - char_string),p,q);

	     if in_q ^= 0 then go to up_q;
	     return;
	     end;

	units = p -> reference.units;

	if units = word_
	then cfo = 0;
	else do;
	     cfo = mod(p -> reference.c_offset * convert_offset(units),36);
	     if cfo < 0 then cfo = cfo + 36;
	     end;

	/* have constant bit offset, do the store out-of-line if
	   the string overlaps into third word */

	offset = cfo;
	k = size + offset;
	d = fixed(k > 36,1);
	contiguous = k <= 36;

	if all_zeros then goto s1;
	if in_q > 0 then goto s1;

	shift = offset - a_reg.offset;
	if shift = 0 then goto s1;

	b1 = a_reg.length <= 36 & contiguous;

	if shift < 0
	then call aq_man$left_shift(- shift, ^ b1);

	else do;

	     if b1
		then i = bits_per_word;
		else i = bits_per_two_words;

	     call aq_man$check_strings(i-shift);
	     if a_reg.size + offset > i then a_reg.size = i - offset;

	     call aq_man$right_shift(shift, ^ b1);
	     end;

s1:	if offset > 0 then goto check;

          if size = 0
          then if ^ p -> reference.temp_ref
	     then goto easy_done;

	if mod(size,36) = 0
	then do;
	     if a_reg.length < size then call aq_man$trim_aq(size);
	     goto blast;
	     end;

	if ^ p -> reference.padded_for_store_ref then goto check;

	/* can do single store, trim any excess bits on right */

	if all_zeros then goto blast;

	if a_reg.size > size | a_reg.length < 36*(d + 1)
	then do;
	     call aq_man$trim_aq(size);
	     a_reg.size = size;
	     end;

blast:	call expmac$one((sta),p,d);
	goto easy_done;

	/* if offset is a constant multiple of 6 or 9 and size is a
	   multiple also, generate a stca-stcq or stba-stbq sequence.
	   otherwise, use insert code */

check:

	do i = 1 to 2;
	     u = bytes(i);
	     if mod(offset,u) = 0
	     then do;
		j = mod(size,u);
		if j = 0 then goto easy;

		if p -> reference.padded_for_store_ref
		then do;
		     size = size + (u - j);
		     goto easy;
		     end;

		end;
	     end;

	/* we must insert value into storage */

insert:	if all_ones
	then do;
	     call expmac$one((orsa),p,d);
	     go to easy_done;
	     end;

	if ^p -> reference.shared
	     then p -> reference.ref_count = p -> reference.ref_count + 1;

	call expmac$one((era(in_q)),p,d);

	p -> reference.perm_address = "1"b;


	/* have constant bit offset, no shifting needed */

	if offset = 0 then q = c_a(k,5);
	else do;
	     mask = (72)"0"b;
	     substr(mask,offset+1,size) = (72)"1"b;
	     if substr(mask,72,1) then q = c_a((offset),7);
	     else q = generate_constant(mask,d+1);
	     end;

	call expmac$one((ana(in_q)),q,d);

	call expmac$one((ersa(in_q)),p,d);

	p -> reference.perm_address = "0"b;

	if in_q > 0
	     then return;

done:	a_reg.size = 0;

	do i = 1 to a_reg.number;
	a_reg.variable(i) -> reference.value_in.a = "0"b;
	end;

	a_reg.number = 0;

	return;

	/* can use special character instructions, calculate modifiers */

easy:	unit_offset = divide(offset,u,17,0);
	unit_size = divide(size,u,17,0);

	bs = "0"b;
	substr(bs,unit_offset+1,unit_size) = (12)"1"b;

	n = nbspw(i);
	ta = substr(bs,1,n);
	tq = substr(bs,n+1,n);

	/* make destination addressable, place address in any base register if original address
	   has any tag other than 0 */

	call m_a(p,"0"b);

	if p -> reference.tag
	then do;
	     if cfo ^= 0
		then p -> reference.units = word_;	/* Inhibit base_man from loading fractional offset */
	     p -> reference.perm_address = "1"b;
	     if ^p -> reference.shared
		then p -> reference.ref_count = p -> reference.ref_count + 1;
	     call base_man$load_any_var(2,p,base3);
	     if cfo ^= 0
	     then do;

		/* Since we do not have full address in the pointer register,
		   we must flush its address from the machine state */

		p -> reference.units = units;
		j = which_base(fixed(base3,3));
		base_regs(j).type = 0;
		p -> reference.address_in.b(j) = "0"b;
		end;
	     end;

	p -> reference.perm_address = "1"b;

	if ta = full(i) then macro = sta;
	else do;
	     macro = store_units(i) + in_q;
	     p -> reference.tag = ta;
	     end;

	if ^p -> reference.shared
	     then p -> reference.ref_count = p -> reference.ref_count + 1;

	call expmac(macro,p);

	if k <= 36
	then do;
	     call adjust_ref_count(p,-1);
	     if in_q > 0 then go to up_q;
	     go to easy_done;
	     end;

	if tq = full(i)
	then do;
	     macro = stfx1;
	     tq = "0"b;
	     end;
	else macro = store_units(i) + 1;

	p -> address.offset = bit(fixed(fixed(p -> address.offset,15)+1,15),15);
	p -> address.tag = tq;


	call expmac(macro,p);

	a_reg.size = size;
	a_reg.length = size + offset;

easy_done:
	p -> reference.perm_address = "0"b;

	if arith then return;

	a_reg.offset = offset;

update_a:	call up_a;

	if a_reg.number = 0
	     then return;
	     else go to thru;

store$all_ones: entry(pt);

	all_ones = "1"b;
	all_zeros = "0"b;
	goto s0;

store$all_zeros: entry(pt);

	all_ones = "0"b;
	all_zeros = "1"b;
	goto s0;

store$save_string_temp: entry(pt);

	p = pt;
	call stack_temp$assign_block(p,2);
	p -> reference.address_in.storage = "0"b;
	p -> reference.store_ins = bit(cg_stat$text_pos,18);
	call expmac((store_pt),p);
	p -> reference.address_in.storage = "1"b;
	return;


up_a:	proc;

	do i = 1 to a_reg.number;
	if a_reg.variable(i) = p then return;
	end;

	if i < 11
	then do;
	     a_reg.number = i;
	     a_reg.variable(i) = p;
	     p -> reference.value_in.a = "1"b;
	     end;

end;


	end;
