/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(86-07-16,Ginter), approve(86-07-16,MCR7287), audit(86-07-16,Mabey),
     install(86-07-28,MR12.0-1105):
     Bug fixes for the MR12.0 release of the compiler.
                                                   END HISTORY COMMENTS */


/* Initial Version:	7 July 1975 by R. A. Barnes
	Modified:	28 May 1979 by RAB to update reference.address.offset if
		perm_address is on.
	Modified: 17 June 1985 by MM to fix 2110 by calling m_a if
		perm_address isn't on.  Now the perm_address bit will
		always be set after this routine is called.  */

get_single_ref:	proc(p) returns(ptr);

/* this procedure produces a reference to the right half of a double precision
   fixed binary variable so that it can be used with single precision instructions.
   It is called by aq_man, assign_op, and xr_man. */

dcl	(p,q) ptr;
dcl	mod builtin;

dcl	get_reference entry() returns(ptr);
dcl	adjust_ref_count entry(ptr,fixed bin);
dcl	m_a entry (ptr, bit(2) aligned);

%include reference;

	q = get_reference();
	q -> reference = p -> reference;

	if ^q -> reference.perm_address
	then do;
	     call m_a (q, "00"b);			/* fixes 2110 */
	     q -> reference.perm_address = "1"b;
	     end;

	if mod(q->reference.c_offset,2) = 0
	then do;
	     q -> reference.c_offset = q -> reference.c_offset + 1;
	     q -> reference.address.offset = bit(fixed(fixed(q -> reference.address.offset,15) + 1,15),15);
	     end;

	if ^ p -> reference.shared
	     then call adjust_ref_count(p,-1);
	return(q);

end;
