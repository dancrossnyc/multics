/****^  ***********************************************************
        *                                                         *
        * Copyright, (C) Honeywell Bull Inc., 1987                *
        *                                                         *
        * Copyright, (C) Honeywell Information Systems Inc., 1982 *
        *                                                         *
        * Copyright (c) 1972 by Massachusetts Institute of        *
        * Technology and Honeywell Information Systems, Inc.      *
        *                                                         *
        *********************************************************** */




/****^  HISTORY COMMENTS:
  1) change(87-06-26,Huen), approve(87-06-26,MCR7712), audit(87-12-01,RWaters),
     install(87-12-01,MR12.2-1005):
     Fix bug2174
                                                   END HISTORY COMMENTS */


/* This procedure is called to assign storage to all blocks

   Revised Version: 15 April 1971 by BLW
	Modified: 22 January 1973 by BLW for controlled storage
	Modified:	18 April 1975 by RHS for options(constant)
	Modified:	5 June 1975 by EEW for separate_static
	Modified:	19 June 1975 by RAB for listing label arrays
	Modified:	24 November 1975 by RAB to fix 1439
	Modified:	31 March 1976 by RAB to fix 1481,
		introduced by fix of 1439
	Modified:	21 October 1976 by RAB to improve conversion of static
		to constant
	Modified:	5 April 1978 by RAB to detect infinite loop while finding level of quick block
	Modified: 23 April 1979 by PCK to implement 4-bit decimal.
          Modified: 18 June 1987 by RW to fix 2174 by checking segment size when
		static storage is allocated.
*/

assign_storage: proc(pt) ;

dcl	pt ptr;		/* points at a block node */

dcl	(cg_static_$cur_block,cg_static_$format_list,cg_static_$temporary_list,
	cg_static_$stat_base,cg_static_$text_base,cg_static_$link_base,cg_static_$constant_list,
	cg_static_$label_list,cg_static_$last_label) ptr ext,
	(cg_static_$separate_static,cg_static_$generate_symtab,cg_static_$table_option) bit(1) ext,
	(cg_static_$text_pos,cg_static_$stat_pos,cg_static_$link_pos,
	 cg_static_$cur_level,cg_static_$max_stack_size, cg_static_$max_program_size) fixed bin(17) ext;

dcl	(block_pt,blk_pt,sym_pt,ref_pt,bp,p,q,q1,static_base,pos_pt) ptr,
	(auto_ctr,loc,cfo,c,r,t,n,units,a_units,datum_size,bit_length,increment) fixed bin(17),
	err_no fixed bin,
	(not_set,no_runtime_symbol) bit(1) aligned,
	cptr(3) ptr based,
	static_pos fixed bin(17) based,
	error entry(fixed bin,ptr,ptr),
	cg_error entry(fixed bin,fixed bin),
	assign_storage entry(ptr),
	initialize_int_static entry(ptr,ptr),
	create_list entry(fixed bin) returns(ptr);

dcl	(addrel,divide,fixed,max,mod,null) builtin;

dcl	fo_mult(0:5) fixed bin(17,1) int static init(0,1,4.5,9,18,0),
	bits_per_char fixed bin int static init(9),
	param_array fixed bin int static init(64);

dcl	fix_bin fixed bin based,
	buffer(datum_size) fixed bin based;

%include pl1_tree_areas;
%include nodes;
%include block;
%include statement;
%include symbol;
%include label;
%include array;
%include reference;
%include list;
%include block_types;
%include boundary;
%include system;
%include declare_type;

	block_pt, blk_pt = pt;

	if cg_static_$separate_static
	then do;
	     static_base = cg_static_$stat_base;
	     pos_pt = addr(cg_static_$stat_pos);
	     end;
	else do;
	     static_base = cg_static_$link_base;
	     pos_pt = addr(cg_static_$link_pos);
	     end;

again:	if block_pt = null then return;
	cg_static_$cur_block = block_pt;

	no_runtime_symbol = ^ (cg_static_$table_option | cg_static_$generate_symtab);

	if block_pt -> block.no_stack
	then do;

	     /* get ptr to block owning this quick block */

	     do while(blk_pt -> block.no_stack);
		if blk_pt -> block.owner = null then blk_pt = blk_pt -> block.father;
		else blk_pt = blk_pt -> block.owner;
		end;

	     /* the level of a quick block is that of the block in which
	        its storage is being allocated;  the level of that block,
	        if not previously set, is that of its parent + 1.
	        (Iterate, if necessary.) */

	     increment = 0;
	     bp = blk_pt;
	     do while(bp -> block.level = 0);
		bp -> block.last_auto_loc = max(param_array,bp -> block.last_auto_loc);
		increment = increment + 1;
		bp = bp -> block.father;

		do while(bp -> block.no_stack);
		     if bp = block_pt	/* without this test, the compiler could loop if this were true */
		     then do;

			/* we have a loop in owner-father chain, so block_pt is unreachable */

			call error(267,null,(bp -> block.main -> statement.labels -> element(2)));
			bp -> block.why_nonquick.never_referenced = "1"b;
			bp -> block.no_stack = "0"b;
			blk_pt = block_pt;
			go to again;
			end;

		     if bp -> block.owner = null
			then bp = bp -> block.father;
			else bp = bp -> block.owner;
		     end;

		end;

	     cg_static_$cur_level = bp -> block.level + increment;

	     /* assign space for no_stack block in the ancestor block,
	        reserving space for entry & return info if needed */

	     auto_ctr = blk_pt -> block.last_auto_loc;
	     if block_pt -> block.block_type ^= begin_block
	     then do;
		auto_ctr = auto_ctr + mod(auto_ctr,2);	/* make even */
		block_pt -> block.entry_info = auto_ctr;
		auto_ctr = auto_ctr + 6;

		if auto_ctr > cg_static_$max_stack_size
		then call cg_error(308,cg_static_$max_stack_size);
		end;

	     end;
	else do;
	     cg_static_$cur_level = blk_pt -> block.father -> block.level + 1;
	     auto_ctr = max(param_array,blk_pt -> block.last_auto_loc);
	     end;

	block_pt -> block.level = cg_static_$cur_level;

	sym_pt = block_pt -> block.declaration;

	do while(sym_pt ^= null);

	     if sym_pt -> node.type = label_node
	     then do;

		if sym_pt -> label.array
		then do;
		     sym_pt -> label.location = cg_static_$text_pos;
		     cg_static_$text_pos = cg_static_$text_pos + (sym_pt -> label.high_bound -
		      sym_pt -> label.low_bound + 1);
		     sym_pt -> label.allocated = "1"b;

		     p = create_list(2);
		     p -> list.element(2) = sym_pt;
		     if cg_static_$last_label ^= null
			then cg_static_$last_label -> list.element(1) = p;
			else cg_static_$label_list = p;
		     cg_static_$last_label = p;
		     end;

		goto loop;
		end;

	     /* if we have a format, put it on a list for later processing */

	     if sym_pt -> symbol.format & sym_pt -> symbol.constant
	     then do;
		p = create_list(2);
		p -> list.element(2) = sym_pt;
		p -> list.element(1) = cg_static_$format_list;
		cg_static_$format_list = p;
		goto loop;
		end;

	     if sym_pt -> symbol.varying then goto no;

	     if sym_pt -> symbol.packed then goto contig;

	     if ^ sym_pt -> symbol.bit
	     then if ^ sym_pt -> symbol.char
		then goto no;

	     /* The following section sets the contiguous bit ON if a reference
	        to the datum never overlaps a word boundary;  the algorithm is
	        due to Jim Gimpel and is described in MSPM BN.9.01 */

contig:	     if sym_pt -> symbol.dcl_size ^= null then goto no;

	     q = sym_pt -> symbol.array;
	     if q = null then bit_length = sym_pt -> symbol.c_bit_size;
	     else bit_length = q -> array.c_element_size_bits;

	     if bit_length = 0 then goto no;

	     if bit_length = 1 then goto yes;

	     if sym_pt -> symbol.char
	     then if bit_length = bits_per_char
		then goto yes;

	     ref_pt = sym_pt -> symbol.reference;
	     units = ref_pt -> reference.units;

	     if ref_pt -> reference.offset ^= null
	     then if units < word_ then goto no;

	     cfo = mod(ref_pt -> reference.c_offset * fo_mult(units),bits_per_word);

	     if q = null
	     then if cfo + bit_length <= bits_per_word
		then goto yes; else goto no;

	     if q -> virtual_origin ^= null then goto no;

	     a_units = q -> array.offset_units;
	     n = mod(q -> c_virtual_origin * fo_mult(a_units),bits_per_word);

	     c = cfo - n;
	     r = 36;
	     q = q -> array.bounds;

	     do while(q ^= null);
		n = q -> c_multiplier;
		if n = 0 then goto no;

		n = mod(n * fo_mult(a_units),bits_per_word);
gcd:		t = mod(n,r);

		if t ^= 0
		then do;
		     n = r;
		     r = t;
		     goto gcd;
		     end;

		q = q -> bound.next;
		end;

	     if bit_length + mod(c,r) <= r then  
yes:	     sym_pt -> symbol.contiguous = "1"b;

no:	     if ^ sym_pt -> symbol.allocate & no_runtime_symbol then goto loop;
	     if sym_pt -> symbol.father ^= null then goto loop;

	     cg_static_$generate_symtab = cg_static_$generate_symtab | sym_pt -> symbol.put_in_symtab;

	     /* have a symbol that has to be allocated, check for referenced
	        but not set */

	     not_set = "0"b;
	     if ^ sym_pt -> symbol.allocate then goto disp;
	     if block_pt -> block.get_data then goto disp;
	     if sym_pt -> symbol.dcl_type = by_compiler then goto disp;
	     if sym_pt -> symbol.aliasable then goto disp;
	     if sym_pt -> symbol.area then goto disp;

	     /* following eliminates error 307 for
		dcl a based(p);
	        where "p" is never references in program */

	     if (sym_pt -> symbol.ptr | sym_pt -> symbol.offset)
	     then if sym_pt -> symbol.put_in_symtab
		then goto disp;

	     not_set = ^ (sym_pt -> symbol.set | sym_pt -> symbol.passed_as_arg);

	     /* the only storage classes we handle are auto and int static */

disp:	     if sym_pt -> symbol.auto
	     then do;
		if ^ sym_pt -> symbol.structure & not_set
		then call error(307,null,sym_pt);

		call assign_datum(sym_pt,auto_ctr);

		if auto_ctr > cg_static_$max_stack_size
		then call cg_error(308,cg_static_$max_stack_size);

                    if cg_static_$text_pos > cg_static_$max_program_size
                    then call cg_error(311,cg_static_$max_stack_size);

		goto fl;
		end;

	     if sym_pt->symbol.controlled & ^sym_pt->symbol.arg_descriptor
	     then do;
		if sym_pt->symbol.internal
		then do;
		     sym_pt->symbol.allocated = "1"b;
		     if not_set & ^sym_pt->symbol.structure & sym_pt->symbol.initial = null
			then call error(307,null,sym_pt);
		     loc = pos_pt -> static_pos;
		     loc = loc + mod(loc,2);
		     pos_pt -> static_pos = loc + 6;
		     sym_pt->symbol.location = loc;
		     q = addrel(static_base,loc);
		     q->cptr(1) = null;
		     q->cptr(2) = null;
		     q->cptr(3) = null;
		     end;

flc:		q = sym_pt->symbol.descriptor->reference.symbol;
		if q->symbol.controlled
		then do;
			if sym_pt->symbol.external
			then do;
				q->symbol.external = "1"b;
				q->symbol.internal = "0"b;
			     end;
			else do;
				q->symbol.location = loc + 2;
				q->symbol.allocated = "1"b;
			     end;
		     end;
		go to fl;
		end;

	     if sym_pt -> symbol.file
	     then if sym_pt -> symbol.constant
		then if sym_pt -> symbol.internal
		     then goto int_stat;

	     if sym_pt -> symbol.static
	     then do;

		if ^ sym_pt -> symbol.internal then goto fl;

int_stat:		datum_size = sym_pt -> symbol.c_word_size;

		if not_set | sym_pt -> symbol.alloc_in_text
		then do;

		     if ^ sym_pt -> symbol.structure & sym_pt -> symbol.initial = null
		     then do;
			if sym_pt -> symbol.alloc_in_text
			then do;
			     call error(482,null,sym_pt);
			     sym_pt->alloc_in_text = "0"b;
			     goto int_stat;
			     end;

		          else call error(307,null,sym_pt);

		          sym_pt -> symbol.allocated = "1"b;
		          goto fl;
		          end;

		     if sym_pt -> symbol.son ^= null then goto tx;

		     /* turn into a constant */

		     sym_pt -> symbol.multi_use = cg_static_$constant_list;
		     cg_static_$constant_list = sym_pt;

		     if datum_size > 1
		     then do;
			allocate buffer in(tree_area) set(q);
			goto ci;
			end;

		     n = 0;
		     call initialize_int_static(sym_pt,addr(n));

		     p = sym_pt -> symbol.multi_use;
		     do while(p ^= null);
			q = p -> symbol.initial;

			if datum_size <= p -> symbol.c_word_size
			then if q -> fix_bin = n
			     then do;
				if p -> symbol.equivalence = null
				     then sym_pt -> symbol.equivalence = p;
				     else sym_pt -> symbol.equivalence = p -> symbol.equivalence;

				if p -> symbol.allocated
				then do;
				     sym_pt -> symbol.location = p -> symbol.location;
				     sym_pt -> symbol.allocated = "1"b;
				     end;
				else if no_runtime_symbol
				     then sym_pt -> symbol.allocate = "0"b;
				     else sym_pt->symbol.equivalence -> symbol.allocate = "1"b;

				goto si;
				end;

			p = p -> symbol.multi_use;
			end;

		     /* there was no existing constant with this value as a prefix */

		     allocate fix_bin in(tree_area) set(q);
		     q -> fix_bin = n;

		     goto si;

		     /* assign to text section */

tx:		     loc = cg_static_$text_pos;
		     if sym_pt -> symbol.boundary = mod2_ | datum_size = 2
		     then loc = loc + mod(loc,2);

		     cg_static_$text_pos = loc + datum_size;

		     sym_pt -> symbol.location = loc;
		     sym_pt -> symbol.allocated = "1"b;

		     q = addrel(cg_static_$text_base,loc);

ci:		     call initialize_int_static(sym_pt,q);

si:		     sym_pt -> symbol.initial = q;
		     sym_pt -> symbol.constant = "1"b;
		     sym_pt -> symbol.static = "0"b;

		     goto fl;
		     end;

		call assign_datum(sym_pt,pos_pt->static_pos);

		if sym_pt -> symbol.initial ^= null | sym_pt -> symbol.area
		then call initialize_int_static(sym_pt,addrel(static_base,loc));

fl:		q = sym_pt -> symbol.son;
		if q ^= null then call fill_loc(q);

		end;

loop:	     sym_pt = sym_pt -> symbol.next;
	     end;

	/* finished with user storage, now do temps */

	if block_pt -> block.block_type ^= root_block then goto done;

	sym_pt = cg_static_$temporary_list;
	do while(sym_pt ^= null);

	     if sym_pt -> symbol.allocate
	     then call assign_datum(sym_pt,auto_ctr);

	     sym_pt = sym_pt -> symbol.next;
	     end;

done:	blk_pt -> block.last_auto_loc = auto_ctr;

	p = block_pt -> block.son;
	if p ^= null then call assign_storage(p);

	blk_pt, block_pt = block_pt -> block.brother;
	goto again;

assign_datum:  proc(s,ctr);

dcl	     s ptr,
	     ctr fixed bin(17);

dcl	     (amt,k) fixed bin(17),
	     my_s ptr;

	     my_s = s;

	     amt = my_s -> symbol.c_word_size;
	     if my_s -> symbol.boundary = mod2_ | amt = 2
	     then ctr = ctr + mod(ctr,2);

	     loc = ctr;
	     ctr = ctr + amt;

	     my_s -> symbol.location = loc;
	     my_s -> symbol.allocated = "1"b;

	     end;

fill_loc:	     proc(s);

dcl	     s ptr;

dcl	     (p,q,p1) ptr;

	     p = s;
repeat:	     if p = null then return;

	     p -> symbol.location = loc;
	     p -> symbol.allocated = "1"b;

	     /* if father is external, set son external also */

	     if p -> symbol.father -> symbol.external
	     then do;
		p -> symbol.internal = "0"b;
		p -> symbol.external = "1"b;
		goto do_son;
		end;

	     if p -> symbol.cross_references = null then goto l1;
	     if cg_static_$generate_symtab then goto l1;
	     if p -> symbol.aliasable then goto l1;
	     if p -> symbol.dcl_type = by_compiler then goto l1;
	     if p -> symbol.set then goto l1;
	     if p -> symbol.passed_as_arg then goto l1;
	     if p -> symbol.structure then goto l1;

	     if p -> symbol.auto
	     then do;
		call error(307,null,p);
		goto l1;
		end;

	     if (p->symbol.static|p->symbol.controlled) & p->symbol.internal
	     then if p -> symbol.initial = null
		then call error(307,null,p);

	     /* check for switch into text segment */

l1:	     if p -> symbol.father -> symbol.constant
	     then do;
		p -> symbol.constant = "1"b;
		p -> symbol.static, p -> symbol.auto = "0"b;
		p1 = cg_static_$text_base;
		end;
	     else p1 = static_base;

	     p1 = addrel(p1,loc);

	     if p -> symbol.static | p -> symbol.constant
	     then if p -> symbol.initial ^= null | p -> symbol.area
		then call initialize_int_static(p,p1);

	     if p -> symbol.constant then p -> symbol.initial = p1;

do_son:	     q = p -> symbol.son;
	     if q ^= null then call fill_loc(q);

	     p = p -> symbol.brother;
	     goto repeat;
	     end;

	end;
