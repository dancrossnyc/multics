/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to generate instructions to load a value

   Initial Version: 23 September 1971 by BLW
	Modified:  5 November 1972 by BLW
	Modified:	15 February 1973 by RAB
	Modified:	22 June 1973 by RAB for EIS
	Modified:	15 June 1976 by RAB to fix 1502
	Modified:	19 March 1977 by RAB for aq_man$left_shift
	Modified: 16 July 1978 by PCK for unsigned binary
	Modified:	9 December 1978 by RAB to fix 1803 (faults on get list(picture);)
	Modified:	17 July 1979 by RAB to check for load(decimal_value,...).
*/

load:	proc(pt,control);

dcl	pt ptr,		/* points at reference node */
	control fixed bin;	/* non-zero if negative should be loaded */

dcl	(p,q) ptr,
	(i,n,type,size,d,dt,k,aq_length,units,cfo) fixed bin,
	offset fixed bin(8),
	(mac,macro,shift) fixed bin(15),
	mask bit(72) aligned,
	(fs,ft,arith,available) bit(1) aligned,
	for_save bit(1) aligned init("0"b),
	cg_stat$cur_statement ptr ext static,
	error entry(fixed bin,ptr,ptr),
	c_a entry(fixed bin,fixed bin) returns(ptr),
	generate_constant entry(bit(*) aligned,fixed bin) returns(ptr),
	stack_temp$free_temp entry(ptr),
	(long_op,long_op$c_or_b) entry(ptr,fixed bin,fixed bin(15)),
	(xr_man$load_var,adjust_ref_count) entry(ptr,fixed bin),
	xr_man$load_const entry(fixed bin,fixed bin),
	aq_man$trim_aq entry(fixed bin),
	aq_man$left_shift entry(fixed bin(8),bit(1) aligned),
	save_value entry(ptr),
	make_n_addressable entry(ptr,fixed bin),
	get_reference entry() returns(ptr),
	state_man$erase_reg entry(bit(19) aligned),
	expmac$two_eis entry(fixed bin(15),ptr,ptr),
	expmac$one entry(fixed bin(15),ptr,fixed bin),
	expmac$zero entry(fixed bin(15)),
	expmac entry(fixed bin(15),ptr);

dcl	(addr,bit,fixed,mod,null,substr) builtin;

dcl (	ldfx1		init(7),
	ldfx2		init(8),
	negate_op(4)	init(255,38,39,39),
	testfx1		init(508),
	test_lda		init(332),
	cana		init(323),
	lda		init(1),
	als		init(134),
	lls		init(63),
	anaq		init(42),
	lrl		init(62),
	lrs		init(492),
	unpack_fl1	init(486),
	unpack_cfl1	init(488),
	clear_aq		init(58),
	move_cs_load_1	init(100),
	set_chars		init(436),
	load_logical	init(380)) fixed bin(15) int static;

dcl	operator_table	init(262046) fixed bin(18) int static;	/* = 262144 - 98 */

%include cgsystem;
%include cg_reference;
%include data_types;
%include machine_state;
%include boundary;
%include symbol;

	p = pt;

begin:	available, fs, ft = "0"b;

	type = p -> reference.data_type;

l4:	if type = unpacked_ptr
	then do;
	     type = real_fix_bin_2;
	     goto chk;
	     end;

	if type = packed_ptr
	then do;
	     mac = lrl;
	     type = real_fix_bin_1;
	     goto chk;
	     end;

	if type >= char_string
	then do;
	     arith = "0"b;
	     goto string_;
	     end;

	if type >= real_fix_dec
	then do;
	     call error(374,cg_stat$cur_statement,p);
	     return;
	     end;

	mac = lrs;
	if p -> reference.symbol ^= null
	then if p -> reference.symbol -> symbol.unsigned
	     then mac = lrl;

chk:	arith = "1"b;

	if control ^= 0
	then do;
	     n = 3;
	     if p -> reference.value_in.q
	     then if type >= real_fix_bin_2 | (p -> reference.temp_ref & ^ p -> reference.value_in.storage)
		then do;
		     call adjust_ref_count(p,-1);
		     call expmac$zero((negate_op(type)));
		     return;
		     end;
	     end;
	else do;
	     n = -1;

	     if p -> reference.value_in.q
	     then do;
		if ft
		then if machine_state.indicators ^= 2
		     then if (p -> reference.temp_ref & ^ p -> reference.value_in.storage) | ^ p -> reference.aligned_ref
			then do;
			     call expmac$zero(testfx1 + type - 1);
			     machine_state.indicators = 2;
			     end;
			else go to l1;

drop:		if ^ p -> reference.shared
		     then call adjust_ref_count(p,-1);

		if ^ p -> reference.long_ref
		     then call sv_value;

		return;
		end;
	     end;

l1:	if ^ p -> reference.aligned_ref
	then do;
	     size = p -> reference.c_length;
	     type = bit_string;
	     if fs then goto l2; else goto str1;
	     end;

	if type = complex_flt_bin_1 then macro = ldfx2;
	else macro = ldfx1 + n + type;

	call expmac(macro,p);

thru:	call sv_value;

	if control = 0
	then do;
	     q_reg.variable(1) = p;
	     q_reg.number = 1;
	     machine_state.indicators = 2;
	     p -> reference.value_in.q = "1"b;
	     end;

	return;

	/* we have a bit or character string to be loaded */

string_:	if p -> reference.long_ref
	then do;

lg:	     if p -> reference.value_in.string_aq
		then goto drop;

	     call long_op$c_or_b(p,0,(set_chars));

	     string_reg.variable = p;
	     string_reg.size = p -> reference.c_length;

	     p -> reference.value_in.string_aq = "1"b;
	     return;
	     end;

	size = p -> reference.c_length * convert_size(type);

	if size = 0
	then do;
caq:	     call expmac$zero((clear_aq));
	     goto l72;
	     end;

l2:	if p -> reference.value_in.a
	then do;
	     if ft
	     then if machine_state.indicators ^= 1
		then goto str1;

	     if a_reg.size < size then goto str1;

	     call adjust_ref_count(p,-1);

	     offset = a_reg.offset;
	     if offset ^= 0
	     then do;
		aq_length, k = offset + size;

		if size ^= a_reg.size
		     then a_reg.length = k;
		     else k, aq_length = a_reg.length;
		goto sh;
		end;

	     if mod(a_reg.length,bits_per_word) ^= 0 & ^ fs then goto mask_it;

	     if a_reg.size = size
	     then do;
		if mod(a_reg.length,bits_per_word) = 0
		     then call sv_value;
		return;
		end;

	     goto mask_it;
	     end;

	/* the following section handles the case which arises from
		unspec(fixed(float_var))
	   where the value we want can be in the q register */

	if p -> reference.value_in.q
	then do;
slide:	     units = p -> reference.units;
	     if units = word_ then cfo = 0;
	     else do;
		cfo = mod(p -> reference.c_offset * convert_offset(units),
		 bits_per_word);
		if cfo < 0 then cfo = cfo + bits_per_word;
		end;

	     call adjust_ref_count(p,-1);

	     /* this operation effectively erases both a and q
	        since the shift moves the value from q to a
	        rather than simply changing a_reg.offset */

	     call state_man$erase_reg("11"b);	/* fixes bug 1502 */

	     call expmac((lls),c_a((cfo + bits_per_word),1));

	     k, aq_length = size;

	     if fs then goto done; else goto l5;
	     end;

str1:	if size > bits_per_word then d = fixed(control ^= 0,1); else d = 0;

	aq_length = bits_per_word*(d + 1);

	if p -> reference.aligned_ref
	then do;
	     if ft then macro = test_lda; else macro = lda;
	     call expmac$one(macro,p,d);
	     goto done;
	     end;

	call setup;

sh:	if offset > 0
	then do;
	     call aq_man$left_shift(offset, k > bits_per_word);
	     k, aq_length = a_reg.length;
	     end;
	else if p -> reference.padded_ref then goto done;

l5:	if mod(k,bits_per_word) ^= 0
	then do;
mask_it:	     call aq_man$trim_aq(size);
l72:	     aq_length = bits_per_two_words;
	     end;

done:	if arith & ^ fs
	then do;

	     type = p -> reference.data_type;

	     if type <= real_fix_bin_2 | type = packed_ptr
	     then do;
		k = bits_per_two_words - size;
em:		call expmac(mac,c_a(k,1));
		goto thru;
		end;

	     if type <= real_flt_bin_2
	     then do;
		call expmac$zero(unpack_fl1 - real_flt_bin_1 + type);
		goto thru;
		end;

	     if type = complex_flt_bin_1
	     then do;
		k = bits_per_word - divide(size,2,17,0);
		if k > 0
		then do;
		     mac = unpack_cfl1;
		     goto em;
		     end;
		end;

	     goto thru;
	     end;

	a_reg.length = aq_length;
	a_reg.offset = 0;

done1:	a_reg.size = size;

	if a_reg.offset = 0
	then call sv_value;

	a_reg.number = 1;
	a_reg.variable(1) = p;
	p -> reference.value_in.a = "1"b;

	if fs
	then if ^ p -> reference.aligned_ref
	     then if a_reg.offset ^= 0 | mod(a_reg.length,bits_per_word) ^= 0
		then machine_state.indicators = 0;

back:	return;

load$for_test: entry(pt,control);

	/* this entry is called to load a bit string whose value
	   is to be tested against zero */

	p = pt;

	if ^ p -> reference.aligned_ref
	then if p -> reference.ref_count > 1
		then goto begin;

	ft = "1"b;
	arith, fs, available = "0"b;

	type = p -> reference.data_type;

	if p -> reference.ref_count > 1 then goto l4;

	if type ^= bit_string then goto l4;

	if p -> reference.value_in.a
	then do;
	     if machine_state.indicators = 1
	     then if a_reg.offset = 0
		then if mod(a_reg.length,bits_per_word) = 0
		      then goto drop;

	     call adjust_ref_count(p,-1);
	     available = "1"b;
	     end;

	size = p -> reference.c_length;

	if p -> reference.aligned_ref & ^ available
	then do;
	     call expmac$one((test_lda),p,control);
	     a_reg.offset = 0;
	     a_reg.length = fixed(size > bits_per_word,1) * bits_per_word + bits_per_word;
	     goto done1;
	     end;

	call setup;

	mask = (72)"0"b;
	substr(mask,cfo+1,size) = (72)"1"b;

	q = generate_constant(mask,d+1);

	call expmac(cana+d,q);

	if available then return;

done2:	a_reg.offset = cfo;
	a_reg.length = k;
	goto done1;

load$for_store: entry(pt,control);

	/* this entry is called to load a value which will be stored elsewhere */

	p = pt;

	if ^ p -> reference.aligned_ref
	then if p -> reference.ref_count > 1
	     then goto begin;

	fs = "1"b;
	arith, available, ft = "0"b;

	type = p -> reference.data_type;

	if type ^= char_string
	then if type ^= bit_string
	     then goto l4;

	if p -> reference.long_ref then goto lg;

	size = p -> reference.c_length * convert_size(type);

	if p -> reference.value_in.a
	     then if a_reg.size >= size
		then goto drop;
		else;
	     else if p -> reference.value_in.q
		then goto slide;

	if size = 0 then goto caq;

	if p -> reference.aligned_ref then goto str1;

	call setup;

	goto done2;

load$short_string: entry(pt,control);

	/* this procedure is called to load the first word or two
	   of a long string */

	fs = "1"b;
	arith, available, ft = "0"b;

	p = pt;
	type = p -> reference.data_type;

	size = bits_per_word*(control+1);
	goto l2;

load$long_string: entry(pt);

	/* this entry is called to load the long string register
	   with a short string */

	p = pt;
	type = p -> reference.data_type;
	goto lg;

load$for_save:	entry(pt,control);

	/* called by compile_exp$save when it has a hard_to_load string that wants to be
	   converted to an aligned temporary in storage and does not need to be loaded */

	p = pt;
	for_save = "1"b;
	go to begin;

sv_value:	     proc;

	     if ^ p -> reference.aligned_ref
	     then if p -> reference.ref_count > 0
		then call save_value(p);

	     end;

setup:	     proc;

	     dcl (p1,p2) ptr;

	     units = p -> reference.units;
	     if available
	     then cfo, offset = a_reg.offset;
	     else if units = word_
		then cfo, offset = 0;
		else do;
		     cfo = mod(p -> reference.c_offset * convert_offset(units),bits_per_word);
		     if cfo < 0 then cfo = cfo + bits_per_word;

		     if ^ p -> reference.hard_to_load
			then offset = cfo;
			else offset = 0;
		     end;

	     k = size + offset;

	     d = fixed(k > bits_per_word,1);

	     if available then return;

	/* if reference is hard to load we will move it into an aligned padded temporary
	   and load it from there */

	     if p -> reference.hard_to_load
	     then do;
		if (^ arith | mod(size,bits_per_word) = 0) & (p -> reference.ref_count > 1 | for_save)
		   & ^ p -> reference.aggregate
		then do;

		     /* We have a string with a high reference count, we will want future
		        reference to the string to be made to the temporary we are using
		        for the load */

		     call make_n_addressable(addr(pt),1);	/* make addressable and lock regs */

		     p2 = get_reference();		/* We will copy address into place holder */

		     p2 -> reference = p -> reference;
		     p2 -> reference.qualifier, p2 -> reference.offset, p2 -> reference.length = null;
		     string(p2 -> reference.info) = "0"b;
		     p2 -> reference.perm_address = "1"b;

		     call save_value(p);		/* convert to temporary */

		     p -> reference.value_in.storage = "1"b;
		     p1 = p;
		     end;

		else do;

		     /* Use double_temp as place to move */

		     p1 = c_a(46,4);
		     p2 = p;
		     end;

		dt = type - char_string;

		call expmac$two_eis(move_cs_load_1 + 2*d + dt,p1,p2);

		if for_save then go to back;

		call expmac$one((lda),p1,d);
		aq_length = bits_per_word * (d + 1);
		go to done;
		end;


	     call expmac$one((lda),p,d);

	     a_reg.size = size;
	     a_reg.offset = cfo;
	     a_reg.length = k;

	     end;

	end;
