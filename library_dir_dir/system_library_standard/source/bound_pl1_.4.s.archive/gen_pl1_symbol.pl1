/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Program to create symbol table for Version II PL/I

   Initial Version: 11 September 1972 by BLW
	Modified: 22 January 1972 by BLW
	Modified:	18 July 1975 by RAB for link_head.static_length
	Modified:	1 Dec 1976 by RAB for -long_profile
	Modified: 27 October 1980 by M. N. Davidoff to increase length of pl1_stat_$options.

	This entry initializes the symbol table header
*/
/* format: style3 */
gen_pl1_symbol$beg_symbol:
     proc;

dcl	cg_static_$version_name
			char (132) varying ext,
	cg_static_$seg_name char (32) varying ext,
	cg_static_$compiler_name
			char (12) varying ext;
dcl	pl1_stat_$options	char (400) varying ext;
dcl	pl1_stat_$user_id	char (32) aligned ext,
	cg_static_$last_def bit (18) ext,
	(
	cg_static_$text_reloc_base,
	cg_static_$link_base,
	cg_static_$def_base,
	cg_static_$link_reloc_base,
	cg_static_$sym_base,
	cg_static_$sym_reloc_base,
	cg_static_$def_reloc_base
	)		ptr ext,
	(
	cg_static_$text_pos,
	cg_static_$link_pos,
	cg_static_$def_pos,
	cg_static_$link_begin,
	cg_static_$version_number,
	cg_static_$sym_pos,
	cg_static_$profile_pos,
	pl1_stat_$greatest_severity,
	cg_static_$stat_pos,
	cg_static_$profile_start
	)		fixed bin (18) ext,
	cg_static_$clock_time
			fixed bin (71) ext static,
	(
	cg_static_$generate_symtab,
	cg_static_$table_option,
	cg_static_$separate_static,
	cg_static_$io_used,
	cg_static_$profile_option,
	cg_static_$generate_map,
	cg_static_$long_profile
	)		bit (1) ext static,
	code_gen_$symbol_table
			fixed bin (15) external static;

dcl	1 cg_static_$statement_map
			ext unaligned,
	  2 first		bit (18),
	  2 last		bit (18);

dcl	(p, sym_reloc_ptr, map_ptr, link_base, link_reloc_base, sym_base, sym_ptr)
			ptr,
	info_ptr		ptr int static,
	(link_pos, sym_pos) fixed bin (18),
	(i, j, k, l, n)	fixed bin (15),
	sym_rel_bit_count	fixed bin (27),
	b18		bit (18) aligned;

dcl	error		entry (fixed bin, ptr, ptr);

dcl	(addr, addrel, bit, divide, fixed, index, length, mod, null, size, string, substr)
			builtin;

dcl	max_link_size	init (16384) fixed bin int static;

dcl	1 link_head	aligned based (p),
	  2 word_zero	unaligned bit (36),
	  2 word_one,
	    3 def_base	unaligned bit (18),
	    3 rh		unaligned bit (18),
	  2 word_two	unaligned bit (36),
	  2 word_three	unaligned bit (36),
	  2 word_four	unaligned bit (36),
	  2 word_five	unaligned bit (36),
	  2 word_six,
	    3 first_link	unaligned bit (18),
	    3 block_length	unaligned bit (18),
	  2 word_seven,
	    3 skip	unal bit (18),
	    3 static_length unaligned bit (18);

dcl	reloc		(0:1) bit (36) aligned based;

dcl	1 relinfo		aligned based,
	  2 version	fixed bin,
	  2 rel_bit_count	fixed bin,
	  2 relbits	bit (i refer (rel_bit_count)) unaligned;

dcl	1 reloc_in	aligned based (p),
	  2 half_word	(0:1000) unaligned bit (18);

%include definition;
%include relbts;
%include std_symbol_header;
%include source_map;
%include source_list;
%include pl1_symbol_block;

/* Generate the symbol table header.  Ref. MSB-27 */

	sym_ptr = cg_static_$sym_base;
	cg_static_$sym_pos = size (sym_ptr -> std_symbol_header);

	sym_ptr -> std_symbol_header.dcl_version = 1;
	sym_ptr -> std_symbol_header.identifier = "symbtree";
	sym_ptr -> std_symbol_header.gen_number = cg_static_$version_number;
	sym_ptr -> std_symbol_header.gen_created = addr (code_gen_$symbol_table) -> std_symbol_header.object_created;
	sym_ptr -> std_symbol_header.object_created = cg_static_$clock_time;
	sym_ptr -> std_symbol_header.generator = cg_static_$compiler_name;
	string (sym_ptr -> std_symbol_header.gen_version) = store_string ((cg_static_$version_name));

	m = index (pl1_stat_$user_id, " ") - 1;
	if m < 0
	then m = length (pl1_stat_$user_id);
	string (sym_ptr -> std_symbol_header.userid) = store_string (substr (pl1_stat_$user_id, 1, m));

	string (sym_ptr -> std_symbol_header.comment) = store_string ((pl1_stat_$options));
	sym_ptr -> std_symbol_header.text_boundary = "000000000000000010"b;
	sym_ptr -> std_symbol_header.stat_boundary = "000000000000000010"b;

/* generate source map (which has to start on even boundary) */

	cg_static_$sym_pos = cg_static_$sym_pos + mod (cg_static_$sym_pos, 2);

	sym_ptr -> std_symbol_header.source_map = bit (cg_static_$sym_pos, 18);

	map_ptr = addrel (cg_static_$sym_base, cg_static_$sym_pos);
	map_ptr -> source_map.version = 1;
	map_ptr -> source_map.number, n = pl1_stat_$last_source + 1;

	cg_static_$sym_pos = cg_static_$sym_pos + size (map_ptr -> source_map);

	do m = 0 to pl1_stat_$last_source;
	     string (map_ptr -> source_map.map (m + 1).pathname) = store_string (source.pathname);
	     map_ptr -> source_map.map (m + 1).uid = source.uid;
	     map_ptr -> source_map.map (m + 1).dtm = source.dtm;
	end;

/* generate pl1 symbol block */

	sym_ptr -> std_symbol_header.area_pointer = bit (cg_static_$sym_pos, 18);

	info_ptr, sym_ptr = addrel (cg_static_$sym_base, cg_static_$sym_pos);
	sym_reloc_ptr = addrel (cg_static_$sym_reloc_base, cg_static_$sym_pos);

	cg_static_$sym_pos = cg_static_$sym_pos + size (sym_ptr -> pl1_symbol_block);

	sym_ptr -> pl1_symbol_block.version = 1;
	sym_ptr -> pl1_symbol_block.identifier = "pl1info";
	sym_ptr -> pl1_symbol_block.greatest_severity = pl1_stat_$greatest_severity;

	sym_ptr -> pl1_symbol_block.flags.io = cg_static_$io_used;
	sym_ptr -> pl1_symbol_block.flags.map = cg_static_$generate_map;

	string (sym_ptr -> pl1_symbol_block.segname) = store_string ((cg_static_$seg_name));

	if cg_static_$generate_symtab | cg_static_$table_option
	then do;
		sym_ptr -> pl1_symbol_block.flags.table = "1"b;

		sym_ptr -> pl1_symbol_block.root = bit (cg_static_$sym_pos, 18);
	     end;

	if cg_static_$profile_option
	then do;
		sym_ptr -> pl1_symbol_block.flags.profile = "1"b;
		sym_ptr -> pl1_symbol_block.profile = bit (cg_static_$profile_pos, 18);
		sym_reloc_ptr -> pl1_symbol_block.profile = rc_is18;
	     end;

	if cg_static_$long_profile
	then do;
		sym_ptr -> pl1_symbol_block.flags.long_profile = "1"b;
		sym_ptr -> pl1_symbol_block.profile = bit (cg_static_$profile_start, 18);
		sym_reloc_ptr -> pl1_symbol_block.profile = rc_is18;
	     end;

	cg_static_$sym_base -> std_symbol_header.maxi_truncate = bit (cg_static_$sym_pos, 18);

	return;

/* This entry does the following:
		1.  Fills in the linkage section header.  Ref. MSPM BD.7.01
		2.  Fills in the rel bits for the linkage header.
		3.  Transfers and packs the relocation bits generated during compilation into
		    packed regions in the symbol segment.  Ref. MSPM BD.2.01

	Assumptions:
		1. Any field not explicity set will contain 0's.
		2. The relocation code for absolute relocation is assumed to
		   be zero;  when an 18 bit relocation code is assigned to
		   the full relocation word, absolute relocation will be set
		   for the right hand side.	*/

/* because of a glitch in the coding of the Multics checker, the word of
	   of zeros pointed at by the forward chain of the last definition has to
	   be the last word in the definition section */

gen_pl1_symbol$end_symbol:
     entry;

	addrel (cg_static_$def_base, cg_static_$last_def) -> definition.forward = bit (cg_static_$def_pos, 18);
	cg_static_$def_pos = cg_static_$def_pos + 1;

	link_pos = cg_static_$link_pos;

	if link_pos > max_link_size
	then call error (259, null, null);

	link_base = cg_static_$link_base;
	link_reloc_base = cg_static_$link_reloc_base;

	sym_base = cg_static_$sym_base;
	sym_pos = cg_static_$sym_pos;
	sym_ptr = addrel (sym_base, sym_pos);

/* Fill in linkage header information */

	link_base -> link_head.def_base = bit (cg_static_$text_pos, 18);

	link_base -> link_head.first_link = bit (cg_static_$link_begin, 18);

	link_base -> link_head.block_length = bit (cg_static_$link_pos, 18);

	if cg_static_$separate_static
	then link_base -> link_head.static_length = bit (cg_static_$stat_pos, 18);
	else link_base -> link_head.static_length = bit (fixed (cg_static_$link_begin - size (link_head), 18), 18);

/* Fill in rel bits for linkage header */

	link_reloc_base -> reloc (1) = rc_t;

/* Convert relcation bits to packed format */

	sym_base -> std_symbol_header.mini_truncate = bit (sym_pos, 18);

	l = 1;
	sym_rel_bit_count = sym_pos;

	do p = cg_static_$text_reloc_base, cg_static_$def_reloc_base, link_reloc_base, cg_static_$sym_reloc_base;

	     b18 = bit (sym_pos, 18);

	     if l = 1
	     then do;
		     m = cg_static_$text_pos;
		     sym_base -> std_symbol_header.rel_text = b18;
		end;
	     else if l = 2
	     then do;
		     m = cg_static_$def_pos;
		     sym_base -> std_symbol_header.rel_def = b18;
		end;
	     else if l = 3
	     then do;
		     m = link_pos;
		     sym_base -> std_symbol_header.rel_link = b18;
		end;
	     else if l = 4
	     then do;
		     m = sym_rel_bit_count;
		     sym_base -> std_symbol_header.rel_symbol = b18;
		end;

	     m = m * 2;

	     sym_ptr -> relinfo.version = 1;

	     i, k = 0;

	     do j = 0 to m - 1;
		b18 = p -> reloc_in.half_word (j);
		if b18
		then do;
			if k ^= 0
			then do;

/* have a string of "k" consecutive half-words with
			   absolute relocation;  use expanded absolute coding
			   if there are more than 15 half words */

				call expanded_absolute;

				k = 0;
			     end;

			substr (sym_ptr -> relbits, i + 1, 5) = substr (b18, 14, 5);
			i = i + 5;
		     end;
		else k = k + 1;
	     end;

	     if k ^= 0
	     then call expanded_absolute;

	     sym_ptr -> rel_bit_count = i;
	     l = l + 1;

	     j = size (sym_ptr -> relinfo);
	     sym_pos = sym_pos + j;
	     sym_ptr = addrel (sym_ptr, j);
	end;

	cg_static_$sym_pos = sym_pos;

	cg_static_$sym_base -> std_symbol_header.block_size = bit (sym_pos, 18);

	if cg_static_$generate_map
	then string (info_ptr -> pl1_symbol_block.map) = string (cg_static_$statement_map);

	return;

expanded_absolute:
     proc;

	if k < 16
	then i = i + k;
	else do;
		do while (k > 1023);
		     substr (sym_ptr -> relbits, i + 1, 15) = "111101111111111"b;
		     i = i + 15;
		     k = k - 1023;
		end;

		substr (sym_ptr -> relbits, i + 1, 15) = "11110"b || bit (fixed (k, 10), 10);
		i = i + 15;
	     end;
     end expanded_absolute;

store_string:
     proc (str) returns (bit (36));

dcl	str		char (*) aligned;

dcl	p		ptr,
	b36		bit (36),
	based_string	char (length (str)) based aligned;

	if length (str) = 0
	then return ((36)"0"b);

	substr (b36, 1, 18) = bit (cg_static_$sym_pos, 18);
	p = addrel (cg_static_$sym_base, cg_static_$sym_pos);
	p -> based_string = str;
	cg_static_$sym_pos = cg_static_$sym_pos + divide (length (str) + 3, 4, 17, 0);
	substr (b36, 19, 18) = bit (fixed (length (str), 18), 18);
	return (b36);
     end store_string;

     end gen_pl1_symbol$beg_symbol;
