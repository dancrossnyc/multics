/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to initialize external static storage */

initialize_ext_static: proc(pt) returns(bit(18) aligned);

dcl	pt ptr;		/* points at symbol node */

dcl	(d,sym_pt,grow_pt,init_pt) ptr,
	cptr(3) based ptr,
	(n,loc,init_val) fixed bin,
	use_pool bit(1) aligned,
	grow_info bit(18),
	error_$no_text entry(fixed bin,1,2 bit(8),2 bit(14),2 bit(5),ptr),
	initialize_int_static entry(ptr,ptr);

dcl	cg_static_$def_base ptr ext,
	cg_static_$def_pool(0:10) fixed bin(18) ext,
	cg_static_$def_pool_size fixed bin ext,
	cg_static_$def_pos fixed bin(18) ext;

dcl	(addrel,bit,divide,fixed,null) builtin;

dcl	word(0:2) fixed bin based;

%include symbol;
%include reference;
%include boundary;

	sym_pt = pt;
	loc = sym_pt -> symbol.location;

	if sym_pt -> symbol.controlled then goto even;
	if sym_pt -> symbol.boundary = mod2_
	then if ^ sym_pt -> symbol.area
	     then if sym_pt -> symbol.initial ^= null | sym_pt -> symbol.structure
		then
even:		     cg_static_$def_pos = cg_static_$def_pos + mod(cg_static_$def_pos,2);

	grow_info = bit(cg_static_$def_pos,18);
	grow_pt = addrel(cg_static_$def_base,grow_info);
	init_pt = addrel(grow_pt,2);

	if sym_pt -> symbol.controlled
	then do;
	     init_val = 3;
	     n = 6;

	     init_pt -> cptr(1) = null;
	     init_pt -> cptr(2) = null;
	     init_pt -> cptr(3) = null;

	     d = sym_pt -> symbol.descriptor -> reference.symbol;
	     if d -> symbol.controlled
	     then do;
		d -> symbol.location = loc;
		d -> symbol.allocated = "1"b;
		end;

	     call fill_cs(sym_pt -> symbol.son);
	     end;
	else do;
	     n = sym_pt -> symbol.c_word_size;

	     init_val = 0;

	     if sym_pt -> symbol.area
	     then if sym_pt -> symbol.array ^= null
		then goto init;
		else init_val = 4;
	     else do;
		if sym_pt -> symbol.initial ^= null
		then do;
init:		     call initialize_int_static(sym_pt,init_pt);
		     init_val = 3;
		     end;

		call fill_cs(sym_pt -> symbol.son);
		end;
	     end;

	use_pool = init_val = 0 & n <= cg_static_$def_pool_size;
	if use_pool
	then if cg_static_$def_pool(n) ^= 0
	     then return(bit(cg_static_$def_pool(n),18));

	grow_pt -> word(0) = n;
	grow_pt -> word(1) = init_val;

	if use_pool
	     then cg_static_$def_pool(n) = cg_static_$def_pos;

	cg_static_$def_pos = cg_static_$def_pos + 2 + fixed(init_val = 3,1)*n;

	return(grow_info);

fill_cs:	     proc(pt);

dcl	     pt ptr unaligned,
	     p ptr aligned;

	     p = pt;
	     do while(p ^= null);

		if (p -> symbol.initial ^= null | p -> symbol.area) & sym_pt -> symbol.static
		then do;
		     call initialize_int_static(p,init_pt);
		     init_val = 3;
		     end;

		p -> symbol.location = loc;

		call fill_cs(p -> symbol.son);

		p = p -> symbol.brother;
		end;

	     end;

	end;
