/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to manage aq register for pl/1

   Initial Version:  4 September 1971 by BLW for Version II
	Modified:  2 October 1972 by BLW	
	Modified:	11 June 1973 by RAB for aq_man$load_any ... 
	Modified:	19 March 1977 by RAB for aq_man$left_shift
		and aq_man$right_shift
	Modified:	4 September 1977 by RAB to fix 1666
	Modified:	10 November 1977 by RAB to prevent trimming when amt is bits_per_two_words	*/

/*	These are the meanings of some important fields in the a_reg:

	a_reg.size	the size of the datum in the register without
			pad bits

	a_reg.offset	the offset of the leftmost bit of the datum
			from the left of the register

	a_reg.length	the sum of a_reg.offset + a_reg.size + any known
			zero_bits of padding immediately to the right of
			the datum.  (Anything beyond a_reg.length in the
			register is unknown.)		*/

aq_man$pad_aq: proc(type,size);

dcl	type fixed bin,	/* bit_string or char_string */
	size fixed bin;	/* size to pad to, in bits */

dcl	(cg_stat$double_temp,cg_stat$text_base) ptr ext,
	cg_stat$text_pos fixed bin ext;

dcl	(i,j,k,n) fixed bin,
	arith bit(1),
	macro fixed bin(15),
	p ptr;

dcl	word bit(36) aligned based;

dcl	expmac entry(fixed bin(15),ptr),
	expmac$zero entry(fixed bin(15)),
	expmac$one entry(fixed bin(15),ptr,fixed bin),
	xr_man$load_const entry(fixed bin,fixed bin),
	aq_man$check_strings entry(fixed bin),
	aq_man$clear_q entry,
	c_a entry(fixed bin,fixed bin) returns(ptr),
	copy_temp entry(ptr) returns(ptr);

dcl	(abs,addrel,bit,fixed,lbound,min,null,string,substr) builtin;

dcl (	anaq		init(42),
	oraq		init(48),
	rfb1_to_rfb2	init(88),
	truncate(2)	init(520,521),
	q_left_shift(2)	init(515,63),	/* qls, lls */
	left_shift(2)	init(134,63),	/* als, lls */
	right_shift(2)	init(245,62),	/* arl, lrl */
	stfx1		init(15),
	sta		init(4)) fixed bin(15) int static options(constant);

%include cgsystem;
%include cg_reference;
%include symbol;
%include data_types;
%include machine_state;
%include bases;
%include boundary;

	if size <= a_reg.size then return;

	if a_reg.length < size
	then do;
	     call expmac((anaq),c_a((a_reg.size),5));
	     a_reg.length = bits_per_two_words;
	     end;

	if type = bit_string then a_reg.size = a_reg.length;
	else do;
	     call expmac((oraq),c_a((a_reg.size),6));
	     if size < bits_per_two_words then call expmac((anaq),c_a(size,5));
	     a_reg.size = size;
	     end;

	return;

aq_man$save_aq: entry(pt,pad);

dcl	pt ptr,		/* points at reference node of value in aq */
	pad fixed bin;	/* ^= 0 means clear_q when storing */

	p = pt;

	k = p -> reference.data_type;
	if k <= real_flt_bin_2
	then do;
	     arith = "1"b;
	     macro = stfx1 - 1 + k;
	     goto store;
	     end;

	arith = "0"b;

	if a_reg.size <= bits_per_word
	then if pad = 0 then k = 0;
	     else do;
		k = 1;
		call aq_man$clear_q;
		end;
	else do;
	     if a_reg.length < bits_per_two_words then call expmac((anaq),c_a((a_reg.size),5));
	     k = 2;
	     end;

store:	if p -> reference.temp_ref
	then do;
	     if p -> reference.shared
	     then do;
		p, pt = copy_temp(p);
		p -> reference.ref_count = 2;
		end;
	     else p -> reference.ref_count = p -> reference.ref_count + 1;

	     if arith then call expmac(macro,p); else call expmac$one((sta),p,k);
	     end;

	else do;
	     if arith
		then call expmac(macro,cg_stat$double_temp);
		else call expmac$one((sta),cg_stat$double_temp,k);

	     string(p -> reference.address) = string(cg_stat$double_temp -> reference.address);
	     p -> reference.relocation = cg_stat$double_temp -> reference.relocation;
	     p -> reference.perm_address = "1"b;
	     p -> reference.even = "1"b;
	     end;

	p -> reference.value_in.storage = "1"b;
	return;

aq_man$clear_q: entry;

	k = bits_per_word;
	goto trim;

aq_man$trim_aq: entry(n_bits);

dcl	n_bits fixed bin;

	k = n_bits;
	call aq_man$check_strings(k);

	/* check to see if last instruction was also a trimming instruction */

trim:	p = addrel(cg_stat$text_base,cg_stat$text_pos - 1);

	if (p -> word & "111000000000000000111111111111111111"b)
		   ^= "000000000000000000011111111001000000"b		/* anaq ap|0 */
	then goto gen;

	if fixed(substr(p -> word,4,15),15) <= bits_per_four_words
	then do;
	     substr(p -> word,4,15) = bit(fixed(2*k,15),15);
	     goto len;
	     end;

gen:	if k < bits_per_two_words
	     then call expmac((anaq),c_a(k,5));
	a_reg.length = bits_per_two_words;

len:	a_reg.size = k - a_reg.offset;
	return;

aq_man$check_strings: entry(n_bits);

	/* check to make sure that no bits will get lost from any string
	   currently held in a register.  If bits will be lost, value must
	   be saved if not already in storage */

	n = a_reg.number;
	do i = 1 by 1 while(i <= n);
check:	     p = a_reg.variable(i);

	     if p -> reference.data_type >= lbound(convert_size,1)
		then j = p -> reference.c_length * convert_size(p -> reference.data_type);
		else j = p -> reference.c_length;

	     if n_bits - a_reg.offset < j
	     then do;
		if ^ p -> reference.temp_ref then goto drop;
		if p -> reference.value_in.storage then goto drop;
		if p -> reference.ref_count < 1 then goto drop;

		/* have to save value */

		p -> reference.store_ins = bit(cg_stat$text_pos,18);
		p -> reference.ref_count = p -> reference.ref_count + 1;

		call expmac$one((sta),p,fixed(j > bits_per_word,1));

		p -> reference.value_in.storage = "1"b;

drop:		p -> reference.value_in.a = "0"b;

		n = n - 1;
		a_reg.number = n;
		if n < i then return;

		do j = i to n;
		     a_reg.variable(j) = a_reg.variable(j+1);
		     end;

		goto check;
		end;
	     end;

	return;


aq_man$left_shift: entry(amt,long);

dcl	amt fixed bin(8),		/* amount to shift */
	long bit(1) aligned;	/* forces long shift */

dcl	nregs fixed bin;		/* number of registers involved */
dcl	amount fixed bin;		/* amount to shift */

	amount = amt;

	if long | a_reg.size + a_reg.offset > bits_per_word
	     then nregs = 2;
	     else nregs = 1;

	call expmac(left_shift(nregs), c_a(amount,1));

	a_reg.offset = a_reg.offset - amount;
	if a_reg.length < bits_per_words(nregs)
	     then a_reg.length = a_reg.length - amount;
	     else a_reg.length = bits_per_words(nregs);

	return;


aq_man$right_shift: entry(amt,long);

	amount = amt;

	if long | a_reg.size + a_reg.offset + amount > bits_per_word
	     then nregs = 2;
	     else nregs = 1;

	call expmac(right_shift(nregs), c_a(amount,1));

	a_reg.offset = a_reg.offset + amount;
	a_reg.length = min(a_reg.length + amount, bits_per_words(nregs));
	return;


aq_man$fix_scale: entry(pt,scale1,type1);

dcl	(scale1,type1) fixed bin;
dcl	ptype fixed bin;

	ptype = pt -> reference.data_type;
	n = scale1 - pt -> reference.symbol -> symbol.scale;
	if n = 0
	then do;
	     if type1 > ptype
		then call expmac$zero((rfb1_to_rfb2));
	     return;
	     end;

	if type1 > ptype
	then do;
	     if n > bits_per_word
	     then do;
		macro = q_left_shift(2);
		goto shift;
		end;

	     call expmac((q_left_shift(2)),c_a((bits_per_word),1));
	     n = n - bits_per_word;

	     if n = 0 then return;

	     k = 2;
	     end;

	else k = ptype;

	if n < 0
	then do;
	     call xr_man$load_const(abs(n),2);
	     call expmac$zero((truncate(k)));
	     end;

	else do;
	     macro = q_left_shift(k);
shift:	     call expmac(macro,c_a(n,1));
	     end;

	return;

/* The following section is called to load string offsets and string lengths into the a or q
   for use by EIS instructions. */

/* Load variable offset or length into a or q */

aq_man$load_any_var:	entry(pt,ar,base_offset);

dcl	ar fixed bin(2),		/* specifies reg to be loaded */
	base_offset fixed bin(24);	/* base offset to add to pt */

dcl	1 machine_overlay based(m_s_p),
	2 node_type bit(9),
	2 indicators fixed bin,
	2 next,
	2 aq_regs(2) like machine_state.a_reg;

dcl	c fixed bin(24);
dcl	l fixed bin;
dcl	lock bit(1) aligned;
dcl	cg_stat$cur_statement ptr ext static;

dcl (	load_aq(2)	init(1,7),	/* lda, ldq */
	add_aq(2)		init(645,19),	/* ada, adq */
	right_shift_aq(2)	init(725,514))	/* ars, qrs */
		fixed bin(15) int static options(constant);

dcl	adjust_ref_count entry(ptr,fixed bin);
dcl	generate_constant$real_fix_bin_1 entry(fixed bin(24)) returns(ptr);
dcl	get_single_ref entry(ptr) returns(ptr);
dcl	base_man$load_any_var_and_lock entry(fixed bin,ptr,bit(3) aligned);
dcl	base_man$unlock entry (fixed bin);
dcl	xr_man$load_any_var_and_lock entry(ptr,fixed bin(3),fixed bin(18));
dcl	error entry(fixed bin,ptr,ptr);

	lock = "0"b;
	p = pt;
	c = base_offset;

search:	j = -1;
	do i = 1 to 2;
		do l = 1 to aq_regs(i).number;
		     if aq_regs(i).variable(l) = p
		     then do;
			j = i;
			if aq_regs(i).constant = c
			then do;
			     if ^ p -> reference.shared
				then call adjust_ref_count(p,-1);
			     go to return_i;
			     end;
			end;
		end;
	end;

	i = get_free_aq();
	if i ^= 0
	     then call load_aq_var;

return_i:	ar = i;
	if lock
	then do;
	     aq_regs(i).locked = "1"b;
	     aq_regs(i).number_h_o = 0;
	     end;
	return;

/* Load constant offset or length into a or q */

aq_man$load_any_const:	entry(base_offset,ar);

	lock = "0"b;
	p = generate_constant$real_fix_bin_1(base_offset);
	c = 0;
	go to search;

aq_man$lock:	entry(pt,ar);

	i = ar;

	if pt ^= null & (^ aq_regs(i).locked | aq_regs(i).number_h_o ^= 0)
	then do;
	     j, aq_regs(i).number_h_o = aq_regs(i).number_h_o + 1;
	     aq_regs(i).has_offset(j) = pt;
	     end;
	else aq_regs(i).number_h_o = 0;

	aq_regs(i).locked = "1"b;

	return;

/* Load variable offset or length into a or q and lock */

aq_man$load_any_var_and_lock:	entry(pt,ar);

	lock = "1"b;
	p = pt;
	c = 0;
	go to search;

/* Load item into specified register */

aq_man$load_var:	entry(pt,ar);

	p = pt;
	i = ar;

	if substr(string(p -> reference.value_in),i,1)
	then do;
	     if ^ p -> reference.shared
		then call adjust_ref_count(p,-1);
	     return;
	     end;

	j = -1;
	c = 0;
	call load_aq_var;
	return;

/* Find a register in which to load the reference */

get_free_aq:	proc() returns(fixed bin);

dcl	(i,k,count(2)) fixed bin;
dcl	q ptr;
dcl	base bit(3) aligned;
dcl	xr fixed bin(3);
dcl	tag bit(6) aligned;

	if aq_regs(1).locked
	then if aq_regs(2).locked
	     then do;

		do i = 1 to 2;
		if aq_regs(i).number_h_o ^= 0
		then do;
		     if aq_regs(i).constant = 0 & aq_regs(i).number ^= 0 & ^ aq_regs(i).has_offset(1) -> reference.big_offset
		     then do;
			q = aq_regs(i).variable(1);

			if ^ q -> reference.shared
			then q -> reference.ref_count = q -> reference.ref_count + 1;

			call xr_man$load_any_var_and_lock(q,xr,0);

			tag = "001"b || bit(xr,3);

			do k = 1 to aq_regs(i).number_h_o;
			aq_regs(i).has_offset(k) -> address.tag = tag;
			end;

		     end;

		     else do k = 1 to aq_regs(i).number_h_o;
			q = aq_regs(i).has_offset(k);

			if k < aq_regs(i).number_h_o | q -> reference.c_f_offset = 0
			then q -> reference.perm_address = "1"b;
			else do;
			     aq_regs(i).locked = "0"b;
			     aq_regs(i).number_h_o = 0;
			     end;


			if q -> reference.ext_base
			then if q -> address.base ^= sp
			     then call base_man$unlock(which_base(fixed(q -> address.base,3)));

			if ^q -> reference.shared
			then q -> reference.ref_count = q -> reference.ref_count + 1;

			call base_man$load_any_var_and_lock(2,q,base);

			end;

		     aq_regs(i).locked = "0"b;
		     aq_regs(i).number_h_o = 0;
		     return(i);
		     end;
		end;

		call error(329,cg_stat$cur_statement,p);
		lock = "0"b;
		return(0);
		end;
	     else return(2);
	else if aq_regs(2).locked
	     then return(1);

	if j > 0 then return(j);

	do i = 1 to 2;
	     if aq_regs(i).number = 0
		then return(i);
	end;

	do i = 1 to 2;
	     count(i) = 0;
	     do k = 1 to aq_regs(i).number;
		count(i) = count(i) + aq_regs(i).variable(k) -> reference.ref_count;
	     end;
	end;

	if count(1) < count(2)
	then return(1);
	else if count(2) < count(1)
	     then return(2);

	if aq_regs(1).changed < aq_regs(2).changed
	     then return(1);
	     else return(2);
end;


/* Load the specified register */

load_aq_var:	proc();

dcl	(cp,q) ptr;
dcl	c1 fixed bin(24);

	q = p;
	c1 = c;

	if p -> reference.data_type = real_fix_bin_2
	     then q = get_single_ref(p);

	if j = i
	then do;
	     c1 = c - aq_regs(i).constant;
	     if ^ q -> reference.shared
		then call adjust_ref_count(q,-1);
	     end;

	else do;
	     if q -> reference.temp_ref
	     then if ^ q -> reference.value_in.storage
		then if q -> reference.value_in.q
		     then call aq_man$save_aq(q,0);

	     call expmac((load_aq(i)),q);

	     if ^ q -> reference.aligned_ref
	     then if q -> reference.units = word_ & q -> reference.c_length = bits_per_half
		then call expmac(right_shift_aq(i),c_a((bits_per_half),1));
		else call error(367,cg_stat$cur_statement,q);
	     end;

	if c1 ^= 0
	then do;
	     if c1 > 0 & c1 < 262144
	     then cp = c_a((c1),2);
	     else cp = generate_constant$real_fix_bin_1(c1);
	     call expmac((add_aq(i)),cp);
	     end;

	if i = 1
	     then aq_regs(1).offset, aq_regs(1).size = 0;
	aq_regs(i).constant = c;
	aq_regs(i).number = 1;
	aq_regs(i).variable(1) = p;
	if c = 0
	     then substr(string(p -> reference.value_in),i,1) = "1"b;
end;

end;
