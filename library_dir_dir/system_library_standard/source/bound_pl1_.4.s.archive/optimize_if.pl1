/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* procedure to optimize an if statement

   Initial Version:	1 November 1975 by RAB
	Modified:	1 July 1976 by RAB for label array improvements
	Modified:	23 Jan 1977 by RAB to make recursive for combine_tests
	Modified:	9 Mar 1977 by RAB to remove some dead code
	Modified:	12 March 1977 by RAB to change handling of mod_word
	Modified:	9 April 1977 by RAB to remove mod_word	*/

/* if statements are optimized by changing boolean operations into jumps.
   Among the transformations performed are:

   jump_true(target,or_bits(a,b)) -> jump_true(target,a), jump_true(target,b)

   jump_true(target,and_bits(a,b)) -> jump_false(next,a), jump_true(target,b)

   jump_true(target,not_bits(a)) -> jump_false(target,a)

   jump_false(target,and_bits(a,b)) -> jump_false(target,a), jump_false(target,b)

   jump_false(target,or_bits(a,b)) -> jump_true(next,a), jump_false(target,b)

   jump_false(target,not_bits(a)) -> jump_true(target,a)

   These transformations are not performed if the boolean operators have already
   been evaluated or if their values are needed later on */

optimize_if:	proc(pt);

dcl	pt ptr;	/* points at statement being optimized */

dcl	(jop,lp,next,nextlab,p3,st,target,tree,next_tree) ptr;
dcl	(jump_code,op_code) bit(9) aligned;

dcl	(cg_stat$cur_block,pl1_stat_$cur_statement) ptr ext static;
dcl	cg_stat$cur_level fixed bin ext static;

dcl (	rel_op		init("00100"b),
	jump_op		init("00101"b)
			) bit(5) aligned int static;

dcl	(fixed,null,string,substr) builtin;

dcl	create_list entry(fixed bin) returns(ptr);
dcl	create_label entry(ptr,ptr,bit(3) aligned) returns(ptr);
dcl	create_operator entry(bit(9) aligned,fixed bin(15)) returns(ptr);
dcl	create_statement entry(bit(9) aligned,ptr,ptr,bit(12) aligned) returns(ptr);
dcl	share_expression entry(ptr) returns(ptr);
dcl	jump_op$eval_primaries entry(ptr);
dcl	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr);
dcl	compile_exp entry(ptr);

%include nodes;
%include block;
%include statement;
%include statement_types;
%include label;
%include declare_type;
%include list;
%include reference;
%include operator;
%include op_codes;
%include jump_complement;
%include machine_state;

	st = pt;
	jop = st -> statement.root;

	if ^ st -> statement.checked
	then do;
	     target = jop -> operand(1);

	     if target -> node.type = label_node
	     then if ^ target -> label.allocated
		then if cg_stat$cur_level = target -> label.block_node -> block.level
		     then call jump_op$eval_primaries(target);
		     else;
		else;
	     else do;

		/* operator_semantics has ensured that the target of a
		   conditional jump will not be an operator nor a reference
	  	   with expressions hanging off it, so that calling
		   check_expr for the target is unnecessary */

		if target -> node.type = reference_node
		then if target -> reference.symbol ^= null
		     then if target -> reference.symbol -> node.type = label_node
			then if target -> reference.symbol -> label.block_node = cg_stat$cur_block
			     then call jump_op$eval_primaries(target);
		end;

	     call check_expr((jop -> operand(2)));
	     st -> statement.checked = "1"b;
	     end;


	do while("1"b);
	     tree = jop -> operand(2);

	     if tree -> node.type ^= operator_node then return;
	     if tree -> operand(1) -> reference.evaluated then return;
	     if tree -> operand(1) -> reference.c_length ^= 1 then return;

	     jump_code = jop -> operator.op_code;
	     op_code = tree -> operator.op_code;

	     if op_code = not_bits
	     then do;

		/* not - complement the type of jump */

		jop -> operator.op_code = jump_complement(fixed(substr(jump_code,6,4),4));
		jop -> operand(2) = tree -> operand(2);
		end;

	     else if substr(op_code,1,5) = rel_op
	     then do;

		/* rel_op - change into a jump_rel and return */

		if jump_code = jump_true
		     then substr(tree -> operator.op_code,1,5) = jump_op;
		     else tree -> operator.op_code = jump_complement(fixed(substr(op_code,6,4),4));

		tree -> operand(1) = jop -> operand(1);
		st -> statement.root = tree;
		return;
		end;

	     else if op_code = and_bits | op_code = or_bits
	     then do;

		/* or_bits | and_bits - split into 2 statements */

		if machine_state.indicators = 1
		then do;

		     /* if result of second computation is in a with
		        indicators set, do that one first */

		     p3 = tree -> operand(3);
		     if p3 -> node.type = operator_node
			then p3 = p3 -> operand(1);

		     if p3 -> reference.value_in.a & p3 -> reference.allocate
		     then do;
			p3 = tree -> operand(3);
			tree -> operand(3) = tree -> operand(2);
			tree -> operand(2) = p3;
			end;
		     end;

		if op_code = and_bits & jump_code = jump_false
		 | op_code = or_bits & jump_code = jump_true
		then do;

		     /* simply duplicate the statement */

		     call make(/* jump_code,target,tree -> operand(3) */);

		     jop -> operand(2) = tree -> operand(2);

		     target = jop -> operand(1);
		     if target -> node.type = label_node
			then target -> label.statement -> statement.reference_count =
			     target -> label.statement -> statement.reference_count + 1;
			else target = share_target_expression(target);
		     end;

	          else do;

		     /* make a second statement; reverse the form of
		        the first statement and redirect to the next
		        statement */

		     next = st -> statement.next;

		     call make(/* jump_code,target,tree -> operand(3) */);

		     jop -> operand(2) = tree -> operand(2);

		     if jump_code = jump_true
			then jop -> operator.op_code = jump_false;
			else jop -> operator.op_code = jump_true;

		     nextlab = create_label(cg_stat$cur_block,null,(by_compiler));
		     lp = create_list(2);

		     /* connect nextlab to next stmt */

		     jop -> operand(1) = nextlab;
		     nextlab -> label.statement = next;

		     lp -> element(2) = nextlab;
		     lp -> element(1) = next -> statement.labels;
		     next -> statement.labels = lp;

		     string(nextlab -> label.source_id) = string(next -> statement.source_id);

		     /* reference_count updated once for new reference and once for new label */

		     next -> statement.reference_count = next -> statement.reference_count + 2;

		     /* optimizer didn't know about this label, so make sure all temps
		        are saved before anyone jumps here */

		     next -> statement.save_temps = "1"b;
		     end;

		next_tree = st -> statement.next -> statement.root;

		if next_tree -> operand(2) -> node.type = operator_node
		then if ^ next_tree -> operand(2) -> operand(1) -> reference.evaluated
		then if next_tree -> operand(2) -> operand(1) -> reference.c_length = 1
		then call optimize_if((st -> statement.next));

		end;

	     else return;

	     end;

/*  */
make:	     proc(/* op_code,target,expr */);

	     /* make a new if statement */

dcl	     (new,op) ptr;

	     pl1_stat_$cur_statement = st;	/* otherwise create_statement fails */

	     new = create_statement((if_statement),st,null,(st -> statement.prefix));
	     op = create_operator((jump_code),2);

	     new -> statement.generated,
	     new -> statement.checked = "1"b;
	     new -> statement.root = op;

	     op -> operand(1) = jop -> operand(1);
	     op -> operand(2) = tree -> operand(3);

	     end;
/**/
share_target_expression: proc(p) returns(ptr);

	     /* updates all relevant reference counts when a jump target is
	        NOT a label (it might be a subscripted label reference)
	        Note, however, that operator_semantics has ensured that the
	        target of a conditional jump will not be an operator nor a
	        reference with expressions hanging off it. */

dcl	     (p,q,vector) ptr;
dcl	     i fixed bin;

	     if p -> reference.symbol ^= null
	     then if p -> reference.symbol -> node.type = label_node
	     then do;
		vector = p -> reference.symbol -> label.statement;

		q = vector -> element(p -> reference.c_offset + 1);
		q -> statement.reference_count = q -> statement.reference_count + 1;
		end;

	     if ^ p -> reference.shared
		then p -> reference.ref_count = p -> reference.ref_count + 1;

	     return(p);

	     end;
/*  */
check_expr:	proc(pt);

	     /* forces evaluation of any expression that could be used in
	        more than one place */

dcl	     (pt,p,q) ptr;
dcl	     (i,n) fixed bin;
dcl	     atomic bit(1) aligned;

	     p = pt;
	     if p = null then return;
	     if p -> node.type = temporary_node then return;

	     if p -> node.type = list_node
	     then do;

		/* should appear only in arg lists */

		do i = 1 to p -> list.number - 1;
		     call check_expr((p -> list.element(i)));
		     end;
		return;
		end;

	     q = p;

	     if p -> node.type = operator_node
	     then do;
		if p -> operator.op_code = param_ptr | p -> operator.op_code = param_desc_ptr
		     then return;

		if p -> operator.op_code = std_call
		     then n = 2;
		     else n = 1;

		p = p -> operand(1);

		if p -> reference.ref_count <= n
		then do;
		     do i = q -> operator.number to 2 by -1;
			call check_expr((q -> operand(i)));
			end;
		     return;
		     end;
		end;

	     else do;
		if p -> reference.ref_count <= 1
		then do;
		     if p -> reference.length ^= null
			then call check_expr((p -> reference.length));
		     if p -> reference.qualifier ^= null
			then call check_expr((p -> reference.qualifier));
		     if p -> reference.offset ^= null
			then call check_expr((p -> reference.offset));
		     return;
		     end;
		end;

	     p = prepare_operand(q,1,atomic);

	     if ^ atomic
	     then do;
		p -> reference.ref_count = p -> reference.ref_count + 1;
		call compile_exp(q);
		end;

	     return;
	     end;

	end;
