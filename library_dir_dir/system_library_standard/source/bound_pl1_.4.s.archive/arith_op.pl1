/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* this procedure compiles arithmetic expressions

   Initial Version:  5 October, 1968 by BLW
	Modified: 24 May, 1971 by BLW for Version II 
	Modified: 21 January, 1973 by BLW
	Modified:	8 November 1973 by RAB for fixed divide
	Modified:	16 September 1974 by RAB for bug 1230 (float divide)
	Modified:	24 September 1975 by RAB for bug 1424
	Modified:	29 October 1975 by RAB to check p3 in q	
	Modified: 2 April 1976 by RHS to improve code for constant*2
	Modified:	9 March 1978 by RAB to check p3 in q for floating divide	*/

arith_op:	proc(node_pts,refs,atom);

dcl	node_pts	ptr,		/* points at operator node */
	refs(3)	ptr,		/* ptrs to ref nodes of operands */
	atom(3)	bit(1) aligned;	/* ON is operand is atomic */

dcl	node_pt	ptr defined(node_pts),
	ref(3)	ptr defined(refs);

dcl	(p,p1,p2,p3,q2,q3) ptr,
	complex_stuff$complex_stuff fixed bin ext,
	based_int fixed bin(18) based,
	(type1,type2,type3,scale1,scale2,scale3,op,k,rev,comp,max_type,op_code,n) fixed bin(15),
	shift fixed bin,
	(check_scale,check_type,mult_scaled,reversed) bit(1) aligned,
	negate_op(4) fixed bin(15) int static initial(255,38,39,39),
	load entry(ptr,fixed bin(15)),
	power_of_two entry(fixed bin(18)) returns(fixed bin(18)),
	c_a entry(fixed bin,fixed bin) returns(ptr),
	expmac$interpret entry(fixed bin,ptr,(3) ptr,(3) bit(1) aligned),
	expmac entry(fixed bin(15),ptr),
	expmac$zero entry(fixed bin(15)),
	expmac$abs entry(ptr,fixed bin),
	compile_exp entry(ptr),
	(compile_exp$save,compile_exp$save_exp,compile_exp$save_float_2,copy_temp) entry(ptr) returns(ptr);

dcl	(fixed_to_float,float_to_fixed) entry(ptr),
	compile_exp$save_fix_scaled entry(ptr,fixed bin(15),fixed bin(15)) returns(ptr),
	aq_man$fix_scale entry(ptr,fixed bin(15),fixed bin(15));

dcl	divide_fx1 init(535) fixed bin(15) int static;

dcl	(addr,fixed,max,mod) builtin;

dcl	1 arith_data$fixed(3) ext static,
	2 left_type(2),
	3 right_type(2),
	4 body		fixed bin(15),
	4 rev		fixed bin(15),
	4 comp		fixed bin(15),

	1 fix_info	based(p),
	2 body		fixed bin(15),
	2 rev		fixed bin(15),
	2 comp		fixed bin(15);

dcl (	add_op		init(1),
	sub_op		init(2),
	mult_op		init(3),
	div_op		init(4)) fixed bin int static;


%include reference;
%include operator;
%include symbol;
%include data_types;
%include op_codes;
%include "645op2";
%include "645op3";

dcl (	fx1_to_fl2	init(122),
	fl2_to_fx2	init(125)) fixed bin(15) int static;


begin:	p1 = ref(1);

	reversed,
	mult_scaled,
	check_type,
	check_scale = "0"b;

	p2 = ref(2);

	p = node_pt;
	q2 = p -> operand(2);

	if p1 -> reference.symbol -> symbol.complex
	then do;
	     call expmac$interpret(complex_stuff$complex_stuff,node_pt,refs,atom);
	     return;
	     end;

	type1 = p1 -> reference.data_type;
	type2 = p2 -> reference.data_type;

	/* check for special attention */

	if p -> operator.op_code = negate then goto neg_op;

	p3 = ref(3);
	q3 = p -> operand(3);

	op_code = fixed(p -> operator.op_code,9) - 16;

	type3 = p3 -> reference.data_type;

	/* if p3 is in q, try to flip_rands */

	if p3 -> reference.value_in.q
	then if atom(2)
	then if op_code ^= sub_op
	then if op_code ^= div_op
	then if atom(3)
	then do;
	     call flip_rands;
	     reversed = "0"b;
	     end;

	/* get information for this combination of operator
	   and data types */

	if type1 >= real_flt_bin_1
	then do;

	     /* have floating point operation, we use the
	        manner in which macro values are coded to
	        calculate the appropriate macro to use */

	     max_type = type1;
	     rev, comp = 0;
	     op = adfl1 + 2 * op_code - real_flt_bin_1 - 2;

	     if op_code = 4
	     then do;

		/* have floating divide, must avoid FDV & FDI
		   instructions for double precision result
		   (fixes bug 1230) */

		if type1 > type2
		then do;
		     atom(2) = "0"b;
		     check_type = "1"b;
		     end;

		if type1 > type3
		then do;
		     atom(3) = "0"b;
		     check_type = "1"b;
		     end;

		/* if p3 is in q, try to flip rands and use inverted divide */

		if p3 -> reference.value_in.q & atom(2) & atom(3)
		then do;
		     call flip_rands;
		     op = op + 2;
		     end;
		end;
	     end;
	else do;

	     /* have fixed point operation; all division (except
	        for fx1/fx1) is handled by external
	        operator */

	     scale1 = p1 -> reference.symbol -> symbol.scale;
	     scale2 = p2 -> reference.symbol -> symbol.scale;
	     scale3 = p3 -> reference.symbol -> symbol.scale;

	     if op_code ^= div_op then goto normal;

	     if scale1 ^= 0 then goto punt;
	     if scale2 ^= 0 then goto punt;
	     if scale3 ^= 0 then goto punt;


	     if max(type1,type2,type3) = real_fix_bin_1
	     then do;
		k = type2;
		goto gi;
		end;

punt:	     if ^ atom(3) then p3 = compile_exp$save(q3);
	     if atom(2) then call load(p2,0); else call compile_exp(q2);
	     op = divide_fx1 + 2*type2 + type3 - 3;
	     shift = scale1 - (scale2 - scale3);
	     call expmac(op,p3);
	     call expmac$abs(addr(shift),1);
	     return;

normal:	     if op_code = mult_op 
	     then do;
		k = type2;
		if scale1 ^= scale2 + scale3
		     then mult_scaled = "1"b;
		end;

	     else do;
		max_type = max(type2,type3);
		if max_type = real_fix_bin_1 & type1 = real_fix_bin_2
		then k = real_fix_bin_2; else k = type2;

		if scale1 ^= scale2
		then do;
		     atom(2) = "0"b;
		     check_scale = "1"b;
		     end;

		if scale1 ^= scale3
		then do;
		     atom(3) = "0"b;
		     check_scale = "1"b;
		     end;

		end;

gi:	     call get_information;
	     end;

	/* dispatch on form of operands */

	goto arith_switch(fixed(atom(2) || atom(3),2));

	/* both operands are atomic.  check to see if body of
	   operation takes left operand instead of right */

arith_switch(3):
atm_atm:	if rev > 0
	then do;
faa:	     call flip_rands;
	     goto aa_2;
	     end;

	if op_code = mult_op
	then if type1 = real_fix_bin_1
	     then if p2 -> reference.symbol -> symbol.constant
		then if ^p3->reference.symbol->symbol.constant
		     then goto faa;
		     else if power_of_two(p2->reference.symbol->symbol.initial->based_int) ^= 0
			then goto faa;

	/* expand load(p2) and body(p3) */

aa_2:	call load(p2,comp);

aa_3:	if op_code <= sub_op
	then do;
	     if check_scale
		then max_type = max(type2,type3);

	     if max_type < type1
		then call expmac$zero(rfb1_to_rfb2);
	     end;

	if type1 >= real_flt_bin_1 then op = op + type3;
aa_4:	call expmac(op,p3);

	if mult_scaled
	then do;
	     p1 -> reference.symbol -> symbol.scale = scale2 + scale3;
	     call aq_man$fix_scale(p1,scale1,type1);
	     p1 -> reference.symbol -> symbol.scale = scale1;
	     end;

	return;

	/* expressions on both sides, the case real_fix_bin_1 - real_fix_bin_2
	   is given special treatment */

arith_switch(0):
exp_exp:	if op_code ^= sub_op then goto ee_0;

	if type1 >= real_flt_bin_1 then goto ee_0;

	if type2 < type3 & ^ check_scale
	then do;
	     p2 = compile_exp$save(q2);
	     call compile_exp(q3);
	     call expmac$zero(negl);
	     call expmac(adfx3,p2);
	     return;
	     end;

	/* both operands are expressions, evaluate right expression
	   and store in a temporary, then treat like exp_atm case */

ee_0:	if rev > 0 then call flip_rands;

	if check_scale & scale1 ^= scale3
	then do;
	     p3 = compile_exp$save_fix_scaled(q3,scale1,type1);
	     type3 = type1;
	     call get_info;
	     if reversed
	     then if rev = 0
		then do;
		     call flip_rands;
		     go to atm_exp;
		     end;
	     end;
	else if check_type & type1 > type3
	     then do;
		p3 = compile_exp$save_float_2(q3);
		type3 = type1;
		end;
	     else p3 = compile_exp$save(q3);

	goto ea_0;

	/* left operand is atomic, right is an expression. */

arith_switch(2):
atm_exp:	goto ae_switch(op_code);

	/* operation is addtion */

ae_switch(1):
ae_add:	call flip_rands;
	goto ea_0;

	/* operation is multiplication */

ae_switch(3):
ae_mpy:	if type2 = real_fix_bin_1
	then if type3 = real_fix_bin_2
	     then rev = 1; else;
	else if type2 = real_fix_bin_2
	     then if type3 = real_fix_bin_1
		then rev = 0;

	goto ae_gen;

	/* operation is subtraction, evaluate expression and
	   save if fixed single */

ae_switch(2):
ae_sub:	if type3 = real_fix_bin_1
	then do;
ae_sub_1:	     if check_scale & scale1 ^= scale3
	     then do;
		p3 = compile_exp$save_fix_scaled(q3,scale1,type1);
		type3 = type1;
		call get_info;
		end;
	     else p3 = compile_exp$save(q3);

	     goto aa_2;
	     end;

	call compile_exp(q3);

	if check_scale & scale1 ^= scale3
	then do;
	     call aq_man$fix_scale(p3,scale1,type1);
	     type3 = type1;
	     call get_info;
	     end;

	k = 1 - mod(type2,2);
	if type3 >= real_flt_bin_1
	then op = adfl1 + k;
	else op = adfx3 - k;

	/* we use the fact that:
	     real_fix_bin_2 = real_fix_bin_1+1
	     real_flt_bin_2 = real_flt_bin_1+1
	   and the fact that:
	     mod(real_fix_bin_1,2) = mod(real_fix_bin_2,2) = 1;

	   Thus we generate op for single precision atom,
	   and op+|-1 for double precision atom      */

	call expmac$zero(negate_op(type3));
	call expmac(op,p2);
	return;

	/* operation is division.  evaluate expression and
	   save if fixed point or use inverse divide if floating */

ae_switch(4):
ae_div:	if type1 <= real_fix_bin_2
	then do;
	     p3 = compile_exp$save(q3);
	     goto aa_2;
	     end;

	op = op+2;

	/* for general operation, reverse operands */

ae_gen:	call flip_rands;

	/* left operand is an expression, right is atomic. */

arith_switch(1):
exp_atm:	if check_scale & scale1 ^= scale2
	then do;
	     type2 = type1;
	     call get_info;
	     end;

	if rev > 0
	then do;
	     if check_scale & scale1 ^= scale2
	     then p2 = compile_exp$save_fix_scaled(q2,scale1,type1);
	     else p2 = compile_exp$save(q2);

	     call flip_rands;
	     goto aa_2;
	     end;

ea_0:	call compile_exp(q2);

	if check_scale & scale1 ^= scale2
	then do;
	     call aq_man$fix_scale(p2,scale1,type1);
	     type2 = type1;
	     call get_info;
	     end;

	if op_code = add_op
	then do;
	     if type2 ^= real_fix_bin_1 then goto aa_3;
	     if type3 ^= real_fix_bin_2 then goto aa_3;
	     call expmac$zero(rfb1_to_rfb2);
	     op = adfx2;
	     goto aa_4;
	     end;

	if comp > 0 then call expmac$zero(negate_op(type2));
	goto aa_3;

	/* negation operator */

neg_op:	if atom(2)
	then do;

	     /* set k = 3 if double length atom and 1 otherwise */

	     if mod(type2,2) = 0 then k = 3; else k = 1;
	     call load(p2,k);
	     end;
	else do;

	     /* have expression */

	     call compile_exp(q2);
	     call expmac$zero(negate_op(type1));
	     end;
	return;

flip_rands:    proc;
	
	     /* this procedure is called to reverse the operands of a node */
	
	     dcl p ptr,t fixed bin,b bit(1) aligned;
	
	     p = p2; p2 = p3; p3 = p;
	     p = q2; q2 = q3; q3 = p;
	     t = type2; type2 = type3; type3 = t;
	     t = scale2; scale2 = scale3; scale3 = t;
	     b = atom(2); atom(2) = atom(3); atom(3) = b;
	     reversed = ^ reversed;
	
	     end;

get_info:	     proc;

dcl	     j fixed bin,
	     info_pt ptr;

	     j = type2;
	     goto common;

get_information: entry;

	     j = k;

common:	     info_pt = addr(arith_data$fixed(op_code).left_type(j).
	      right_type(type3));
	     op = info_pt -> fix_info.body;
	     rev = info_pt -> fix_info.rev;
	     comp = info_pt -> fix_info.comp;
	     end;

	end;
