/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Program to load size of specified string

   Modified: 14 December 1972 by BLW
  Modified: 22 May 1973 by RAB
	Modified:	6 May 1977 by RAB to fix 1617
	Modified:	11 August 1978 by RAB to fix 1729
	Modified:	18 December 1978 by RAB to fix 1805	*/

load_size: proc(pt);

dcl	pt ptr;		/* points at reference node */
dcl	breg bit(4) aligned;	/* reg picked for loading size */
dcl	preg fixed bin;		/* reg to be used for loading size */

dcl	(p,q,q1) ptr,
	(for_eis,in_storage,in_str_aq,useless) bit(1) aligned,
	addr_hold bit(36) aligned,
	reloc_hold bit(12) aligned,
	macro fixed bin(15),
	(n,reg) fixed bin;

dcl	expmac entry(fixed bin(15),ptr),
	generate_constant$real_fix_bin_1 entry(fixed bin) returns(ptr),
	m_a entry(ptr,bit(2) aligned),
	eval_exp entry(ptr,bit(1) aligned) returns(ptr),
	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr),
	(state_man$flush_ref,state_man$update_ref) entry(ptr),
	aq_man$load_var entry(ptr,fixed bin),
	(aq_man$load_any_var_and_lock,xr_man$load_any_var_and_lock) entry(ptr,fixed bin,fixed bin),
	aq_man$lock entry(ptr,fixed bin);

dcl	(bit,fixed,null) builtin;

dcl	fix_bin(0:1) fixed bin based;

dcl	load_aq(2)	init(1,7) fixed bin(15) int static;

%include reference;
%include symbol;
%include operator;
%include nodes;

	for_eis = "0"b;
	reg = 2;
	go to join;

load_size$a_or_q:	entry(pt,preg);

	for_eis = "0"b;
	reg = preg;
	go to join;

load_size$xr_or_aq:	entry(pt,breg);

	for_eis = "1"b;

join:	p = pt;
	q = p -> reference.length;
	n = p -> reference.c_length;

	if p -> reference.varying_ref
	then do;

	     if q ^= null then goto l2;
	     if n ^= 0 then goto l3;

	     /* for a varying string, we'll load the word before the
	        start of the string if string is not constant */

	     q = p -> reference.offset;
	     if q = null
	     then do;
		q = p -> reference.symbol;
		if q -> symbol.constant
		then do;
		     n = q -> symbol.initial -> fix_bin(p -> reference.c_offset);
		     goto l3;
		     end;
		end;

	     if ^p -> reference.shared
		then p -> reference.ref_count = p -> reference.ref_count + 1;

	     if string(p -> reference.address_in.b) ^= "0"b & ^ p -> reference.temp_ref 
					/* temp_ref restriction same as in m_a */
	     then do;
		if p -> address.offset ^= (15)"0"b | p -> reference.no_address
		     then call m_a(p,"00"b);
		p -> address.offset = (15)"1"b;
		p -> reference.perm_address = "1"b;
		end;
	     else do;
		addr_hold = string(p -> reference.address);
		reloc_hold = p -> reference.relocation;
		p -> reference.c_offset = p -> reference.c_offset - 1;
		call m_a(p,"00"b);
		p -> reference.c_offset = p -> reference.c_offset + 1;
		p -> reference.perm_address = "1"b;
		end;

	     if for_eis
	     then do;
		q = p;
		call load_reg;

		/* We don't want to believe that the varying string itself
		   is in the a or q register */

		in_storage = p -> reference.value_in.storage;
		in_str_aq = p -> reference.value_in.string_aq;
		call state_man$flush_ref(p);
		if in_str_aq
		     then call state_man$update_ref(q);
		p -> reference.value_in.storage = in_storage;
		end;
	     else call expmac((load_aq(reg)),p);

	     if string(p -> reference.address_in.b) ^= "0"b & ^ p -> reference.temp_ref
	     then p -> address.offset = (15)"0"b;
	     else do;
		string(p -> reference.address) = addr_hold;
		p -> reference.relocation = reloc_hold;
		end;

	     p -> reference.perm_address = "0"b;

	     return;
	     end;

	if q = null
	then do;
l3:	     q = generate_constant$real_fix_bin_1(n);
	     goto l1;
	     end;

l2:	if q -> node.type = operator_node
	then do;
	     q1 = q -> operand(1);
	     if q1 -> reference.evaluated then q = q1;
	     else do;
		q, p -> reference.length = eval_exp(q,"1"b);
		if q -> node.type = operator_node
		     then q = q -> operand(1);
		end;
	     end;

l1:	if ^ q -> reference.shared
	then q -> reference.ref_count = q -> reference.ref_count + 1;

	if q -> reference.data_type = 0 then q = prepare_operand(q,1,useless);

	if ^ for_eis
	     then call aq_man$load_var(q,reg);
	     else call load_reg;


load_reg:	proc;

dcl	reg fixed bin;

	if q -> reference.value_in.a
	then do;
	     breg = "0101"b;	/* a */
	     reg = 1;
	     go to lock_aq;
	     end;

	if q -> reference.value_in.q
	then do;
	     breg = "0110"b;	/* q */
	     reg = 2;
lock_aq:	     call aq_man$lock(null,reg);
	     if ^ q -> reference.shared
		then q -> reference.ref_count = q -> reference.ref_count - 1;
	     return;
	     end;

	if p -> reference.big_length
	then do;
	     call aq_man$load_any_var_and_lock(q,reg,0);
	     breg = "01"b || bit(fixed(reg,2),2);
	     end;
	else do;
	     call xr_man$load_any_var_and_lock(q,reg,0);
	     breg = "1"b || bit(fixed(reg,3),3);
	     end;

	end;



	end;
