/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* this procedure is called to set the logical indicators.  it
   generates a compare sequence.

   Initial Version: 28 November, 1968 by BLW	
	Modified: 19 December, 1971 by BLW for Version II
	Modified: 29 January, 1973 by BLW
	Modified: 28 April, 1973 by RAB
	Modified:	20 June 1973 by RAB for EIS 
	Modified:	13 October 1975 by RAB to remember comparisons
	Modified:	29 October 1975 by RAB to check p3 in q
	Modified:	25 November 1975 by RAB to fix 1442
	Modified:	21 December 1976 by RAB to fix 1565
	Modified:	15 January 1978 by RAB to move refs(1) = null; towards
		beginning of program
	Modified: 25 Apr 1979 by PCK to implement 4-bit decimal and fix bug 1832
	Modified:	28 Jul 1979 by RAB to fix 1837 (if "" = char_string fails)	*/

set_indicators: proc(pt,p2_par,p3_par,code) returns(fixed bin(1));

dcl	pt	ptr,		/* points at operator node */
	p2_par	ptr,		/* points at left ref node */
	p3_par	ptr,		/* points at right ref node */
	code	fixed bin;	/* context code */

dcl	(cg_stat$text_pos,cg_stat$last_macro,compare_ptrs$compare_ptrs,
	complex_stuff$complex_compare,cg_stat$cur_level,cg_stat$packed_null_value) fixed bin ext,
	cg_stat$null_value bit(72) aligned ext,
	(cg_stat$text_base,cg_stat$cur_block,
	 cg_stat$long_string_temp,cg_stat$single_temp) ptr ext;

dcl	(p,refs(3),q,q2,q3,t,sym(2:3),node_pt,arg(3)) ptr,
	p2s ptr defined(sym(2)),
	p3s ptr defined(sym(3)),
	p2 ptr defined(refs(2)),
	p3 ptr defined(refs(3)),
	(i,s1,s2,s3,size2,size3,type1,type2,type3,dt,k,case,n,prec,scale(3)) fixed bin,
	(macro,op) fixed bin(15),
	atom(3) bit(1) aligned,
	b2 bit(2) aligned,
	(reversed,zero(2:3),const(2:3),atomic,check_scale,ext_ent) aligned bit(1),
	toff bit(15) aligned,
	pl_stat$last_macro fixed bin(15) ext static,
	(mac1,mac2) fixed bin(15);

dcl	c_a entry(fixed bin,fixed bin) returns(ptr),
	generate_constant$real_fix_bin_1 entry(fixed bin) returns(ptr),
	prepare_operand entry(ptr,fixed bin,bit(1) aligned) returns(ptr),
	base_man$load_var entry(fixed bin,ptr,fixed bin),
	create_label entry(ptr,ptr,bit(3) aligned) returns(ptr),
	gen_arithmetic_call entry(ptr,(3) ptr,(3) bit(1) aligned),
	inline_operation entry(ptr,(3) ptr,(3) bit(1) aligned) returns(bit(1) aligned),
	load entry(ptr,fixed bin),
	(compile_exp,compile_exp$for_test) entry(ptr),
	adjust_ref_count entry(ptr,fixed bin),
	aq_man$fix_scale entry(ptr,fixed bin,fixed bin),
	compile_exp$save_fix_scaled entry(ptr,fixed bin,fixed bin) returns(ptr),
	(compile_exp$save,compile_exp$save_exp) entry(ptr) returns(ptr),
	aq_man$save_aq entry(ptr,fixed bin),
	make_both_addressable entry(ptr,ptr,bit(1) aligned),
	expmac$interpret entry(fixed bin,ptr,(3) ptr,(3) bit(1) aligned),
	expmac$fill_usage entry(fixed bin(17),fixed bin(17)),
	expmac$many entry(fixed bin(15),ptr,fixed bin),
	expmac$one_eis entry(fixed bin(15),ptr),
	expmac$two_eis entry(fixed bin(15),ptr,ptr),
	load$for_test entry(ptr,fixed bin),
	aq_man$pad_aq entry(fixed bin,fixed bin),
	base_man$store_ptr_to entry(ptr,ptr),
	generate_constant$bit_string entry(bit(*) aligned,fixed bin) returns(ptr),
	store entry(ptr),
	state_man$erase_reg entry(bit(19) aligned),
	assign_op$fix_dec_scaled entry(ptr),
	get_imaginary entry(ptr) returns(ptr),
	expmac$zero entry(fixed bin(15)),
	expmac$one entry(fixed bin(15),ptr,fixed bin),
	expmac entry(fixed bin(15),ptr);

dcl	(abs,addr,addrel,bit,fixed,max,min,null,string,ceil,substr) builtin;

dcl	1 instruction	aligned based,
	2 left		unal bit(18),
	2 op_code		unal bit(9),
	2 rest		unal bit(9);

dcl (	z2 based(addr(zero(2))),
	z3 based(addr(zero(3))),
	c2 based(addr(const(2))),
	c3 based(addr(const(3)))) bit(1) aligned;

dcl (	scale1 defined(scale(1)),
	scale2 defined(scale(2)),
	scale3 defined(scale(3))) fixed bin;

dcl	fix_bin		fixed bin based,
	flt_bin		float bin based,
	fix_bin_71	fixed bin(71) based,
	flt_bin_63	float bin(63) based,
	bit_72		bit(72) aligned based;

dcl (	stfx1		init(15),
	ana		init(40),
	eraq		init(54),
	oraq		init(48),
	anaq		init(42),
	cana		init(615),
	canaq		init(617),
	fx1_to_fx2	init(88),
	make_lv		init(173),
	set_label_const	init(315),
	compare_labels	init(325),
	compare_files	init(280),
	comp_decimal	init(532),
	jump_ne		init(181),
	cpbs3		init(226),
	set_chars		init(436),
	cp_chars		init(186),
	cpcs1		init(140),
	cpbs1		init(149),
	cpfx1		init(136),
	cpfl1		init(138),
	clear_aq		init(58)) fixed bin(15) int static;

dcl	1 decimal_constant based aligned,
	2 sign char(1) unal,
	2 magnitude char(prec) unal,
	2 exponent bit(9) unal;

dcl	1 packed_decimal_constant based aligned,
	2 sign_and_magnitude bit(ceil(bits_per_packed_digit*(prec+1))) unal,
	2 exponent bit(9) unal;

%include cgsystem;
%include reference;
%include label;
%include nodes;
%include block;
%include symbol;
%include operator;
%include data_types;
%include declare_type;
%include machine_state;

begin:	reversed, check_scale = "0"b;
	node_pt = pt;
	b2 = bit(fixed(code,2),2);
	atom(2) = substr(b2,1,1);
	atom(3) = substr(b2,2,1);

	p2 = p2_par;
	p3 = p3_par;

	if machine_state.indicators = -2
	then if p2 = indicators_ref(2)
	     then if p3 = indicators_ref(3)
		then do;
		     call adjust_refs;
		     return(0);
		     end;
		else;
	     else if p3 = indicators_ref(2)
		then if p2 = indicators_ref(3)
		     then do;
			call adjust_refs;
			return(1);
			end;

	q2 = node_pt -> operand(2);
	type2 = p2 -> reference.data_type;
	p2s = p2 -> reference.symbol;

	scale2 = p2s -> symbol.scale;
	c2 = p2s -> symbol.constant & p2 -> reference.offset = null & p2 -> reference.c_offset = 0;

	if code = 5
	then do;
	     z3 = "1"b;
	     goto str;
	     end;

	q3 = node_pt -> operand(3);
	type3 = p3 -> reference.data_type;
	p3s = p3 -> reference.symbol;

	s2, s3 = 0;

	if p2s -> node.type = label_node then goto lv1;
	if p2s -> symbol.label | p2s -> symbol.format | p2s -> symbol.entry
	     then go to label_compare;

	if p2s -> symbol.file then goto file_compare;

	refs(1) = null;

	if p2s -> symbol.ptr
	then do;

	     /* have comparision of two pointers.  check to see if we are comparing
	        a packed ptr with null, if so replace the null with a packed representation.
	        note that we assume that null is the only pointer constant */

	     if p2 -> reference.data_type = packed_ptr
	     then if p3s -> symbol.constant
		then do;
		     p3 = generate_constant$real_fix_bin_1(cg_stat$packed_null_value);
		     p3 -> reference.data_type = packed_ptr;
		     end;
		else;
	     else if p3 -> reference.data_type = packed_ptr
		then if p2s -> symbol.constant
		     then do;
			p2 = generate_constant$real_fix_bin_1(cg_stat$packed_null_value);
			p2 -> reference.data_type = packed_ptr;
			end;

	     call expmac$interpret(compare_ptrs$compare_ptrs,node_pt,refs,atom);
	     goto cp_exit;
	     end;

	z2, z3 = "0"b;

	scale3 = p3s -> symbol.scale;
	c3 = p3s -> symbol.constant & p3 -> reference.offset = null & p3 -> reference.c_offset = 0;

	if p2s -> symbol.decimal & p3s -> symbol.decimal
	then do;
	     do i = 2 to 3;
		if atom(i)
		then if const(i)
		     then if ^ sym(i) -> symbol.complex
			then do;
			     prec = sym(i) -> symbol.c_dcl_size;
			     if sym(i) -> symbol.unaligned
			     then zero(i) = substr(sym(i) -> symbol.initial -> packed_decimal_constant.sign_and_magnitude,6) = ""b;
			     else zero(i) = sym(i) -> symbol.initial -> decimal_constant.magnitude = substr((64)"0",1,prec);
			     end;
			else;
		     else;
		else refs(i) = compile_exp$save_exp((node_pt -> operand(i)));
		end;

	     /* If one of the operands is zero, see if the last operation set the indicators
	        for the other operand */

	     if z2
		then call flip_rands;

	     if z3
	     then do;
		if p2 -> reference.value_in.decimal_aq
		then if machine_state.indicators = 14
		     then do;
			if ^ p2 -> reference.shared
			     then call adjust_ref_count(p2,-1);
			go to cp_exit;
			end;
		call compare_decimal;
		end;

	     else do;
		if max(scale2,scale3) <= max_dec_scale & min(scale2,scale3) >= min_dec_scale
		then call compare_decimal;

		else if type2 = type3 & abs(scale2 - scale3) <= max_dec_scale - min_dec_scale
		     then do;
			if scale2 > scale3
			     then k = min_dec_scale;
			     else k = max_dec_scale;
			p2s -> symbol.scale = k + (scale2 - scale3);
			p3s -> symbol.scale = k;

			call compare_decimal;

			p2s -> symbol.scale = scale2;
			p3s -> symbol.scale = scale3;
			end;

		     else do;
			do i = 2 to 3;
			     if scale(i) > max_dec_scale | scale(i) < min_dec_scale
				then call assign_op$fix_dec_scaled(refs(i));
			     end;

			call compare_decimal;
			end;
		end;

	     go to cp_exit;
	     end;

	if p2s -> symbol.complex | p3s -> symbol.complex
	then do;
	     if ^ inline_operation(node_pt,refs,atom)
		then call gen_arithmetic_call(node_pt,refs,atom);
	          else call expmac$interpret(complex_stuff$complex_compare,node_pt,refs,atom);
	     goto cp_exit;
	     end;

	if type2 <= real_fix_bin_2
	then do;

	     mac1 = cpfx1;
	     mac2 = fx1_to_fx2;

	     type1 = max(type2,type3);
	     scale1 = max(scale2,scale3);

	     if scale1 ^= scale2
	     then do;
		atom(2) = "0"b;
		goto l1;
		end;

	     if scale1 ^= scale3
	     then do;
		atom(3) = "0"b;

l1:		check_scale = "1"b;
		code = fixed(atom(2) || atom(3),2);
		end;

	     s1 = type1 - real_fix_bin_1;
	     s2 = type2 - real_fix_bin_1;
	     s3 = type3 - real_fix_bin_1;

	     if c2
	     then do;
		t = p2s -> symbol.initial;
		if s2 = 0 then z2 = t -> fix_bin = 0;
		else z2 = t -> fix_bin_71 = 0;
		end;

	     if c3
	     then do;
		t = p3s -> symbol.initial;
		if s3 = 0 then z3 = t -> fix_bin = 0;
		else z3 = t -> fix_bin_71 = 0;
		end;

sk:	     k = 2*s2 + s3;
	     goto arith_sw(code);
	     end;

	if type2 <= real_flt_bin_2
	then do;

	     mac1 = cpfl1;
	     mac2 = 0;

	     s2 = type2 - real_flt_bin_1;
	     s3 = type3 - real_flt_bin_1;

	     if c2
	     then do;
		t = p2s -> symbol.initial;
		if s2 = 0 then z2 = t -> flt_bin = 0.0e0;
		else z2 = t -> flt_bin_63 = 0.0e0;
		end;

	     if c3
	     then do;
		t = p3s -> symbol.initial;
		if s3 = 0 then z3 = t -> flt_bin = 0.0e0;
		else z3 = t -> flt_bin_63 = 0.0e0;
		end;

	     goto sk;
	     end;

	/* have string comparsion */

str:	if p2 -> reference.long_ref | p2 -> reference.varying_ref | p2 -> reference.hard_to_load then s2 = 5;
	else do;

	     size2 = p2 -> reference.c_length * convert_size(type2);
	     s2 = 2 * fixed(size2 > bits_per_word,1);

	     if c2 & type2 = bit_string
		then z2 = substr(p2s -> symbol.initial -> bit_72,1,size2) = "0"b;

	     end;

	dt = type2 - char_string;

	if dt = 0 then op = cpcs1; else op = cpbs1;

	if code < 5 then goto st_cp;

	/* have true|false comparison */

st_0:	if s2 < 5
	then do;

	     /* string is short, load value into aq and compare
	        with zero, if necessary */

	     if p2 = q2
	     then do;
lft:		call load$for_test(p2,s2);
		goto cp_exit;
		end;

	     if p2 -> reference.evaluated then goto lft;

	     call compile_exp$for_test(q2);

	     if s2 = 0 then goto cp_exit;

	     /* not single word string, can skip compare if
	        last macro set indicators for entire AQ */

	     n = cg_stat$last_macro;
	     if n = eraq then goto cp_exit;
	     if n = oraq then goto cp_exit;
	     if n = anaq then goto cp_exit;

	     /* If last operation was and_for_test, 
	        then indicators were set correctly */

	     if n = cana then go to cp_exit;
	     if n = canaq then goto cp_exit;

	     p3 = c_a(0,5);

	     s3 = s2;
	     goto st_aa_4;
	     end;

	/* have long string */

	if ^ atom(2)
	then if q2 -> node.type ^= reference_node
	     then if ^ p2 -> reference.evaluated
		then do;
		     call compile_exp$for_test(q2);
		     if machine_state.indicators = 0
		     then do;
			if ^ p2 -> reference.shared
			     then call adjust_ref_count(p2,-1);
			go to cp_exit;
			end;
		     end;

	call expmac$one_eis((cpbs3),p2);

	goto cp_exit;

	/* must actually compare two strings,
	   encode length of right */

st_cp:	if p3 -> reference.long_ref | p3 -> reference.varying_ref | p3 -> reference.hard_to_load then s3 = 5;
	else do;

	     size3 = p3 -> reference.c_length * convert_size(type3);
	     s3 = 2 * fixed(size3 > bits_per_word,1);

	     if c3 & type3 = bit_string
		then z3 = substr(p3s -> symbol.initial -> bit_72,1,size3) = "0"b;

	     end;

	if z2 then call flip_rands;

	if z3
	then if substr(node_pt -> operator.op_code,7,2) = "11"b /* equal, not_equal, jump_if_eq, jump_if_ne */
	     then go to st_0;

	goto string_sw(code);

	/* have atm : atm */

string_sw(3):
st_aa:	if s2 + s3 > 4
	     then go to st_ee_1;	/* at least one of the operands is long */

	/* if p3 in a, flip */

	if p3 -> reference.value_in.a then call flip_rands;

	/* both operands are short, check for char string */

	if type2 = char_string
	then do;

	     /* for char string comparisons, we must pad shorter
	        string to length of longer.  put longer on right */

	     if size2 > size3 then call flip_rands;
	     end;

	else if s2 > s3
	     then call flip_rands;

	/* have one aligned string in storage */

st_aa_2:	call load(p2,s2);

st_aa_3:	if type2 = char_string
	then do;

	     /* pad shorter string to length of longer */

	     call aq_man$pad_aq(type2,size3);
	     k = 0;
	     end;
	else do;
st_aa_4:	     k = 3*fixed(a_reg.size > bits_per_word,1);
	     end;

	macro = op + k;

	call expmac$one(macro,p3,s3);

	call update_indicators;

	/* comparison done */

cp_exit:	return(fixed(reversed,1));

	/* have atm : exp */

string_sw(2):
st_ae:	call flip_rands;

	/* have exp:atm */

string_sw(1):
st_ea:	if s2 = 5
	then do;

	     /* expression is long */

	     if q2 -> node.type ^= reference_node
		then call compile_exp(q2);
	     goto st_ee_1;
	     end;

	/* expression is short */

	if s3 = 5
	then do;

	     /* atm on right is long */

	     p2 = compile_exp$save_exp(q2);
	     go to st_ee_1;
	     end;

	/* right operand is short also */

	if type2 = char_string
	then if size2 > size3
	     then do;
		p2 = compile_exp$save(q2);
		call flip_rands;
		go to st_aa_2;
		end;

	call compile_exp(q2);

	goto st_aa_3;

	/* have exp : exp */

string_sw(0):
st_ee:	if s2 > s3 then call flip_rands;
	if s2+s3 >= 5 then goto st_ee_2;
	if size2 > size3 then call flip_rands;

	/* now have longer string on right */

	if s3 < 5
	then do;

	     /* both strings are short */

	     p3 = compile_exp$save(q3);
	     call compile_exp(q2);
	     goto st_aa_3;
	     end;

	/* have long string on right */

st_ee_2:

	/* one or both strings are long, compile left expression, then
	   save temp ptr in stack (p2 is altered) */

	p2 = compile_exp$save_exp(q2);

	/* compile right expression */

	if q3 -> node.type ^= reference_node
	     then call compile_exp(q3);

st_ee_1:	call expmac$two_eis(cp_chars+dt,p2,p3);
	call update_indicators;
	goto cp_exit;

	/*		Arithmetic comparisons */

	/* have atm : atm */

arith_sw(3):
ar_aa:	if p3 -> reference.value_in.q then call flip_rands;

	if k = 2 | z2 then call flip_rands;

ar_aa_0:	if z3 
	then do;
	     call load$for_test(p2,0);
	     goto cp_exit;
	     end;

	if z2
	then do;
	     reversed = ^ reversed;
	     call load$for_test(p3,0);
	     goto cp_exit;
	     end;

ar_aa_3:	call load(p2,0);

arith_ea_sw(1):
ar_aa_1:	if type2 < type3
	then if mac2 ^= 0
	     then call expmac$zero(mac2);

arith_ea_sw(0):
arith_ea_sw(3):
ar_aa_2:	call expmac(mac1+s3,p3);
	call update_indicators;
	goto cp_exit;

	/* have exp : exp */

arith_sw(0):
ar_ee:	if k = 2 then call flip_rands;

	if check_scale & scale1 ^= scale3
	then do;
	     p3 = compile_exp$save_fix_scaled(q3,scale1,type1);
	     type3 = type1;
	     s3 = s1;
	     end;
	else p3 = compile_exp$save(q3);

	call compile_exp(q2);
	if check_scale & scale1 ^= scale2
	then do;
	     call aq_man$fix_scale(p2,scale1,type1);
	     type2 = type1;
	     s2 = s1;
	     end;

	goto ar_aa_1;

	/* have atm : exp */

arith_sw(2):
ar_ae:	call flip_rands;

	/* have exp : atm */

arith_sw(1):
ar_ea:	if z3
	then if p2 = q2
	     then do;
		call load$for_test(p2,0);
		go to cp_exit;
		end;

	/* if we may need to save the result later, we must increment the ref_count now */

	if k = 2
	then if ^ p2 -> reference.shared
	     then p2 -> reference.ref_count = p2 -> reference.ref_count + 1;

	call compile_exp(q2);

	if check_scale & scale1 ^= scale2
	then do;
	     call aq_man$fix_scale(p2,scale1,type1);
	     type2 = type1;
	     s2 = s1;
	     k = 2*s2 + s3;
	     end;

	if z3
	then if machine_state.indicators >= 0
	     then do;
		if k = 2
		then if ^ p2 -> reference.shared
		     then call adjust_ref_count(p2,-1);
		go to cp_exit;
		end;

	goto arith_ea_sw(k);

arith_ea_sw(2):
	call aq_man$save_aq(p2,0);
	call flip_rands;
	goto ar_aa_3;

	/* We have comparison of labels, entries, or formats */

label_compare:
	if p2s -> symbol.constant
	then do;
lv1:	     ext_ent = (type2 = ext_entry_out) | (type2 = ext_entry_in);
	     k = cg_stat$cur_level - p2s -> symbol.block_node -> block.level;

	     if k = 0 | ext_ent
	     then do;
		arg(1) = c_a(56,4);
		if ext_ent
		then do;
		     arg(1) -> reference.data_type = unpacked_ptr;
		     call base_man$store_ptr_to(p2,arg(1));

		     p2 = generate_constant$bit_string(cg_stat$null_value,(bits_per_two_words));
		     p2 -> reference.data_type = unpacked_ptr;
		     call load(p2,0);
		     toff = arg(1) -> address.offset;
		     arg(1) -> address.offset = bit(fixed(fixed(toff,15)+2,15),15);
		     call store(arg(1));
		     arg(1) -> address.offset = toff;
		     end;
		else do;
		     call base_man$load_var(2,p2,1);
		     call expmac((set_label_const),arg(1));
		     end;
		end;
	     else do;
		arg(1) = p2;
		if ^ p2 -> reference.shared
		     then p2 -> reference.ref_count = p2 -> reference.ref_count + 1;
		arg(2) = c_a(k,2);
		call expmac$many((make_lv),addr(arg),2);

		string(p2 -> reference.address) = string(cg_stat$long_string_temp -> reference.address);
		p2 -> reference.relocation = cg_stat$long_string_temp -> reference.relocation;
		p2 -> reference.perm_address = "1"b;
		p2 -> reference.ic_ref = "0"b;
		end;
	     p2 -> reference.forward_ref = "0"b;

lv2:	     arg(2) = p3;
	     p2 = create_label(cg_stat$cur_block,null,(by_compiler));
	     arg(3) = prepare_operand(p2,1,atomic);
	     call expmac$many((compare_labels),addr(arg),3);
	     call expmac$fill_usage(cg_stat$text_pos,(p2 -> label.location));
	     goto cp_exit;
	     end;

	if p3s -> node.type = label_node
	then do;
lv3:	     call flip_rands;
	     goto lv1;
	     end;

	if p3s -> symbol.constant then goto lv3;

file_compare:
	call state_man$erase_reg("11"b);	/* a and q must not be used for addressing */
	call make_both_addressable(p2,p3,"1"b);

	arg(1) = p2;
	if ^p2s -> symbol.file then go to lv2;
	arg(2) = p3;
	call expmac$many((compare_files),addr(arg),2);
	goto cp_exit;


update_indicators:	proc;

	     /* a compare instruction has been used to set the indicators,
	        update machine_state with appropriate refs or punt */

	     if p2 -> reference.allocate & p3 -> reference.allocate
	     then do;
		indicators_ref(2) = p2;
		indicators_ref(3) = p3;
		machine_state.indicators = -2;
		end;
	     else machine_state.indicators = -1;

	     end;


compare_decimal:	proc;

dcl	     (lab,lab_ref,imag(2:3)) ptr;

	     if type2 > real_flt_dec
	     then do i = 2 to 3;
		imag(i) = get_imaginary(refs(i));
		end;

	     call expmac$two_eis((comp_decimal),p2,p3);

	     if type2 <= real_flt_dec
	     then do;
		if ^ z3
		     then call update_indicators;
		return;
		end;

	     lab = create_label(cg_stat$cur_block,null,(by_compiler));
	     lab_ref = prepare_operand(lab,1,atomic);
	     call expmac((jump_ne),lab_ref);
	     call expmac$two_eis((comp_decimal),imag(2),imag(3));
	     call expmac$fill_usage(cg_stat$text_pos,(lab -> label.location));
	     call update_indicators;

	     end;



flip_rands:    proc;

dcl	     p ptr,
	     z bit(1) aligned,
	     t fixed bin;

	     p = p2; p2 = p3; p3 = p;
	     p = q2; q2 = q3; q3 = p;
	     p = p2s; p2s = p3s; p3s = p;

	     t = type2; type2 = type3; type3 = t;
	     t = s2; s2 = s3; s3 = t;
	     t = size2; size2 = size3; size3 = t;
	     t = scale2; scale2 = scale3; scale3 = t;

	     z = atom(2);
	     atom(2) = atom(3);
	     atom(3) = z;
	     code = fixed(atom(2) || atom(3),2);

	     z = z2; z2 = z3; z3 = z;
	     k = 2*s2 + s3;
	     reversed = ^reversed;
	     end;


adjust_refs:   proc;

	     if ^ p2 -> reference.shared
		then call adjust_ref_count(p2,-1);
	     if ^ p3 -> reference.shared
		then call adjust_ref_count(p3,-1);

	     end;

	end;
