/* ***********************************************************
   *                                                         *
   * Copyright, (C) Honeywell Information Systems Inc., 1982 *
   *                                                         *
   * Copyright (c) 1972 by Massachusetts Institute of        *
   * Technology and Honeywell Information Systems, Inc.      *
   *                                                         *
   *********************************************************** */


/* Procedure to generate a link

   Modified: 16 October 1972 by BLW for standard object segment
	Modified:	1 June 1976 by RAB for *system links	*/

compile_link: proc(string,grow,type) returns(fixed bin(18));

dcl	string char(*) aligned,
	grow bit(18) aligned,
	type fixed bin(15);

dcl	(def_pos,link_pos,n) fixed bin(18),
	(p,def_ptr,def_reloc_ptr,link_ptr,link_reloc_ptr) ptr,
	(block_type,seg_name,ent_name) bit(18) aligned;

dcl	(cg_static_$def_base,cg_static_$link_base,
	 cg_static_$def_reloc_base,cg_static_$link_reloc_base) ptr ext,
	cg_static_$zero_def bit(18) ext,
	cg_static_$use_type_6 bit(1) ext,
	(cg_static_$def_pos,cg_static_$link_pos) fixed bin(18) ext;

dcl	name_assign entry(char(*) aligned) returns(bit(18) aligned),
	reserve$read_lib entry(fixed bin(15)) returns(ptr);

dcl	(addrel,fixed,index,length,substr) builtin;

dcl	word(0:2) bit(36) aligned based;

dcl	reloc(0:2) bit(36) aligned based;

dcl	address	fixed bin(35) based;

dcl	1 fault_pair	aligned based,
	2 unused		unal bit(30),
	2 tag		unal bit(6);

%include token;
%include relbts;

	n = index(string,"$");

	if n = length(string)
	then do;

	     /* have seg_name$ */

	     ent_name = cg_static_$zero_def;
	     seg_name = name_assign(substr(string,1,length(string)-1));

	     if grow then block_type = "000000000000000110"b;
	     else block_type = "000000000000000011"b;

	     end;
	else do;

	     if grow
	     then if cg_static_$use_type_6
		then block_type = "000000000000000110"b;
		else block_type = "000000000000000101"b;
	     else block_type = "000000000000000100"b;

	     if n = 0
	     then do;

		/* no $ in external name */

		if type = 0 then seg_name, ent_name = name_assign(string);
		else do;

		     if block_type = "000000000000000110"b
		     then do;

			/* name is stat_$alpha format */

			p = reserve$read_lib(2);
			seg_name = name_assign(p -> token.string);
			end;

		     else do;

			/* have *system link */

			seg_name = "000000000000000101"b;
			end;

		     ent_name = name_assign(string);

		     end;
		end;
	     else do;

		/* have a$b form of name */

		seg_name = name_assign(substr(string,1,n-1));
		ent_name = name_assign(substr(string,n+1));

		end;
	     end;

	def_pos = cg_static_$def_pos;
	def_ptr = addrel(cg_static_$def_base,def_pos);
	def_reloc_ptr = addrel(cg_static_$def_reloc_base,def_pos);

	link_pos = cg_static_$link_pos;
	link_ptr = addrel(cg_static_$link_base,link_pos);
	link_reloc_ptr = addrel(cg_static_$link_reloc_base,link_pos);

	def_ptr -> word(0) = block_type || grow;
	if grow then def_reloc_ptr -> reloc(0) = rc_a_dp;

	def_ptr -> word(1) = seg_name || ent_name;
	def_reloc_ptr -> reloc(1) = rc_dp_dp;

	def_ptr -> word(2) = bit(def_pos,18);
	def_reloc_ptr -> reloc(2) = rc_dp;

	link_ptr -> address = -link_pos * 262144;	/* put in left half of word */
	link_ptr -> fault_pair.tag = "100110"b;		/* fi mod = 46 octal */
	link_reloc_ptr -> reloc(0) = rc_nlb;

	link_ptr -> word(1) = bit(fixed(def_pos+2,18),18);
	link_reloc_ptr -> reloc(1) = rc_dp;

	cg_static_$def_pos = def_pos + 3;
	cg_static_$link_pos = link_pos + 2;

	return(link_pos);
	end;
