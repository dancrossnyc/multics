:Info: translator_temp_:  2020-11-20  translator_temp_

Function:  This subroutine provides an inexpensive temporary storage
management facility for translators in the Tools Library.  It uses the
get_temp_segment_ subroutine to obtain temporary segments in the
user's process directory.  Each segment begins with a header that
defines the amount of free space remaining in the segment.  An entry
is provided for allocating space the temporary segment.  If the
requested space is not available in the temporary segment, the chain
is extended; the current and subsequent allocations come from that
extension segment.


:Entry: get_segment:  2020-08-09  translator_temp_$get_segment

Function:  This entry point should be called by each program
activation to obtain the first temporary segment used during that
activation.  Before the activation ends, the program should release
the temporary segment for use by other programs.  (See the
translator_temp_$release_all_segments entry point.)


Syntax:
   dcl translator_temp_$get_segment entry (char(*) aligned, ptr,
	fixed bin(35));
   call translator_temp_$get_segment (program_id, Psegment, code);


Arguments:
program_id
   is the name of the program that is using the temporary segment.
   (Input)  This name is printed out by the list_temp_segments
   command.
Psegment
   points to the temporary segment that was created. (Output)
code
   is a status code. (Output)


:Entry: allocate:  2020-08-09  translator_temp_$allocate

Function:  This entry point can be called to allocate a block of space
within a temporary segment.


Syntax:
   dcl translator_temp_$allocate entry (ptr, fixed bin) returns (ptr);
   Pspace = translator_temp_$allocate (Psegment, Nwords);


Arguments:
Psegment
   points to the temporary segment in which space is to be allocated.
   (Input/Output)  Psegment must be passed by reference rather than by
   value, because the allocation routine may change its value if there
   is insufficient space in the current temporary segment to perform
   the allocation.
Nwords
   number of words to be allocated. (Input)  It must not be greater
   than sys_info$max_seg_size-32.
Pspace
   points to the space that was allocated. (Output)  The returned
   space contains all "0"b bits.


Notes:
A program that must perform many allocations can include the
translator_temp_alloc.incl.pl1.  This include file contains a PL/I
quick internal procedure called allocate that can be called like
translator_temp_$allocate as shown above.


:Entry: empty_all_segments:  2020-11-20  translator_temp_$empty_all_segments

Function:  This entry point can be called by a program activation to
empty storage allocated in all temporary segments (obtained earlier by
calling translator_temp_$get_segment or $get_next_segment).  All except
the first temporary segment are released back to the get_temp_segment_
pool.  Storage in the given temporary segment is freed, and its
no-free storage area is initialized to all "0"b bits.


Syntax:
   dcl translator_temp_$empty_all_segments (ptr, fixed bin(35));
   call translator_temp_$empty_all_segments (Psegment, code);


Arguments:
Psegment
   points to one of the temporary segments obtained previously.
   (Input/Output)  Psegment must be passed by reference rather than by
   value, because the empty mechanism may change its value if the
   input value points to an extension segment in the list of temporary
   segments.  Upon return, Psegment points to the first segment of the
   translator_temp_ list.
code
   is a status code. (Output)


:Entry: get_next_segment:  2020-08-09  translator_temp_$get_next_segment

Function:  This entry point can be called by a program activation to
obtain an additional temporary segment for allocations.  The new
segment is chained to the initial temporary segment returned by
translator_temp_$get_segment.


Syntax:
   dcl translator_temp_$get_next_segment (ptr, ptr, fixed bin(35));
   call translator_temp_$get_next_segment (Psegment, Pnew_segment,
        code);


Arguments:
Psegment
   points to one of the temporary segments obtained previously.
   (Input)
Pnew_segment
   points to the new temporary segment. (Output)
code
   is a status code. (Output)


:Entry: release_all_segments:  2020-08-09  translator_temp_$release_all_segments

Function:
This entry point releases all of the temporary segments used by a
program activation for use by other programs.  It truncates these
segments to conserve space in the process directory.  It should be
called by each program activation that uses temporary segments before
the activation is terminated.


Syntax:
   dcl translator_temp_$release_all_segments entry (ptr,
      fixed bin(35));
   call translator_temp_$release_all_segments (Psegment, code);


Arguments:
Psegment
   points to any one of the temporary segments. (Input)
code
   is a status code. (Output)


:Entry: release_segment:  2020-08-09  translator_temp_$release_segment

Function:
This entry point releases one of the temporary segments used by a
program activation.  It truncates the segment to conserve space in the
process directory.


Syntax:
   dcl translator_temp_$release_segment entry (ptr, fixed bin(35));
   call translator_temp_$release_segment (Psegment, code);


Arguments:
Psegment
   points to the temporary segment to be released. (Input)
code
   is a status code. (Output)


:hcom:

/****^  HISTORY COMMENTS:
  1) change(2020-08-13,GDixon), approve(2020-11-30,MCR10083),
     audit(2020-12-20,Swenson), install(2020-12-20,MR12.6g-0049):
     A) Create info segment documenting all translator_temp_ entrypoints.
                                                   END HISTORY COMMENTS */
