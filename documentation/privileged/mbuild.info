:Info: mbuild: mb:  2021-02-14  mbuild, mb

Syntax as a command:  mb {-control_args}


Function: A subsystem of requests which build and prepare to install
all original-content files in the working directory (known as the
install directory).  Original-content files include: program source
files, include files, info segments, bind files, source archive(s) for
a new bound segment.


The directory may contain a build script file giving details of the
installation.  This file uses the entryname of the install directory,
followed by a .mb suffix.  For example: ...>MCR10010>MCR10010.mb

For information about the Build Script Language,
type:
   help build_script.gi


Control arguments:
-set_log_dir DIRNAME, -sld DIRNAME
   sets the log directory used by the update_seg initiate command.
-request STR, -rq STR
   executes STR as an mbuild request line before entering the
   request loop.
-request_loop, -rql
   enters the mbuild request loop. (Default)
-no_request_loop, -nrql
   does not enter the request loop.


-abbrev, -ab
   enables abbreviation expansion of request lines.
-profile path, -pf path
   specifies the pathname of the profile to use for abbreviation
   expansion.  The suffix "profile" is added if necessary.  This
   control argument implies -abbrev.
-no_abbrev, -nab
   does not enable abbreviation expansion of request lines.  (Default)


-scan_read, -scrd
   perform a scan of the installation directory before entering the
   request loop.  If a build script file is found, ask the user
   if it should be read.  (default)
-scan, -sc
   perform a scan of the installation directory before entering the
   request loop.  Do not ask about, or actually read, any build script
   file.
-no_scan, -nsc
   omit the scan request before entering the request loop.


-prompt STR, -pmt STR
   sets the request loop prompt to STR.  The default is:
         ^/mbuild^[ (^d)^]:^2x
-no_prompt, -npmt
   suppresses the prompt for request lines in the request loop.


:[Info]: summary.topic: summary: 2020-07-05  mbuild Requests

List of requests:
   For details of any request, type:  help REQUEST_NAME
list, ls
   List files in the working directory (the installation directory).
scan, sc
   Scan the working directory for segments to build.
read, rd
   Read a description of the build operation from a build script file.
analyze, az
   Analyze information gathered by scan or read requests.
progress, pg
   Report progress toward completing build and install tasks.  List
   requests that are still needed.
print, pr, p
   Describe the build operation, either before or after an analyze
   request.  Print other mbuild settings.  Display mbuild's threaded
   lists of segments being installed.
set
   Set description or log directory; set library information for
   segments in a build operation.
save, sv
   Save information about the build operation into a build script file.
compile, comp
   Compile source segments to create their derived Unbound_obj
   segments.  Add extra names to unbound objects.
archive_prep, arch
   Update bound segment source/object archives; bind object archives.
install_ec, inst
   Create a Build_exec_com file to install segments into their target
   library.
clean, cl
   Remove any derived segments found/created by prior requests.


compare, cmp
   Compare original and replacement source, include, info, or bindfile
   segments.
history, hcom
   Apply history_comment command to source, include, info, or bindfile
   segments.
verify, vi
   Check format of info segments in the installation directory.
xref
   Display library source files that reference include segments in the
   installation directory.
lib_names, libs
   Display library paths with preferred library name.
library_descriptor, lds
   Display information about the multics_libraries_ descriptor.
library_pathname, lpn
   List pathnames in the library which match a given starname.
seg_type, seg
   Describe mbuild build/install details or paradigm for a given
   segment.
paradigm, pdm
   Print information about an mbuild build/install paradigm.


help, h
   Obtain detailed information on the subsystem.
.
   Identify the subsystem.
?
   Produce a list of the most commonly used requests.


:[Info]: scan: sc:  2020-01-25  scan, sc

Syntax:  scan {-control_args}
         sc   {-control_args}


Function: scans the working directory to identify segments to build and
install.


Control arguments:
-query, -qy
   for the first scan in an mbuild invocation, check for a
   build script file in the installation directory.  If one is found,
   ask whether this file should be read following the scan operation.
   (default)
-no_query, -nqy
   do not ask about, or actually read, any build script file.


:[Info]: read: rd:  2020-01-26  read, rd

Syntax:  read {-control_args}
         rd   {-control_args}


Function: reads information about the build operation from a build
script file.  If reading portions of the file containing statements
describing segments in the installation directory, that information
replaces data from any earlier scan, read, or analyze request.


Control arguments:
-all, -a
   Read the entire file.  Segment information from an earlier scan,
   read or analyze request is replaced by segment information in the
   file.  This replacement data must then be analyzed.  (default)
-description, -desc
   Read only the saved Description: at the top of the build script
   file.  Segment information obtained by earlier scan, read, and
   analyze requests is preserved.


-print, -pr
   Print segment information obtained by this read request. (default)
-no_print, -npr
   Do not print data read by this request.
-brief, -bf
   Do not report an error if the build script file does not exist.


-debug LEVEL, -db LEVEL
   LEVEL=0: disable debugging when reading the file. (default)
   LEVEL=1: display the matching reduction as input tokens in the file
	  are matched.
   LEVEL=2: display all input tokens before parsing begins; then
	  perform level 1 debugging.


:[Info]: analyze: az:  2020-01-26  analyze, az

Syntax:  analyze
         az


Function: analyzes information gathered by scan or read requests.
Knowledge of how programs and documentation are stored in libraries
like the Multics Libraries reshapes mbuild's view of segments in the
install directory.


Control arguments:
-clean, -cl
   Run the clean request if analysis completes successfully.  The
   installer is asked whether to delete the derived-content segments
   found by the analysis. (default)
-no_clean, -ncl
   Omit the clean request when analysis completes successfully.
-progress, -pg
   Run the progress request when analysis completes successfully.
   (default)
-no_progress, -npg
   Omit the progress request when analysis completes successfully.


:[Info]: print: pr: p:  2019-03-19  print, pr, p

Syntax:  print [INFORMATION_TYPE] {-control_args}
         pr    [INFORMATION_TYPE] {-control_args}
         p     [INFORMATION_TYPE] {-control_args}


Function: prints information about a build operation, before or after
an analyze request.


Arguments:
   INFORMATION_TYPE may be one of the following.
-description, -desc
   print the current description added by the installer for this
   installation directory.  The description is specified using set
   request, or by editing the Build Script file to add/change the
   Description: lines at the top of this file.
-directory, -dir
   print the current installation directory pathname.
-log_dir, -ld
   print the current log directory, used in the update_seg initiate
   request.  This directory contains segments describing the
   installation: Installations.log, Installations.info


-scan, -sc
   print data gathered by most recent scan of the install directory,
   or read of the build script file. (default if an analyze request
   has not been issued.)
-analyze, -az
   print installation data reshaped by an analyze request.  (default
   after an analyze request is issued.)
-new
   print original-content segments found by a scan of the install
   directory that are not mentioned in the build script.  When a
   read request loads the build script into mbuild, it reports this
   same possible omission of segments; print -new allows the installer
   to re-display this data.


-unknown, -unk
   print original-content segments found by a scan of the install
   directory that have an UNKNOWN library designation.
-Seg ENTRYNAME, -seg ENTRYNAME
   print all information about a given segment in the installation
   directory.


-list {LIST_NAME}, -ls {LIST_NAME},
-thread {LIST_NAME}, -th {LIST_NAME}
   print all entries on one of the threaded lists maintained by mbuild.
   LIST_NAME may be "all" to display items on all threaded lists; or
   one of the IDs given in "List of thread selectors" below.  "all" is
   the default if no LIST_NAME is given.
-save_format, -save
   print installation data for the -description or -analyze arguments
   as it would appear in the build script file.  With -analyze, the
   description is displayed if a description has been set.


Control arguments:
   Arguments to select information to be displayed for each structure.
   Structure varieties include: Seg() representing an actual segment;
   and BOUNDOBJ, UNBOUNDOBJ, and COMPILE which manage relationships
   between segments.
-all, -a
   displays all possible information for each structure type.
-structure
   displays type of structure: Seg, BOUNDOBJ, UNBOUNDOBJ, or COMPILE,
   preceding the segment's name.  If both -structure and -type are
   given, the structure and type are shown in combination:
   Seg(Include).  If neither are given, only the segment name is
   displayed.


-type, -tp
   displays the segment type based upon entryname suffix.  The
   segment's name follows this type value.  Possible values are
   returned by the request:  seg_type -type
-library, -lb
   display the target library.directory into which the segment will be
   installed.
-header, -he
   displays the operation (ADD, REPLACE, DELETE, or UPDATE); and
   compiler used to produce derived content from the source segment.
-pointer, -ptr
   displays type/name of other structures pointed to by the displayed
   structure.


-archive, -ac
   displays the target archive name in which the segment will be
   installed.  This is meaningful for source or object segments which
   are components of a bound segment archive.
-thread_base, -Tb
   displays information about threaded lists anchored in the structure.
   For example, a Seg(source_arch) anchors a list of Seg(source)
   components targeted for updating in that archive.
-thread_data, -Td
   displays information about threaded lists in which the structure is
   a member.
-name, -nm
   display names to be added to, or deleted from, the segment as it is
   installed in the library.


List of negative control arguments:
   For some types of information, extra information is displayed by
   default.  The following control arguments turn off display of
   unwanted data.
-no_structure
   stops output of structure information if it is displayed by default,
   or if -all was given earlier in request line.
-no_type, -ntp
   stops output of type information if it is displayed by default, or
   if -all was given earlier in request line.
-no_library, -nlb
   stops output of library information if it is displayed by default,
   or if -all was given earlier in request line.


-no_header,  -nhe
   stops output of header information if it is displayed by default, or
   if -all was given earlier in request line.
-no_archive, -nac
   stops output of archive information if it is displayed by default,
   or if -all was given earlier in request line.
-no_pointer, -nptr
   stops output of pointer information if it is displayed by default,
   or if -all was given earlier in request line.
-no_thread_base, -nTb
   stops output of thread anchor information if it is displayed by
   default, or if -all was given earlier in request line.


-no_thread_data, -nTd
   stops output of thread membership information if it is displayed by
   default, or if -all was given earlier in request line.
-no_name, -nnm
   stops output of names added/removed information if it is displayed
   by default, or if -all was given earlier in request line.


List of thread selectors:
all
   Display structures on all populated threads.
BOUNDOBJ, BND
   All BOUNDOBJ structures.
COMPILE, COMP
   All COMPILE structures.
UNBOUNDOBJ, UNBND
   All UNBOUNDOBJ structures.
Seg, seg
   All Seg structures.


Unbound_obj, Unb
   All Seg(Unbound_obj) structures following the Unbound_obj paradigm.
Bound_obj, Bnd
   All Seg(Bound_obj) structures following the Bound_obj paradigm.
bindfile, bind
   All Seg(bindfile) structures following the bindfile paradigm.
object_arch, oArch
   All Seg(object_arch) structures following the object_arch paradigm.
source_arch, sArch
   All Seg(source_arch) structures following the source_arch paradigm.
source, src
   All Seg(source) structures following the source paradigm.  This
   excludes sources derived from 1st step of a 2-step compile (sources
   on the INTERMEDIATE thread).


target_only, target
   All Seg(...) structures following the target_only paradigm.
listing, list
   All Seg(listing) structures following the listing paradigm.
mbuild_support, support, sup
   All Seg(Build_xxx) structures following the mbuild_support paradigm.
object_x_only, o.x
   All Seg(...) structures following the object_x_only paradigm.
scan, sc
   Original-content segments found in install dir before building.
INTERMEDIATE, inter
   Some Seg(source) structures that aren't installed because their
   content is derived from other Seg(source) files.


:[Info]: progress: pg:  2019-07-30  progress, pg

Syntax:  progress
         pg


Function: reports progress toward completing build and install tasks.


:[Info]: set:  2020-04-20  set

Syntax:  set -control_args


Function: sets the installation description or log directory for an
installation; or sets the target library or library.directory for a
given segment.


Control arguments:
-description, -desc
   prompts for a new description of the installation.  The description
   ends with a line containing only a period (.) character.
   The new description value is saved in a build_script file to
   preserve this setting across mbuild invocations.
-log_dir DIRNAME, -ld DIRNAME
   sets the log directory used by the update_seg initiate command.
-Seg SEG_NAME -control_arg,
-seg SEG_NAME -control_arg
   selects a segment to modify.  The star convention may be used
   to select several segments to modify.  The -control_arg specifies
   which attribute of the Seg structure to modify.  These are described
   below under "Control arguments for -seg".


Control arguments for -seg:
-library LIBRARY, -lb LIBRARY
   gives a new value for the Seg().library attribute.  Use one of the
   formats: <lib-name>.<dir-name>  or  <lib-name>  or  <dir-name>


List of preferred library names:
   <lib-name>.<dir-name> combinations that are short and readily
   identifiable.  Note that hard.i and mcs.i reference a directory
   named info, but it contains hardcore/communication configuration
   files and maps, not info segments.  To see directories named by
   these libraries, enter the request: libs


:[Info]: save: sv:  2020-01-25  save, sv

Syntax:  save {-control_arg}
         sv   {-control_arg}


Function: save information about the current build operation to a
build script file.  In order to save full build information, the
analyze request must have been run since the last scan or read
request.


Control arguments:
-all, -a
   save complete information about the current build operation.
   (default)
-description, -desc
   save only the description set for this installation into the
   Description field of the build script file.  Any other content
   of the segment is unchanged.  This control may be given to save the
   description before an analyze request has successfully completed.


:[Info]: compare: cmp:  2020-01-26  compare, cmp

Syntax:  compare {SEG_NAME} {-cpa_control_args}
         cmp     {SEG_NAME} {-cpa_control_args}
         compare {SEG_NAME} {-brief}
         cmp     {SEG_NAME} {-brief}


Function: compares original source, include, info, and bindfile
segments with replacement segments being installed.


Arguments:
SEG_NAME
   names the segment(s) to compare.  The name includes the language
   suffix (e.g., source.pl1).  If not given, all source, include,
   info, and bindfile segments being REPLACEd are compared.  The
   star convention may be used to select several segments.


Control arguments:
   Any control argument accepted by compare_ascii (cpa) command may
   be given, except -original and -no_original.  For segments being
   REPLACEd, the compare request automatically adds:
      -original LIBRARY_PATH
   giving path in the library of the segment being replaced.

-brief, -bf
   use the Multics compare active function to identify replaced
   segments whose contents differs from their corresponding library
   version.  Only the file name and corresponding library path is
   displayed.


:[Info]: history: hcom:  2020-07-05  history, hcom

Syntax:
   history HCOM_OPERATION {SEG_NAME} {HCOM_ARGS_AND_CONTROL_ARGS}
   hcom    HCOM_OPERATION {SEG_NAME} {HCOM_ARGS_AND_CONTROL_ARGS}


Syntax as an active request:
   [history HCOM_OPERATION {SEG_NAME} {HCOM_ARGS_AND_CONTROL_ARGS}]
   [hcom    HCOM_OPERATION {SEG_NAME} {HCOM_ARGS_AND_CONTROL_ARGS}]


Function: applies the history_comment command to original-content
source, include, info, and bindfile segments in the installation
directory.


Arguments:
HCOM_OPERATION
   names the history_comment operation to perform on each segment.  See
   "List of hcom operations" below.
SEG_NAME
   names the original-content segment(s) to process.  The name includes
   the language suffix (e.g., probe.pl1).  If not given, all
   original-content source, include, info, and bindfile segments in the
   installation directory are processed.  The star convention may be
   used to select several segments.


HCOM_ARGS_AND_CONTROL_ARGS
   give any arguments and control arguments accepted by the:
      history_comment HCOM_OPERATION
   command.  For argument details, type:
      .. help hcom.HCOM_OPERATION
   where HCOM_OPERATION is an operation from "List of hcom operations"
   below.  Use double-quote characters around any Argument containing
   special characters.


List of hcom operations:
   For details about any hcom operation, type:
      .. help hcom.HCOM_OPERATION
add
   adds a new history comment to a source program.
add_field, af
   add missing fields to an existing history comment.
replace_field, rpf
   replaces fields in an existing history comment.
display, ds
   displays one or more history comments in a source program.
format, fmt
   reformats history comments in a source program, placing them in
   standard form.


check, ck
   checks history comments in a source program prior to its submission
   for installation to ensure that all fields except the INSTALL_ID are
   present.
compare, cmp
   displays the differences, if any, between the source and original
   modules.
exists
   checks to see if a history comment with certain attributes exists.
get
   gets one or more field values from selected history comments.
install
   checks history comments in a source program prior to its
   installation for completeness, and updates the INSTALL_ID field.


Notes on format:  Following is a pl1 history comment example.
Other languages will have the comment delimiters appropriate for their
respective language.

 /****^  HISTORY COMMENTS:
 1)  change(1985-05-12, HSmith), approve(1985-05-25, MCR2355),
     audit(1985-05-26, Jones), install(1985-05-30, MR11.0-3382):
     Increased size of test_array to eliminate subscript error.
 2)  change(1985-05-28, HSmith), approve(1985-05-29, MCR2356),
     audit(1985-06-05, Rogers), install(1985-06-10, MR11.0-3384):
     Added the -brief and -long control arguments.
				  END HISTORY COMMENTS */


To determine if prior history comments exist in the module, the source
module is checked for a line containing the history comment block
beginning; i.e., a line beginning with the appropriate comment
delimiter, containing the word "HISTORY", and containing the word
"COMMENTS:".  If this is found, the program then checks for the
history comment block ending; i.e., a line containing "END HISTORY
COMMENTS".


List of history comment fields:
   The fields within a given history comment are identified as follows:

   NO) change  (CHANGE_DATE,  CHANGE_PERSON_ID),
       approve (APPROVE_DATE, APPROVE_ID),
       audit   (AUDIT_DATE,   AUDITOR_PERSON_ID),
       install (INSTALL_DATE, INSTALL_ID):  SUMMARY

   The  fields  in a history comment are named as described below.  The
   sample  validation  routine, hcom_default_validate_, validates field
   formats  used  by the Multics Development Center as described below.
   However,  each  site  may provide its own validation routines to
   tailor the contents of the user-settable field values.


NO
   is  the  number  of  the  history  comment.   Comments  are numbered
   sequentially in chronological order,  starting with 1.  (supplied by
   hcom)
CHANGE_DATE
   date  (yyyy-mm-dd) on  which history  comment was  first added  to
   the source module.  (supplied by hcom)
CHANGE_PERSON_ID
   person_id of the person who added the history comment.  (supplied by
   hcom)
APPROVE_DATE
   date  (yyyy-mm-dd)  on  which  an  approval  value  was supplied for
   a history comment.  (supplied by hcom)


APPROVE_ID
   identifier  authorizing the change.  The default validation routine
   expects  an  identifier  in  the  form "TYPEnnnn" for MCRs (Multics
   Change  Request),  PBFs  (Post-installation Bug Fix associated with
   MCRnnnn)   or  MECRs  (Multics  Emergency  Change  Request);  i.e.,
   MCR6734,  PBF6734,  MECR0102.   For  critical  fixes the identifier
   should  be  in  the  form  of fix_nnnn or fix_nnnn.ds.  The maximum
   length of this field is 24 characters.  (supplied by user)
AUDIT_DATE
   date (yyyy-mm-dd) audit field added  to history comment.  (supplied
   by hcom)
AUDIT_PERSON_ID
   person_id of the person who audited the source module.  (supplied by
   hcom)


INSTALL_DATE
   date (yyyy-mm-dd)  install field added to  history comment.
   (supplied by hcom)
INSTALL_ID
   value  identifying  either a specific installation or the installer
   of  a  critical  fix.   The  default  validation routine expects an
   identifier  in  the  form  "MRrel-nnnnn",  consisting  of a release
   number  and installation sequence counter, e.g., MR12.0-00234.  For
   a  critical  fix, the validation routine expects a person-id naming
   the person who installed the fix.  The maximum length of this field
   is 24 characters.  (supplied by user)
SUMMARY
   brief  description of  the change  made to  the module.   This field
   contains  text  (up  to  2000  characters)  and  is  not  validated.
   (supplied by user)


Notes on typical usage: The following is a typical usage pattern
expected for the various operations of the history_comment command.

o    The developer makes a change to the source module.  He could add a
     new history comment  by hand (perhaps using an  Emacs extension to
     prompt for  field values).  Or  after adding the  change, he could
     use  the history_comment add  operation to add  a new comment.   A
     typical command line might be:

        hcom add prog.pl1


o    The developer may not have had approval for the change at the time
     the history  comment was added.   When approval is  gained, he can
     use  the history_comment  add_field operation  to add  the approve
     field.  For example:

        hcom af prog.pl1 -approve MCR7235


o    The developer  can display the  history comments in  a program, or
     even compare the comments in a  modified version of a program with
     those in the library copy of the program.  For example:

        hcom display prog.pl1 icpt

     would display the  incomplete history comments  added to  a source
     module, while

        hcom compare prog.pl1

     would display  the differences between  the source module  and  an
     earlier version residing in the library.


o    When the  change is audited, the auditor  uses the history_comment
     add_field  operation  to  supply  an  audit  field  for all new or
     incomplete history comments.  For example:

        hcom af prog.pl1 -audit

o    When the developer is ready to submit the change for installation,
     he  uses the  history_comment check  operation to  ensure that all
     comment fields except the install field have been supplied in each
     changed  module.       Since  the  developer  has  a  site-defined
     validation  routine  called   hcom_site_validate_  in  his  object
     search rules, this routine is used to   fully validate  the fields
     of all comments.

        hcom check prog.pl1


o    When  the installer  receives the  modules in  an installation, he
     uses  the history_comment  install  operation  to ensure  that new
     history comments describing the  changes are present.  The install
     operation also adds an identifier  to each new comment, indicating
     in which installation it was installed.  The installer can use a
     special library-defined validtion routine to perform special
     field validations.  In the example below, this library validation
     routine is called hcom_mdc_validate_.

     hcom install prog.pl1 -vdt hcom_mdc_validate_ -install MR12.0-0023


Notes on validation routine:
A site can define a site-wide history comment validation routine to
validate the contents of the APPROVE_ID and INSTALL_ID fields of
history comments.  This routine is called hcom_site_validate_.  If it
is found in the user's object search rules, the history_comment
command will automatically use this validation routine instead of
using hcom_default_validate_.  Also, the -validate control argument
allows use of a user-supplied validation subroutine to validate the
APPROVE_ID and INSTALL_ID fields.  This user routine can have any
name.


The calling sequence of both the hcom_site_validate_ subroutine and
user-written routines is shown below.  For a user-written routine, the
name hcom_site_validate_ would be replaced with whatever name the user
chooses for the routine.


Notes on syntax of validation routine:
   dcl validation_rtn_ entry (char(*) var, char(*) var, char(*) var,
       bit(1), char(*) var, char(*) var);

   call validation_rtn_ (caller, field_name, input_value,
        result_bit, canonical_value, field_type);


Notes on arguments for validation routine:
caller
   is the name of the calling program, on whose behalf the validation
   routine should report errors, ask questions, etc.  (Input)
field_name
   is the name of the field being validated.  This argument may have a
   value of either APPROVAL_FIELD_NAME or INSTALL_FIELD_NAME.  These
   named constants are declared in hcom_field_names.incl.pl1.  (Input)
input_value
   is the field value supplied by the user.  (Input)


result_bit
   is either "1"b if the input value is valid or "0"b if the input
   value is invalid.  (Output)
canonical_value
   is the canonical text form of the field_name and input_value.
   (Output)
field_type
   canonical text form of the field_name for use in error messages.
   (Output)


List of related info segments:
   Additional information may be obtained on the history comment
   operations by referring to the following info segments:

history_comment.add.info  (hcom.add.info)

history_comment.add_field.info  (hcom.af.info)

history_comment.check.info  (hcom.ck.info)

history_comment.compare.info  (hcom.cmp.info)

history_comment.display.info  (hcom.ds.info)


history_comment.exists.info  (hcom.exists.info)

history_comment.format.info  (hcom.fmt.info)

history_comment.get.info  (hcom.get.info)

history_comment.install.info  (hcom.install.info)

history_comment.replace_field.info  (hcom.rpf.info)


:[Info]: compile: comp:  2019-01-29  compile, comp

Syntax:  compile {SEG_NAME} {-control_args}
         comp    {SEG_NAME} {-control_args}


Function: compiles source segments to create their derived Unbound_obj
segments.


Arguments:
SEG_NAME
   names a single segment to compile.  The name includes the language
   suffix (e.g., source.pl1).  If not given, all segments in the
   COMPILE list are compiled.  Useful to recompile a single source
   after correcting a compilation error.  The star convention is
   supported.


Control arguments:
   If given, the following control arguments are added to any compile
   option given in the source statement for each segment.
-list, -ls
   for a PL/I compilation, produces a source program listing followed
   by a list of all the names used in the compilation, followed by an
   assembly-like listing of the compiled object program.  Listing
   produced by other compilers may have other content.
-table, -tb
   for a PL/I compilation, produces an Unbound_obj output containing a
   full symbol table for use by probe and debug commands.


:[Info]: archive_prep: arch:  2021-02-14  archive_prep, arch

Syntax:  archive_prep {-control_arg}
         arch	  {-control_arg}


Function: updates bound segment source/object archives.  Sorts updated
archive components into alphanumeric order within their archive.
Binds object archives to produce a bound segment.


Control arguments:
-list, -ls
   produces a listing segment whose name is derived from the name of
   the bound object segment plus a suffix of list.  The listing segment
   is generated to dprint; it contains the bound segment's bind control
   segment (see "Notes on bindfile"), its bind map, and that
   information from the bound object segment printed by the
   print_link_info command.  You can't invoke -list with -map.  In the
   absence of -list or -map, no listing segment is generated.
-map
   produces a listing segment (with the suffixes list and map) that
   contains only the bind map information.  It is incompatible with
   -list.  In the absence of -list or -map, no listing segment is
   generated.


-no_sort, -ns
   Most bind files have an Order statement controlling order in which
   object components appear in the output bound segment produced by
   the bind command.  For bound segments having no bind file or a bind
   file not using the Order statement, the bind command sequences
   object components by their order of appearance in input archives.
   Therefore, -no_sort should be used to suppress sorting of archives
   for such bound segments.


:[Info]: install_ec: inst:  2019-07-21  install_ec, inst

Syntax:  install_ec {-control_arg}
         inst	{-control_arg}


Function: creates the Build_exec_com file, containing update_seg
commands that install the segments identified in the Build_script.


Control arguments:
-list, -ls
   installs any .list segments found in the installation directory
   into the LIBRARY_NAME.listings target directory.


:[Info]: clean: cl:  2019-07-24  clean, cl

Syntax:  clean {-control_args}
         cl    {-control_args}


Function: Removes derived segments found/created by prior mbuild
requests, or by the update_seg install command.  Use a control argument
to reduce or widen the range of files removed.


Control arguments:
-all, -a
   Removes all files created by any mbuild request, except the
   Build_script file (created by an earlier save request).  Used
   when starting over on a build effort when compile or archive_prep
   requests report errors; or after: update_seg de_install
-installed, -inst
   Removes derived-content segment created by a build effort, leaving
   only: original-content segments; Build_script; Build_exec_com; and
   segments created by running the update_seg install command: the
   Build_io (.mb.io) installation object file; and the Build_log
   (.mb.il).  (default if neither -all nor -list is given.)
-listings, -list, -ls
   Removes only listings (.list segments) created by the build effort.


-intermediate, -inter
   Removes only intermediate source segments (those created by the 1st
   step of a 2-step translation.
-query_all, -qya
   Lists segments to be removed and asks queries whether they should be
   deleted or not.  (default)
-no_query_all, -nqya
   Removes segments without a query.  Segments removed are still
   listed.


:[Info]: lib_names: libs:  2019-07-22  lib_names, libs

Syntax:  lib_names {-control_arg}
         libs      {-control_arg}


Function: Display library paths with preferred library name.


Control arguments:
-library, -lb
   Display library root directories defined in the current library
   descriptor, and the preferred library name identifying each
   directory. (default)
-directory, -dir
   Display the preferred <dir-name> components for 2-component library
   names <lib-name>.<dir-name> used by mbuild.
-analyze, -az, -analysis, -anal
   Show how preferred library names were devised for each root
   directory of the current library descriptor.


:[Info]: paradigm: pdm:  2019-06-10  paradigm, pdm

Syntax:  paradigm {paradigm name} {-control_args}
         pdm      {paradigm name} {-control_args}


Syntax as an active request:  [pdm paradigm_name {-control_args}]


Function: displays information about build paradigms, the procedures
and policies for building a given type of segment, and installing it
into the Multics Libraries.


If invoked without args, displays a 3-line description of the known
build paradigms including: name, purpose and example segments using
that paradigm.

If invoked with a paradigm_name and no control_args, displays a longer
description of that paradigm.

As an active function, specific information about a given paradigm is
returned.


Arguments:
operation
   is "paradigm" or "pdm".
paradigm_name
   names a paradigm to be displayed.  This is optional when invoked as
   a command, but required when used as an active function.


Control arguments:
-all, -a
   displays all information for the paradigm.
-name, -nm
   displays the paradigm name.
-purpose
   displays the purpose of the paradigm.
-example
   displays an example segment that is built or installed using the
   paradigm.
-steps
   displays steps performed as part of this build paradigm.


:[Info]: seg_type: seg:  2019-06-10  seg_type, seg

Syntax:  seg_type {seg_name} {-control_args}
         seg      {seg_name} {-control_args}
         seg_type -for_paradigm paradigm_name
         seg      -for_paradigm paradigm_name


Syntax as an active request:  [seg_type seg_name {-control_args}]
			[seg      seg_name {-control_args}]


Function:  displays information about the different types of segments
installed in the Multics Libraries.

If invoked without args, summarizes known segment types installed in
the Multics Libraries.  This includes a starname selecting a group of
segments, and characteristics of segments in the group.

If invoked with a seg_name and no control_args, displays full
information about building and/or installing that segment.

As an active function, returns selected information about build a given
segment.


Arguments:
operation
   is "seg_type" or "seg"
seg_name
   names a segment whose build/install information is displayed.  This
   argument is optional when invoked as a command, but required when
   used as an active function.


Control arguments:
-for_paradigm paradigm_name, -fpdm paradigm_name
   selects all segment types built using the given paradigm.  This
   control argument may not be used as an active function.
-all, -a
   displays all information for the build type.
-name, -nm
   displays a starname that matches segments in the build type.
-description, -desc
   displays a title for segments matching the starname.
-type, -tp
   displays the <seg-type> value given by mbuild in its
   Seg(<seg-type) structures for segments having the build type..
-library, -lb
   displays library in which this type of file is installed.


-compiler
   displays compiler command name used in building the segment.
-option, -op
   displays default compiler option(s) used in building the segment.
-isuffix, -isfx
   displays suffix of any intermediate files generated by the compiler.
   For example, the reductions compiler: generates a .pl1 file; invokes
   pl1 to compile this file; and leaves the .pl1 file in working
   directory as a debugging aid.
-osuffix, -osfx
   displays suffix (if any) of object segment generated by the
   compiler.


-paradigm, -pdm
   displays name of the paradigm used in building the segment.
-steps
   displays steps performed as part of this build paradigm.


:[Info]: help: h:  2020-04-24  help, h

Syntax:  help {TOPIC} {-control_args}
         h    {TOPIC} {-control_args}


Function: display information about a topic related to the mbuild
system or its requests.


Arguments:
TOPIC
   is an mbuild request name; or build_script to display information
   about the Build Script Language.  If not given, a summary of mbuild
   requests is printed.


Control arguments:
-all, -a
   displays all information available without paragraph or section
   prompts.
-brief, -bf
   displays a summary of request syntax, arguments, and control
   arguments.
-control_arg ARG_NAME, -ca ARG_NAME
   displays full information about the given argument or control
   argument.
-header, -he
   displays full pathname of info segment matching TOPIC.


:[Info]: verify: vi:  2021-02-14  verify, vi

Syntax:  vi {SEG_NAME} {-verify_info_control_args}
         vi -rules AREA


Function: checks format of info segments; or displays rules and
guidelines for info segment formatting and section titles.


Arguments:
SEG_NAME
   name the segment(s) to check.  The .info suffix must be given.
   The star convention may be used to select several segments.
   If SEG_NAME is not given, all info segments are checked.
   No SEG_NAME is permitted if -rules is given.


Control arguments:
   Any control argument accepted by verify_info (vi) command may
   be given.  Commonly-used controls are described below.  For a
   full list of controls, type:  help verify_info -brief
-names, -nm
  add names required by guidelines if missing from an info segment.
  Reorder names following guidelines.  If names exist that conflict
  with guidelines, ask user for permission to remove those names.
  If removal not granted, move conflicting names to end of name list.
  Name changes are listed in informational messages.
-no_names, -nnm
  suppress name additions, removals, and reordering.  Error messages
  report names that are missing, conflict with guidelines, or need to
  be reordered.  (default)


-force_names, -fnm
  change names to follow all guidelines without user queries.
-rules {AREA}
  displays verify_info guidelines and rules for info segment structure
  and format.  See "List of rule areas" below.


List of rule areas:
   The -rules AREA operand may be any of the following.
all, a
  displays all rules and guidelines used by verify_info. (default)
file, f
  displays guidelines for supported file structures (allowed order of
  :Info: :[Info]: :Entry: and :hcom: block divider lines within an
  info segment).
block, bk
  displays rules used to determine the kind of each info block
  (e.g., command or active function, subroutine, subsystem request,
  etc.).


section, scn
  displays Multics standard info segment section titles, and a list of
  obsolete or deprecated titles with a preferred replacement.
KIND_OF_INFO_BLOCK
  displays section titles typical for a particular kind of info block
  including the usual order of appearance within the block of each
  title.  See "List of info block kinds" below.


List of info block kinds:
  The -rules KIND_OF_INFO_BLOCK value may be any of the following.
all_kinds, ak
  display section titles typical of all of the following block kinds.
command, cmd
  display section titles used in info blocks describing commands
  and/or active functions.
general_info, gi
  display section titles used in info blocks describing general
  information.


subsystem, ss
  display section titles used in info blocks describing subsystem
  requests and/or active requests; subsystem request summary; or other
  subsystem topic.
request, req
  display section titles used in info blocks describing subsystem
  requests and/or active requests.
topics, topic
  display section titles used in info blocks describing subsystem
  topics (information not a request description or summary of
  requests).


subroutine, subr
  display section titles used in info blocks describing a subroutine
  or function.  This includes a subroutine introduction block, and
  blocks describing a subroutine entry point.
io_module, io
  display section titles used in info blocks describing an I/O module;
  or one of its setup operations (open_file, close_file, or detach);
  or one of its control orders.


:[Info]: xref:  2021-02-15  xref

Syntax:  xref {SEG_NAME} {-pcref_control_args}


Function: displays crossref items (source files) that reference
include files found in the installation directory.


Arguments:
SEG_NAME
   name the segment(s) to check.  The .incl.* suffix (or a more
   specific suffix like .incl.pl1 or .incl.alm) must be given.
   The star convention may be used to select several segments.
   If SEG_NAME is not given, all include segments are checked.


Control arguments:
   Any control argument accepted by the peruse_crossref (pcref)
   command may be given.  For a full list of controls, type:
      help pcref -brief


:[Info]: quit: q:  2020-07-27  quit, q

Syntax:  q


Function:  exits the subsystem and returns to Multics command level.


:[Info]: ?:  2020-07-27  ?

Syntax:  ?


Function:  prints a list of requests available in this subsystem.


Notes:
There may be other requests available in the subsystem which are not
listed by this request.  Such requests may be listed using the request:
   list_requests -all


:[Info]: .:  2020-07-27  .

Syntax:  .


Function: prints the name and version of the subsystem, whether
abbreviation processing is enabled in the subsystem, and the level of
invocation of this instance of the subsystem if more than one
invocation of the subsystem is active.


Examples:
   mbuild mbuild__1.03 (abbrev)


:Info: build_script.gi: build_script: 2019-10-25  Build Script Language

A build script:
  - briefly (1-4 lines or so) describes a software change to the
    Multics Libraries; and
  - lists the original-content files residing in that installation
    directory.

The script gives instructions for creating a change or new
installation.  Included steps cover: compiling source files; changing
bound object source and object archives; bindfile changes to create
the bound object; and installing the source, bound and unbound objects,
include files and info segments, etc. into directories of the Multics
Libraries.


Origin:
The mbuild save request creates an initial version of the build script
based upon mbuild's analysis of segments in the install directory.  The
user may then edit the script to correct analysis errors, supply
unknown data, specify names to be added to or removed from segments,
etc.

A subsequent mbuild read request parses the edited build script,
loading the corrected information into mbuild.


Build script overview:
Items in braces are alternatives; only one is present in an actual
statement.

An archive statement is used only for a bound object having more than
one source archive (i.e., where source archive has a .<digit> in its
name; e.g. bound_pl1_.2.s.archive).

An add_name or delete_name statement not used on a Bound_obj statement;
names on a bound segment are specified by statements in its bindfile.


Description     : <description-line>...
Installation_directory
                :  <absolute-pathname> ;

Build_script    : <mb-seg-name>.mb ;
Build_exec_com  : <mb-seg-name>.mb.ec ;
Build_log       : <mb-seg-name>.mb.list ;

Bound_obj       : <bound-object-name>       IN : <library-name>   { ADD | DELETE | REPLACE }  ;
    bindfile    : <bind-file-name>                                { ADD | DELETE | REPLACE }  ;
 source_arch    : <bound-source-archive-name>                     { ADD | UPDATE | REPLACE | DELETE }  ;
      source    : <source-seg-name>                               { ADD | DELETE | REPLACE }  <compiler-group> ;

Unbound_obj     : <object-seg-name>         IN : <library-name>   { ADD | DELETE | REPLACE }  ;
      source    : <source-seg-name>                               { ADD | DELETE | REPLACE }  <compiler-group> ;

Include         : <include-file-name>       IN : <library_name>   { ADD | DELETE | REPLACE }  ;
Info            : <info-seg-primary-name>   IN : <library_name>   { ADD | DELETE | REPLACE }  ;

Seg(<seg-type>) : <seg-name>                IN : <library_name>   { ADD | DELETE | REPLACE }  ;

Either/both of the following statements may follow statements:  Unbound_obj Info Seg
add_name        : <name>... ;
delete_name     : <name>... ;


BNF specification of Build Script Language:

    -  { <alt-1> | <alt-2> | <alt-3> } identifies alternatives.  Choose only one of them.
       { <alt-1> | <alt-2> | <alt-3> }... says choose one or more of the alternatives.

    -  [....] says stuff is optional.  [....]... says choose zero or more of this item.

    -  User commenting may or may not be supported in the actual build script files.
       Such comments would have to be parsed/stored by read operation to be preserved for
       future save operations; and mbuild would have to learn how to display them.


   ----------                                                                      ----------
<script-contents>       ::= <description-group> [<mb-script-item>]... <installable-item>...

<description-group>     ::= <description-stmt> <install-dir-stmt> | <install-dir-stmt>
 <description-stmt>     ::= Description: <description-line>...
 <install-dir-stmt>     ::= Installation_directory: <absolute-pathname> ;

<installable-item>      ::= {<bound-object-group>|<unbound-object-group>|
                              <info-seg-group>|<include-file-group>|<unanalyzed-seg-group>}

<bound-object-group>    ::= <bound-object-stmt> [<bindfile-stmt>] [<archive-source-group>]...
 <archive-source-group> ::  {<source-stmt>|<archive-stmt> <source-stmt>...}

<unbound-object-group>  ::= <unbound-object-stmt> <source-stmt> [<naming-group>]...

<include-file-group>    ::= <include-file-stmt> ;

<info-seg-group>        ::= <info-seg-stmt> [<naming-group>]...

<unanalyzed-seg-group>  ::= <unanalyzed-seg-stmt> [<naming-group>]... ;

<bound-object-stmt>     ::= Bound_obj: <bound-object-name> <library> <bound-obj-operation> ;
  <library>             ::=  IN: <library-name>
  <bound-obj-operation> ::=  {ADD|UPDATE|DELETE}

<bindfile-stmt>         ::=  bindfile: <bind-file-name> [<library>] <operation> ;
  <operation>           ::=  {ADD|REPLACE|DELETE}

<archive-stmt>          ::=  source_arch:  <bound-source-archive-name> [<library>] <bound-obj-operation> ;

<source-stmt>           ::=  source:   <source-seg-name> [<library>] <operation> [<compiler-group>]
  <compiler-group>      ::=   <compiler> [<compile-option>]... ;
  <compiler>            ::=   compiler: <compiler-name>
  <compile-option>      ::=   {<control-arg>|<control-arg> <value-word>}

<unbound-object-stmt>   ::= Unbound_obj: <object-seg-primary-name> <library> <operation> ;

<include-file-stmt>     ::= Include: <include-file-name> [<library>] <operation>;

<info-seg-stmt>         ::= Info: <info-seg-primary-name> <library> <operation> ;

<unanalyzed-seg-stmt>   ::= Seg(<seg-type>): <seg-name> <operation> ;

<naming-group>          ::= <add_name-stmt>|<delete_name-stmt>
 <add_name-stmt>        ::=  add_name: <add-seg-name>... ;
 <delete_name-stmt>     ::=  delete_name: <del-seg-name>... ;

<mb-script-item>        ::= {<mb-script-stmt>|<mb-exec_com_stmt>|<mb-log-stmt>}
 <mb-script-stmt>       ::= Build_script: <mb-seg-name>.mb ;
 <mb-exec_com-stmt>     ::= Build_exec_com: <mb-seg-name>.mb.ec ;
 <mb-log-stmt>          ::= Build_log: <mb-seg-name>.mb.list ;


:hcom:

/****^  HISTORY COMMENTS:
  1) change(2019-08-17,GDixon), approve(2019-10-25,MCR10069),
     audit(2020-01-20,Swenson), install(2020-01-20,MR12.6g-0035):
     Initial documentation for mbuild subsystem.  For details, see:
       MTB-1003  mbuild Subsystem
  2) change(2020-01-25,GDixon), approve(2020-01-25,MCR10079),
     audit(2020-02-02,Swenson), install(2020-02-02,MR12.6g-0045):
      A) To mbuild command, add control argument: -scan_read (default)
      B) To scan request, add control arguments: -query and -no_query
      C) To save request, add control argument: -description
      D) To analyze request, add control argument: -no_progress
      E) To read request, add control argument: -no_print
      F) To compare request, add control argument: -brief
      G) To set request, noting that -description now saves the new
         description setting to a build_script file.
      H) To print request, refine how -save_format works with
         -description and -analyze control arguments.
  3) change(2020-02-05,GDixon), approve(2020-02-05,MCR10079),
     audit(2020-04-30,Swenson), install(2020-04-30,MR12.6g-0046):
      A) Correct info seg formatting flaws found by validate_info_seg.
  4) change(2020-04-20,GDixon), approve(2020-04-20,MCR10079),
     audit(2020-04-30,Swenson), install(2020-04-30,MR12.6g-0046):
      A) Fix formatting flaws found by verify_info.
      B) Change documentation for set -seg request to indicate
         that the star convention may be used to set attributes of
         several Seg(...) structures.
  5) change(2021-02-18,GDixon), approve(2021-02-18,MCR10086),
     audit(2021-03-17,Swenson), install(2021-03-17,MR12.6g-0051):
      A) Change mbuild.info to correct errors found by
         validate_info_seg (vis).
      B) Document the new crossref (xref) request for displaying source
         programs using include files in the current installation
         directory.
      C) Change archive_prep (arch) request documentation to note that
         archive components are sorted in alphanumeric order by
         component name by default.  Document -no_sort (-ns) control
         which suppresses this automatic sorting.
      D) Add an info block describing the new xref request.
      E) Document the quit (q), ?, and . requests which were omitted
         from earlier versions of this info segment.
  6) change(2021-02-22,GDixon), approve(2021-02-22,MCR10086),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0054):
      A) Document the new verify (vi) request for checking format of
         info segments in the installation directory.
      B) Change info divider tokens to use subsystem request tokens
         :[Info]: supported by verify_info and the new help_ subsystem.
                                                   END HISTORY COMMENTS */
