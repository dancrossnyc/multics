02/28/84	cobol

Syntax:  cobol path {-control_args}


Function:	 invokes the COBOL compiler to translate a segment containing
the text of a COBOL source program into a Multics object segment.


Arguments:
path
   is the pathname of a COBOL source segment to be translated by the
   COBOL compiler.	If path does not have a suffix of .cobol, one is
   assumed; however, the suffix .cobol must be the last component of
   the name of the source segment.


Control arguments:
-brief, -bf
   causes error messages written to the user_output I/O switch to
   contain only an error number and statement identification, once the
   full message has been given on the first occurrence.
-card
   removes meaningless trailing blanks from a standard fixed format
   COBOL source program in card image format.  Characters in the
   identification field (columns 73-80) are ignored.
-check, -ck
   is used for syntactic and semantic checking of a COBOL program.  No
   code is generated.


-expand, -exp
   translates a standard fixed format COBOL source program that
   possibly contains COPY and REPLACE statements into an equivalent
   source program that does not contain these statements.
-format, -fmt
   translates a pseudofree form COBOL source program into a standard
   fixed format COBOL source program (see the expand_cobol_source
   command for details).
-levelNM, -levNM
   causes L-type diagnostics at severity M to be written to the
   user_output I/O switch whenever a COBOL source line contains a
   language construct outside the subset specified by N (see "Notes
   on L-type diagnostics" below).


-list, -ls
   produces a source program listing with symbols, followed by an
   assembly-like listing of the compiled object program.
-map
   produces a source program listing with symbols, followed by a map of
   the object code generated by this compilation.	 This control
   argument produces sufficient information to allow you to debug
   most problems online.
-no_table, -ntb
   suppresses the generation of a full symbol table for use by symbolic
   debuggers.
-profile, -pf
   generates additional code to meter the execution of individual
   statements.


-runtime_check, -rck
   produces an object program in which parameters are validated
   according to number and type, performs bounds checking on all
   subscripted referenced, performs string range checking on all
   variable-length string references, and verifies the validity of
   every index name modification.
-severityN, -svN
   does not write error messages whose severity is less than N (where
   N is 1, 2, 3, or 4) to the user_output I/O switch.  All errors are
   written into the listing.  If this control argument is not given, a
   severity level of 2 is assumed.
-table, -tb
   generates a full symbol table for use by symbolic debuggers.  If
   -format, -expand, or -card is given with -table, the symbolic
   debuggers are not able to display the source statements.  (Default)


-temp_dir path, -td path
   creates the compiler's internal work files in the specified
   directory rather than in the process directory.
-debug, -db
   leaves the work files generated by the compiler intact after a
   compilation.  This control argument is used for debugging the
   compiler.  The command cobol$clean_up can be used to discard these
   files.  This causes severity 4 errors, which do not unwind and
   abort the compilation but rather invoke a new level of the command
   processor at the point of the error.
-time, -tm
   prints the time (in seconds) and the number of page faults taken by
   each phase of the compiler; prints the total time at the end of the
   compilation.  This information is directed to the user_output I/O
   switch.


Notes:  The only result of invoking the cobol command without control
arguments is to generate an object segment containing a full symbol
table.


Notes on L-type diagnostics:
The value M can be one through three and specifies the severity of the
diagnostic.  If M is omitted, severity 3 is assumed.  The value N can
be one through five, corresponding to the four levels specified by
the Federal Information Processing Standards Publication, December 1,
1975 (FIPS PUB 21-1)and to the extended version of COBOL supported by
Multics.  These values are
     1  low level
     2  low intermediate level
     3  high intermediate level
     4  high level
     5  Multics COBOL extensions
If a program compiles without any L-type diagnostics, it means the
program is an acceptable subset of Multics COBOL at the level
requested.  The default is level 5.
