05/16/16  input_history_

Function: The input_history_ I/O module passes-thru I/O operations
to a monitored switch.  For a get_line operation, it captures the
line returned by the monitored switch in a history file, before
returning it to the caller.

If the monitored switch is attached to the window_io_ module, then
the window_io_ real-time input line editor is augmented with editing
requests to search the history file for past input lines to
re-enter.  See "Notes on video editing" below.

Use the input_history command to facilitate attachment of the
input_history_ I/O module.  See: input_history.info (or: ih.info)


Syntax:
   input_history_ monitored_switch_name {-control_args}


Notes on attach description:
monitored_switch_name
   is the name of an I/O switch whose input lines are captured.  It
   must be attached to an I/O module open with an opening mode of
   stream_input or stream_input_output.

-pathname PATH, -pn PATH
   use PATH as the location of the history file.  The default PATH is:
     [homedir]>[user name].history
-perprocess, -pp
   use a temporary history file created in the process directory.
-permanent, -perm
   use only a permanent the history file.  See "Notes on the history
   file" for further information on these three control arguments.


-lines N, -ln N
   recommends a size for the history file, in lines.  The default is
   200 lines (about 2 records of storage, if the average input line is
   40 characters in length).  (See "Notes on the history file" below.)
-truncate, -tc
   if the history file already exists, truncates this file as part of
   the attach operation.  The default is to extend the existing file.


Notes on the history file:
Past input lines are logged in the history file as a stream of
characters.  The file bit count is adjusted after each line is
appended.  This permits searching or examining the file: using the
print command or a file editor; or using video editing functions added
to the window_io_ line editor by the input_history_ module.  See
"Notes on video editing" below.


Permanent history file
   Holds a log of past input lines, and remains in the file system
   after the process ends.  A subsequent process may log additional
   input lines in this file, and may select and re-input lines from
   the earlier process.

Temporary history file
   Holds input lines only for the current process.  The user may
   select and re-input lines while this process runs.  However, the
   file is deleted when the process ends.


One process per history file
   Several processes may not share the same history file concurrently.
   For each permanent history file (XXX.history), a corresponding
   process identity file (XXX.hisLock) records the lock_id of the
   process using that history file.  While that process is running,
   input_history_ prevents another process from attaching with that
   file.

Read/write access required
   The process must have read/write access to attach using an existing
   history file.  An access error might occur if using a file created
   by another user or group; or created by a process with an access
   class that differs from the current process authorization.


Permanent history file attach error
   If a permanent history file cannot be reused (due to locking or
   access error), either: a temporary history file is created; or if
   -permanent was given, then an error is reported and the attach
   operation fails.  If both -pathname and -perprocess are given, then
   a temporary file is created only when the file given with -pathname
   is locked or inaccessible.  If the permanent history file was
   locked, the temporary file is initialized by copying the permanent
   file.

Requiring a temporary history file
   If -perprocess is given without a -pathname, then a temporary file
   is always created.


Automatic purging of oldest input
   When a history file reaches its recommended size of N lines (see
   the -lines attach argument), the oldest lines are removed from the
   top of the file to permit new lines to be appended to the end of
   the file.  These scroll operations are grouped into page-size
   chunks, to avoid excessive overhead during each input operation.
   Thus, the file may actually contain N-lines, plus some additional
   lines.


Notes on video editing:
When the input_history_ I/O module is attached, several editing
requests are added to the window_io_ input line editor.  The
previous-line (^P) and next-line (^N) requests accept numeric
repetition counts (e.g., ESC 7 ^P to move back 7 lines; or ^U ^N to
move forward 4 lines).

^P
   Select the previous line in the history file for editing and
   re-input.
^N
   Select the next line in the history file for editing and re-input.
^G
   Abort selection of a prior input line.  Original line is again on
   display in the window_io_ line editor.


Incremental searches of the input history are started using one of the
following requests.

^R
   Perform an incremental search backward in the history file, looking
   for a line that matches characters typed following ^R.
^S
   Perform an incremental search forward in the history file, looking
   for a line that matches characters typed following ^S.


As each character is added to the incremental search string, the
history line matching the search string is displayed.

   Backspace, DEL, or # (your erase character)
      Remove a character from the incremental search string to undo
      part of the search operation.  Different characters may then be
      added to the search string.

Incremental searching ends with one of the following characters.
   ESC
      Matching line returned to window_io_ line editor for editing and
      re-input.
   ^G
      Incremental search is aborted as described in ^G request above.


   (other window_io_ line editor control key)
      The selected input line is returned to window_io_ line editor;
      the window_io_ edit function bound to the given control key is
      then applied to the selected line.  Two of the many window_io_
      requests that can be applied are listed below.

   RETURN (^M), NL (^J)
      The selected history line is re-input, as is.

   ^E
      Move to end of the selected line, where further edit requests
      may be applied to the line.


Notes on the open operation:
Because input_history_ is a monitoring-style I/O module, most I/O
operations pass-thru directly to the monitored switch.  For this
reason, the open operation for input_history_ is performed
automatically at attach time.  It uses the same opening mode as the
monitored switch.


Notes on other operations:
Put Chars Operation
   is a pass-thru to the monitored I/O module.
Get Chars Operation
   is a pass-thru to the monitored I/O module.
Get Line Operation
   This is primarily a pass-thru to the monitored I/O module.
   However, any lines (or partially-read line fragments) are logged in
   the history file before returning the input to the caller.


Modes Operation
   is a pass-thru to the monitored I/O module.  input_history_ has no
   modes of its own.
Position Operation
   is a pass-thru to the monitored I/O module.
Control Operation
   is primarily a pass-thru to the monitored I/O module.  However, the
   following input_history_ control operations are also supported.

      get_input_history_lines
         returns the current recommended size for the history file, in
         lines.
      set_input_history_lines N
         gives a value for the recommended size for the history file,
         in lines.
