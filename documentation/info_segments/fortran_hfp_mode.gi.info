03/06/84  fortran hexadecimal mode

This segment describes Fortran's hexadecimal mode and how it is used.


Explanation of hexadecimal mode:

A single word floating point number is represented on Multics as a
signed 8-bit exponent followed by a signed 28 bit mantissa.  The value
of the number is normally the mantissa multiplied by the value of 2 to
the power of the exponent.  This gives a numerical range between
1.469E-39 and 1.701E+38 inclusive.  In hexadecimal mode, the value of
the number is the mantissa multiplied by the value of 16 to the power
of the exponent.  The range of hexadecimal numbers is between
1.864E-155 and 8.379E+152 inclusive.


Invoking hexadecimal mode for Fortran:

The control argument "-hexadecimal_floating_point", or "-hfp" for
short, instructs the compiler to generate code that uses hexadecimal
floating point numbers.  This option can also be specified in the
source in a "%global" statement.  (e.g.  "%global hfp").  The default
option is "-binary_floating_point" or "bfp".

This feature is only supported by the DPS8 hardware.  Compilations
using the "-hfp" control argument and the execution of any such
programs, requires "rw" access to >sc1>admin_acs>Fortran_hfp.acs.  This
segment must be created by site personnel if they wish to make use of
HFP.


Use of hexadecimal mode:

Binary floating point numbers cannot be mixed with hexadecimal floating
point numbers.  The "hexadecimal_floating_point" option always applies
to the entire compilation unit.  Programs compiled in hexadecimal mode
differ from those compiled in binary mode only in their use of real,
complex and double precision numbers.  Integers are unaffected.


Pitfalls:

If Fortran programs compiled in hexadecimal mode pass or receive
floating point arguments of Fortran programs compiled in binary mode,
the results are unpredictable.  Also, as Fortran is the only standard
Multics language that supports hexadecimal floating point arithmetic,
hexadecimal arguments cannot be reliably passed to any program compiled
in another language.

In gaining the extra magnitude, hexadecimal numbers suffer from less
precision.  Generally, hexadecimal mode results in a loss of 3 bits of
reliable precision in the mantissas of floating point variables.
