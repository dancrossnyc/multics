:Info: sweep_disk_:  1982-12-28  sweep_disk_


Entry points in sweep_disk_:
   (List is generated by the help command)


:Entry: sweep_disk_: 1982-11-04  sweep_disk_


Function:
The sweep_disk_ subroutine walks through the subtree below a specified
node of the directory hierarchy, calling a user-supplied subroutine
once for every entry in every directory in the subtree.


Syntax:
declare sweep_disk_ entry (char(168) aligned, entry);
call sweep_disk_ (base_path, subroutine);


Arguments:
base_path
   is the pathname of the directory that is the base node of the
   subtree to be scanned.  (Input)
subroutine
   is an entry point called for each branch or link in the subtree (see
   "User-Supplied Subroutine" below).  (Input)


User-Supplied Subroutine:
The subroutine provided to sweep_disk_ should have the following
declaration and call sequence:

   declare subroutine entry (char(168) aligned, char(32) aligned,
      fixed bin, char(32) aligned, ptr, ptr);
   call subroutine (path, dir_name, level, entryname, b_ptr, n_ptr);


User-Supplied Subroutine Arguments:
path
   is the pathname of the directory immediately superior to the
   directory that contains the current entry.  (Input)
dir_name
   is the name of the directory that contains the current entry.
   (Input)
level
   is the number of levels deep from the base_path directory of the
   subtree.  (Input)


entryname
   is the primary name on the current entry.  (Input)
b_ptr
   is a pointer to the branch structure returned by hcs_$star_list for
   the current entry.  (Input)
n_ptr
   is a pointer to the names area for the immediately superior
   directory of the current entry returned by hcs_$star_list.  (Input)


:Entry:  dir_list:  1982-11-04  sweep_disk_$dir_list


Function:  This entry point operates in the same way as sweep_disk_ but
is much less expensive to use and does not return
date_time_contents_modified, date_time_used, or bit_count.


Syntax:
declare sweep_disk_$dir_list entry (char(168) aligned, entry);
call sweep_disk_$dir_list (base_path, subroutine);


Arguments:
base_path
   is the pathname of the directory that is the base node of the
   subtree to be scanned.  (Input)
subroutine
   is an entry point called for each branch or link in the subtree (see
   "Notes" below).  (Input)


Notes: The user-supplied subroutine is called in the same way as
for sweep_disk_, but b_ptr points instead to the branch structure
returned by hcs_$star_dir_list.  See the hcs_$star_ subroutine.
See "User-Supplied Subroutine" in the sweep_disk_ entrypoint for
syntax of this subroutine.

If the base_path argument to the sweep_disk_ subroutine is the
root (">"), the directory >process_dir_dir is omitted from the tree
walk.


The sweep_disk_ subroutine attempts to force access to the directories
in the subtree by adding an ACL term of the form "sma
Person.Project.tag" to each directory ACL, and deleting that ACL term
when finished processing the directory.  If the user does not have
sufficient access to add this ACL term for a given directory, the
subroutine processes those parts of the subtree under it where the user
already has sufficient access to list the directories.


:Entry:  loud:  1982-11-04  sweep_disk_$loud


Function:  This entry point is used for debugging subsystems that use
the sweep_disk_ subroutine.  It sets an internal static flag in
sweep_disk_ that causes sweep_disk_ to call com_err_ and report any
errors encountered in listing directories or setting ACLs.  Since
sweep_disk_$loud takes no arguments, and should only be used for
debugging, it can readily be invoked as a command ("sweep_disk_$loud")
to cause sweep_disk_ to exhibit this debugging behavior for the rest of
the process.  There is no corresponding entry point to turn the switch
off.  Because this is a static switch, and affects all callers of
sweep_disk_, it should not be turned on, except to debug, when it is
important to understand the exact nature of any errors encountered.
Normally, sweep_disk_ ignores errors and continues as best it can.


Syntax:
declare sweep_disk_$loud entry ();
call sweep_disk_$loud ();


:hcom:



/****^  HISTORY COMMENTS:
  1) change(2020-05-19,GDixon), approve(2021-02-22,MCR10088),
     audit(2021-05-27,Swenson), install(2021-05-27,MR12.6g-0056):
     Fix info seg format errors reported by verify_info.
                                                   END HISTORY COMMENTS */



