:Info: io_call: io:  2020-06-14  io_call, io

Syntax as a command:  io OPERATION switchname {args}


Syntax as an active function:  [io OPERATION switchname {args}]


Function: performs diverse operations on specified I/O switches and
returns a result.


Arguments:
OPERATION
   designates the operation to be performed.  See "List of operations"
   below.  For a detailed description of each operation, type:
     help io.OPERATION
switchname
   is the name of the I/O switch through which the operation is
   performed.  (In the next two sections SW means switchname.)
args
   can be one or more arguments, depending on the particular operation
   to be performed.


List of operations:
   For a detailed description of each operation, type:
     help io.OPERATION
attach
   uses attach_description to attach SW.
attach_desc
   prints the attach description for SW.
attached
   prints true if SW is attached.
close
   closes SW.
close_file
   closes SW with a close description.
closed
   prints true if SW is closed.


control
   performs the named order operation on SW; args depend upon the
   particular order and I/O module through with SW is attached.
delete_record, delete
   deletes the current record in the file to which SW is attached.
destroy_iocb
   destroys SW.
detach
   detaches SW.
detach_iocb
   detachs SW.
detached
   prints true if SW is detached.


find_iocb
   prints the location of SW.  Switch is created if not already
   existing.
get_chars
   reads and prints the next N characters from SW; control_args can be:
   -segment, -allow_newline, -append_newline, -remove_newline, -lines.
get_line
   reads and prints the next line from SW; control_args can be:
   -segment, -allow_newline, -append_newline, -remove_newline, -lines.
io_module
   prints the name of the I/O module through which SW is attached.
look_iocb
   prints the location of SW.  An error occurs if SW does not exist.


modes
   prints the old modes associates with SW and sets the new modes given
   in STR.
move_attach
   moves the attachment from SW to SW2.  SW is left in detached state.
open
   opens SW with given mode.
open_desc
   prints the current opening mode for SW.
open_file
   opens SW with given mode and open description.
opened
   prints true if SW is opened.


position
   positions the file to which SW is attached; type can be: bof; eof;
   forward J, fwd J, f J; reverse J, rev J, r J; I {J} (I and J are
   integers).
print_iocb
   prints all data from the control block for SW.
put_chars
   outputs STR to SW; control_args can be: -segment, -allow_newline,
   -append_newline, -remove_newline, -lines.  If you omit STR, give
   -segment.
read_key
   reads and prints key and record length of the next record in the
   indexed file to which SW is attached.


read_length
   reads and prints the length of the next record in the structured
   file to which SW is attached.
read_record, read
   reads and prints the next record from SW; control_args can be:
   -segment, -allow_newline, -append_newline, -remove_newline, -lines.
rewrite_record, rewrite
   replaces with STR current record in file to which SW is attached;
   control_args can be: -segment, -allow_newline, -append_newline,
   -remove_newline, -lines.  If you omit STR, give -segment.


seek_key
   positions the indexed file to which SW is attached to the record
   with the given key.  If the record is not found, key becomes key for
   insertion of the new record.
test_mode
   prints true if mode appears in modes string of SW; prints false
   if ^mode appears.  Prints error if mode does not appear or is not
   an on/off mode.
valid_mode
   prints true if mode or ^mode appears in modes string of SW;
   prints false if either does not appear.


valid_op
   prints true if operation is valid for SW, given its current
   attachment and opening mode.
write_record, write
   writes STR to SW; control_args can be: -segment, -allow_newline,
   -append_newline, -remove_newline, -lines.  If you omit STR, give
   -segment.


:Info: io.attach:  1985-04-02  io attach operation

Syntax as a command:  io attach switchname attach_description


Function: attaches the I/O switch using the designated I/O module.
If a control block for the I/O switch does not already exist, one is
created.


Arguments:
attach
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
attach_description
   is the concatenation of modulename and args separated by blanks.
   It must conform to the requirements of the I/O module.  If the I/O
   modulename is specified by a pathname, it is initiated with a
   reference name equal to the entryname.  If the entryname or
   reference name does not contain a dollar sign, the attachment is
   made by calling modulename$modulenameattach.  If you supply a $,
   the entry point specified is called.  (See "Entry Point Names" in
   the Programmer's Reference Manual.)


:Info: io.attach_desc:  1985-04-02  io attach_desc operation

Syntax as a command:  io attach_desc switchname


Syntax as an active function:
   [io attach_desc switchname {-control_arg}]


Function: prints or returns the attach description of the switch,
quoted unless you give -no_quote.


Arguments:
attach_desc
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


Control arguments:
-no_quote, -nq
   does not enclose the returned data in quotes.


:Info: io.attached:  1985-05-02  io attached operation

Syntax as a command:  io attached switchname


Syntax as an active function:  [io attached switchname]


Function: prints or returns true if the switch is attached, false
otherwise.


Arguments:
attached
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.close:  1985-04-02  io close operation

Syntax as a command:  io close switchname


Function: closes the I/O switch.


Arguments:
close
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.close_file:  1985-04-02  io close_file operation

Syntax as a command:  io close_file switchname {args}


Function: closes the I/O switch with the specified description.  The
close_file description is the concatenation of all args separated by
blanks.  It must conform to the requirements of the I/O module.


Arguments:
close_file
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
args
   can be one or more arguments, depending on what is permitted by the
   particular I/O module.


:Info: io.closed:  1985-04-02  io closed operation

Syntax as a command:  io closed switchname


Syntax as an active function:  [io closed switchname]


Function: prints or returns true if the switch is closed, false
otherwise.


Arguments:
closed
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.control:  1985-04-02  io control operation

Syntax as a command:  io control switchname order {args}


Syntax as an active function:  [io control switchname order {args}]


Function: applies only when the I/O switch is attached via an I/O
module that supports the control I/O operation.  The exact format of
the command line depends on the order being issued and the I/O module
being used.  For more details see "Control Operations from Command
Level" in the appropriate I/O module.  If the I/O module supports the
control operation and the paragraph just referenced does not appear,
assume that only control orders that do not require an info_structure
can be performed with the io_call command.  This is true because this
command/active function uses a null info_ptr.  (See the iox_$control
entry point in the Subroutines manual and "Performing Control
Operations from Command Level" and the I/O module description in the
Programmer's Reference Manual.)

The active function returns a value that depends on the I/O module and
the order specified.


Arguments:
control
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
order
   is one of the orders accepted by the I/O module used in the
   attachment of the I/O switch.
args
   are additional arguments dependent upon the order being issued and
   the I/O module being used.


:Info: io.delete_record: io.delete:  1985-04-02  io delete_record operation

Syntax as a command:  io delete switchname


Function: deletes the current record in the file to which the I/O
switch is attached.  The current record is determined as in
rewrite_record.


Arguments:
delete_record, delete
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.destroy_iocb:  1985-04-02  io destroy_iocb operation

Syntax as a command:  io destroy_iocb switchname


Function: destroys the I/O switch by deleting its control block.  Be
sure the switch is detached before using this command.  Any pointers
to the I/O switch become invalid.


Arguments:
destroy_iocb
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.detach:  1985-04-02  io detach operation

Syntax as a command:  io detach switchname {args}


Function: detaches the I/O switch with the specified description.  The
detach description is the concatenation of all args separated by
blanks.  It must conform to the requirements of the I/O module.


Arguments:
detach
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
args
   can be one or more arguments, depending on what is permitted by the
   particular I/O module.


Notes: If there are no arguments after switchname, this request is
synonymous with the detach_iocb request.  This means that if you
supply no detach description on the command line, detach acts
essentially as a short name for detach_iocb.


:Info: io.detach_iocb:  1985-04-02  io detach_iocb operation

Syntax as a command:  io detach_iocb switchname


Function: detaches the I/O switch.


Arguments:
detach_iocb
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.detached:  1985-04-04  io detached operation

Syntax as a command:  io detached switchname


Syntax as an active function:  [io detached switchname]


Function: prints or returns true if the switch is detached, false
otherwise.


Arguments:
detached
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.find_iocb:  1985-04-02  io find_iocb operation

Syntax as a command:  io find_iocb switchname


Syntax as an active function:  [io find_iocb switchname]


Function: prints or returns the location of the control block for the
I/O switch.  If it does not already exist, the control block is
created.


Arguments:
find_iocb
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.get_chars:  1986-08-06  io get_chars operation

Syntax as a command:  io get_chars switchname {N} {-control_args}


Syntax as an active function:
   [io get_chars switchname {N} {-control_args}]


Function: reads the next N characters from the file or device to which
the I/O switch is attached.


Arguments:
get_chars
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
N
   is a decimal number greater than zero specifying the number of
   characters to read.


Control arguments:
-allow_newline, -alnl
   does not add to nor delete from the end of the line any newline
   character.  (Default, when you select -segment)
-append_newline, -apnl
   adds a newline character to the end of the line if one is not
   present.  (Default, when you choose no -segment)
-lines
   specifies that the offset, if given, is measured in lines rather
   than in characters.  This control argument has meaning only if you
   also supply -segment; you can't use it with the active function.


-no_quote, -nq
   returns the data unquoted.  (Default for active function only)
-remove_newline, -rmnl
   deletes the newline character, if present, from the end of the
   line.  (Default for active function)


-segment path {offset}, -sm path {offset}
   specifies that the data read from the I/O switch is to be stored in
   the segment given by path.  You can optionally describe the location
   at which to begin writing in path with the offset parameter.  This
   is normally specified as a character offset (i.e., the number of
   characters to skip over before storing the new data in the segment).
   For example, an offset of 0 causes the new data to overwrite the
   entire file.  When you also give -lines, then offset is a line
   offset (i.e., the number of lines to skip over before storing the
   new data in the segment).  For example, an offset of 1 line begins
   storing data at the second line of the file.  If you omit offset,
   new data is appended to the end of the segment.  You can't use this
   control argument with the active function.


Notes: The disposition of the characters read is the same as the one
described under the get_line operation; that is, they are written upon
user_output if you specify no -segment or stored in a segment if you
give -segment.  As an active function, returns the data read as a
quoted string, unless you use -no_quote.  A trailing newline character
is deleted.  If you don't supply the maximum number of characters N,
the maximum segment size is assumed.


:Info: io.get_line:  1986-08-06  io get_line operation

Syntax as a command:  io get_line switchname {N} {-control_args}


Syntax as an active function:
   [io get_line switchname {N} {-control_args}]


Function: reads the next line from the file or device to which the I/O
switch is attached.  If you give N and the line is longer than N, then
only the first N characters are read.  The active function returns the
data read as a quoted string, unless you supply -no_quote.  A trailing
newline character is deleted.  If you don't supply the maximum number
of characters N, the maximum segment size is assumed.


Arguments:
get_line
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
N
   is a decimal number greater than zero specifying the maximum number
   of characters to be read.


Control arguments:
-allow_newline, -alnl
   does not add to nor delete from the end of the line any newline
   character.  (Default, when you select -segment)
-append_newline, -apnl
   adds a newline character to the end of the line if one is not
   present.  (Default, when you choose no -segment)
-lines
   specifies that the offset, if given, is measured in lines rather
   than in characters.  This control argument has meaning only if you
   also supply -segment; you can't use it with the active function.


-no_quote, -nq
   returns the data unquoted.  (Default for active function only)
-remove_newline, -rmnl
   deletes the newline character, if present, from the end of the
   line.  (Default for active function)


-segment path {offset}, -sm path {offset}
   specifies that the data read from the I/O switch is to be stored in
   the segment given by path.  You can optionally describe the location
   at which to begin writing in path with the offset parameter.  This
   is normally specified as a character offset (i.e., the number of
   characters to skip over before storing the new data in the segment).
   For example, an offset of 0 causes the new data to overwrite the
   entire file.  When you also give -lines, then offset is a line
   offset (i.e., the number of lines to skip over before storing the
   new data in the segment).  For example, an offset of 1 line begins
   storing data at the second line of the file.  If you omit offset,
   new data is appended to the end of the segment.  You can't use this
   control argument with the active function.


Notes: If you select no -segment, the line read is written onto the
I/O switch user_output, with a newline character appended if one is
not present and if you have supplied neither allow_newline nor
-remove_newline.

If you give -segment, the line is stored in the segment specified by
path; if this segment does not exist, it is created.  If you use
offset, the line is stored at that position relative to the start of
the segment; this is normally measured in characters, unless you have
selected -lines.  If you omit offset, the line is appended to the end
of the segment.  The bit count of the segment is always updated to a
point beyond the newly added data.  If the segment contains a trailing
newline and you haven't chosen -remove_newline, that newline remains;
if the segment does not contain a trailing newline and you haven't
specified -append_newline, no newline is appended.


:Info: io.io_module:  1985-04-02  io io_module operation

Syntax as a command:  io io_module switchname


Syntax as an active function:  [io io_module switchname]


Function: prints or returns the name of the I/O module through which
the switch is attached.


Arguments:
io_module
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.look_iocb:  1985-04-02  io look_iocb operation

Syntax as a command:  io look_iocb switchname


Syntax as an active function:  [io look_iocb switchname]


Function: prints, on user_output, the location of the control block
for the I/O switch; if this switch does not exist, an error is
printed.  The active function returns true if the specified iocb
exists, false otherwise.


Arguments:
look_iocb
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.modes:  1985-04-02  io modes operation

Syntax as a command:  io modes switchname {string} {-control_arg}


Syntax as an active function:  [io modes switchname {string}]


Function: sets only new modes specified in string and then prints the
old modes on user_output; applies only when the I/O switch is attached
via an I/O module that supports modes.  The active function performs
the specified modes operation and returns the old modes.


Arguments:
modes
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
string
   is a sequence of modes separated by commas.  The string must not
   contain blanks.  See the description of the I/O module attached
   to the switch for a list of acceptable modes.


Control arguments:
-brief, -bf
   suppresses printing of the old modes.


Notes: If the switch name is user_i/o, the command refers to the modes
controlling your terminal.


:Info: io.move_attach:  1985-04-02  io move_attach operation

Syntax as a command:  io move_attach switchname switchname2


Function: moves the attachment of the first I/O switch (switchname) to
the second I/O switch (switchname2).  The original I/O switch is left
detached.


Arguments:
move_attach
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
switchname2
   is the name of a second I/O switch.


:Info: io.open:  1985-04-02  io open operation

Syntax as a command:  io open switchname mode


Function: opens the I/O switch with the specified opening mode.


Arguments:
open
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


List of modes:
   The following opening modes are accepted:
direct_input, di
direct_output, do
direct_update, du
keyed_sequential_input, ksqi
keyed_sequential_output, ksqo
keyed_sequential_update, ksqu
sequential_input, sqi
sequential_output, sqo
sequential_input_output, sqio
sequential_update, squ
stream_input, si
stream_output, so
stream_input_output, sio


:Info: io.open_desc:  1985-04-02  io open_desc operation

Syntax as a command:  io open_desc switchname


Syntax as an active function:  [io open_desc switchname {-no_quote}]


Function: prints or returns the current open description
(stream_input, etc.), quoted.


Arguments:
open_desc
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.open_file:  1985-04-02  io open_file operation

Syntax as a command:  io open_file switchname mode {args}


Function: open the I/O switch with the specified opening mode and
description.  The open_file description is the concatenation of all
args separated by blanks.  It must conform to the requirements of the
I/O module.


Arguments:
open_file
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
args
   can be one or more arguments, depending on what is permitted by the
   particular I/O module.


List of modes:
   The following opening modes are accepted:
direct_input, di
direct_output, do
direct_update, du
keyed_sequential_input, ksqi
keyed_sequential_output, ksqo
keyed_sequential_update, ksqu
sequential_input, sqi
sequential_output, sqo
sequential_input_output, sqio
sequential_update, squ
stream_input, si
stream_output, so
stream_input_output, sio


:Info: io.opened:  1985-04-02  io opened operation

Syntax as a command:  io opened switchname


Syntax as an active function:  [io opened switchname]


Function: prints or returns true if the switch is open, false
otherwise.


Arguments:
opened
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.position:  1985-04-02  io position operation

Syntax as a command:  io position switchname type


Syntax as an active function:  [io position switchname type]


Function: positions the file to which the I/O switch is attached.


Arguments:
position
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


List of types:
bof
   sets position to beginning of file.
eof
   sets position to end of file.
forward N, fwd N, f N
   sets position forward N records or lines (same as reverse -N).
reverse N, rev N, r N
   sets position back N records (same as forward -N records).  Any
   other numeric argument or pair of numeric arguments can be
   specified, but its function depends on the I/O module being used
   and cannot be implemented for all I/O modules.


Notes: If type is bof, the file is positioned to its beginning, so
that the next record is the first record (structured files) or the
next byte is the first byte (unstructured files).  If type is eof, the
file is positioned to its end; the next record (or next byte) is at
the end-of-file position.  If type is forward or reverse, the file is
positioned forwards or backwards over records (structured files) or
lines (unstructured files).  The number of records or lines skipped is
determined by the absolute value of N.  The active function returns
true if it succeed, false otherwise.


In the case of unstructured files, the next-byte position after the
operation is at a byte immediately following a newline character (or
at the first byte in the file or at the end of the file).  The number
of newline characters moved over is the absolute value of N.

If the I/O switch is attached to a device, you are only allowed
forward skips; this discards the next N lines input from the device.


:Info: io.print_iocb:  1985-04-02  io print_iocb operation

Syntax as a command:  io print_iocb switchname


Function: prints, on user_output, all the data in the control block
for the I/O switch, including all pointers and entry variables.


Arguments:
print_iocb
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.put_chars:  1986-08-06  io put_chars operation

Syntax as a command:  io put_chars switchname {string} {-control_args}


Function: outputs a character string or an entire segment to a
specified I/O switch.


Arguments:
put_chars
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
string
   can be any character string.


Control arguments:
-allow_newline, -alnl
   does not add to nor delete from the end of the line any newline
   character.
-append_newline, -apnl
   adds a newline character to the end of the line if one is not
   present.  (Default)
-lines
   specifies that the offset and length operands of -segment are
   measured in lines rather than in characters.  This control argument
   has meaning only if you also supply -segment.
-remove_newline, -rmnl
   does not append a newline character to the end of the output string
   or segment even if one is not present at the end.


-segment path {{offset} length}, -sm path {{offset} length}
   specifies that the data for the output operation is to be found in
   the segment specified by path.  You can optionally describe the
   location and length of the data with offset and length parameters.
   These are normally specified as a character offset (i.e., 0
   identifies the first character of the segment) and character length.
   When you also give -lines, they are specified as a line offset and
   line count.  If you give no offset, 0 is assumed.  If you give no
   length and offset, the entire segment is used.
-string STR, -str STR
   specifies an output string that can have a leading hyphen.


Notes: The string argument and -segment are mutually exclusive.  If
you supply a string, the contents of the string are output to the I/O
switch.  If you supply -segment, the data is taken from the segment
specified by path, at the offset and length given.

If the I/O switch is attached to a device, io_call transmits the
characters from the string or the segment to the device.  If the I/O
switch is attached to an unstructured file, the data is added to the
end of the file.


:Info: io.read_key:  1985-04-02  io read_key operation

Syntax as a command:  io read_key switchname


Syntax as an active function:  [io read_key switchname {-control_arg}]


Function: prints, on user_output, the key and record length of the
next record in the indexed file to which the I/O switch is attached.
The file's position is not changed.  The active function returns the
value of the key, quoted unless you select -no_quote.


Arguments:
read_key
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


Control arguments:
-no_quote, -nq
   does not enclose the returned data in quotes.  Data containing
   spaces is quoted by default.


:Info: io.read_length:  1985-04-02  io read_length operation

Syntax as a command:  io read_length switchname


Syntax as an active function:  [io read_length switchname]


Function: prints, on user_output, the length of the next record in the
structured file to which the I/O switch is attached.  The file's
position is not changed.  The active function returns the length of
the next record, in bytes.


Arguments:
read_length
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.read_record: io.read:  1986-08-06  io read_record operation

Syntax as a command:  io read switchname {N} {-control_args}


Syntax as an active function:  [io read switchname {N} {-control_args}]


Function: reads the next record from the file to which the I/O switch
is attached into a buffer of length N.


Arguments:
read_record, read
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
N
   is a decimal integer greater than zero specifying the size of the
   buffer to use.


Control arguments:
-allow_newline, -alnl
   does not add to nor delete from the end of the line any character.
   (Default for command)
-append_newline, -apnl
   adds a newline character to the end of the line if one is not
   present.
-lines
   specifies that the offset, if given, is measured in lines rather
   than in characters.  This control argument has meaning only if you
   also supply -segment; you can't use it with the active function.


-no_quote, -nq
   returns the data unquoted.  Active function usage only.
-remove_newline
   deletes the newline character, if present, from the end of the
   line.  (Default for active function)


-segment path {offset}, -sm path {offset}
   specifies that the data read from the I/O switch is to be stored in
   the segment given by path.  You can optionally describe the location
   at which to begin writing in path with the offset parameter.  This
   is normally specified as a character offset (i.e., the number of
   characters to skip over before storing the new data in the segment).
   For example, an offset of 0 causes the new data to overwrite the
   entire file.  When you also give -lines, then offset is a line
   offset (i.e., the number of lines to skip over before storing the
   new data in the segment).  For example, an offset of 1 line begins
   storing data at the second line of the file.  If you omit offset,
   new data is appended to the end of the segment.  You can't use this
   control argument with the active function.


Notes: If you don't supply -segment, the record (or the part of it
that fits into the buffer) is printed on user_output.  If you give
-segment, the record is stored in a segment as explained under the
get_chars operation.

The active function returns the data read as a quoted string, unless
you select -no_quote.  A trailing newline character is deleted.  If
you don't give the maximum number of characters N, the maximum segment
size is assumed.


:Info: io.rewrite_record: io.rewrite:  1986-08-06  io rewrite_record operation

Syntax as a command:  io rewrite switchname {string} {-control_args}


Function: replaces the current record in the file to which the I/O
switch is attached.


Arguments:
rewrite_record, rewrite
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
string
   is any character string.


Control arguments:
-allow_newline, -alnl
   does not add to nor delete from the end of the line any newline
   character.  (Default, when you select -segment)
-append_newline, -apnl
   adds a newline character to the end of the line if one is not
   present.
-lines
   specifies that the offset and length operands of -segment are
   measured in lines rather than in characters.  This control argument
   has meaning only if you also supply -segment.
-no_quote, -nq
   returns the data unquoted.  Active function usage only.


-remove_newline, -rmnl
   deletes the newline character, if present, from the end of the
   line.  (Default if you give no -segment)
-segment path {{offset} length}, -sm path {{offset} length}
   specifies that the data for the output operation is to be found in
   the segment specified by path.  You can optionally describe the
   location and length of the data with offset and length parameters.
   These are normally specified as a character offset (i.e., 0
   identifies the first character of the segment) and character length.
   When you also give -lines, they are specified as a line offset and
   line count.  If you give no offset, 0 is assumed.  If you give no
   length and offset, the entire segment is used.
-string STR, -str STR
   specifies an output string that can have a leading hyphen.


Notes: The string argument and -segment are mutually exclusive.  If
you supply a string, the contents of the string are output to the I/O
switch.  If you supply -segment, the data is taken from the segment
specified by path, at the offset and length given.

The current record must have been defined by a preceding read_record,
seek_key, or position operation as follows:
read_record
   the current record is the last record read.
seek_key
   the current record is the record with the specified key.
position
   the current record is the one preceding the record to which the file
   was positioned.


:Info: io.seek_key:  1985-04-02  io seek_key operation

Syntax as a command:  io seek_key switchname key


Syntax as an active function:  [io seek_key switchname key]


Function: positions the indexed file to which the I/O switch is
attached to the record with the given key.  The record's length is
printed on user_output.  Trailing blanks in the key are ignored.  The
active function returns true if the key exists, false otherwise.


Arguments:
seek_key
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
key
   is a string of no more than 256 ASCII characters.  The null string
   ("") is allowed as a key.


Notes: If the file does not contain a record with the specified key,
it becomes the key for insertion.  A following write_record operation
adds a record with this key.


:Info: io.test_mode:  1985-04-02  io test_mode operation

Syntax as a command:  io test_mode switchname mode


Syntax as an active function:  [io test_mode switchname mode]


Function: performs a modes operation and prints or returns true if
mode appears in the mode string, false if ^mode appears.


Arguments:
test_mode
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.valid_mode:  1985-04-02  io valid_mode operation

Syntax as a command:  io valid_mode switchname mode


Syntax as an active function:  [io valid_mode switchname mode]


Function: performs a modes operation and prints or returns true if
either mode or ^mode appears in the mode string, false otherwise.


Arguments:
valid_mode
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


:Info: io.valid_op:  2020-06-14  io valid_op operation

Syntax as a command:  io valid_op switchname operation


Syntax as an active function:  [io valid_op switchname operation]


Function: prints or returns true if the operation is defined on the
switch.


Arguments:
valid_op
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.


List of known operations:
   The following operations are defined for iox_ I/O modules.
close
close_file
control
delete_record
destroy_iocb
detach_iocb
find_iocb
get_chars
get_line
look_iocb
modes
move_attach
open


open_file
position
put_chars
read_key
read_length
read_record
rewrite_record
seek_key
write_record


:Info: io.write_record: io.write:  1986-08-06  io write_record operation

Syntax as a command:  io write switchname {string} {-control_args}


Function: adds a record to the file to which the I/O switch is
attached.  If the string parameter is specified, the record is equal to
the string.  If the -segment control argument is specified, the record
is extracted from the segment as described under the put_chars
operation.  If the file is a sequential file, the record is added at
the end of the file.  If the file is an indexed file, the record's key
must have been defined by a preceding seek_key operation.


Arguments:
write_record, write
   the operation being performed.
switchname
   is the name of the I/O switch through which the operation is
   performed.
string
   is any character string.


Control arguments:
-allow_newline, -alnl
   does not add to nor delete from the end of the line any newline
   character.  (Default, when you select -segment)
-append_newline, -apnl
   adds a newline character to the end of the line if one is not
   present.
-lines
   specifies that the offset and length operands of -segment are
   measured in lines rather than in characters.  This control argument
   has meaning only if you also supply -segment.
-no_quote, -nq
   returns the data unquoted.  (Active function usage only)


-remove_newline, -rmnl
   deletes the newline character, if present, from the end of the
   line.  (Default if you give no -segment)
-segment path {{offset} length}, -sm path {{offset} length}
   specifies that the data for the output operation is to be found in
   the segment specified by path.  You can optionally describe the
   location and length of the data with offset and length parameters.
   These are normally specified as a character offset (i.e., 0
   identifies the first character of the segment) and character length.
   When you also give -lines, they are specified as a line offset and
   line count.  If you give no offset, 0 is assumed.  If you give no
   length and offset, the entire segment is used.
-string STR, -str STR
   specifies an output string that can have a leading hyphen.


Notes: The string argument and -segment are mutually exclusive.  If
you supply a string, the contents of the string are output to the I/O
switch.  If you supply -segment, the data is taken from the segment
specified by path, at the offset and length given.

If the file is sequential, the record is added at the end of the file.
If the file is indexed, the record's key must have been defined by a
preceding seek_key operation.


:hcom:



/****^  HISTORY COMMENTS:
  1) change(2020-06-14,GDixon), approve(2021-02-22,MCR10088),
     audit(2021-05-27,Swenson), install(2021-05-27,MR12.6g-0056):
      1) Convert file to the Operation Format defined by the verify_info
         command.
                                                   END HISTORY COMMENTS */



