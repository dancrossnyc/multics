03/12/92  cv_integer_string_

Routine to convert an ASCII string representation of an integer to a
fixed binary (35) representation of that number.  The number may be
positive or negative and may have a trailing radix indicator as its
last character.


Entry points in cv_integer_string_:


:Entry: cv_integer_string_: 03/12/92  cv_integer_string_

Function: accepts an ASCII representation of an integer with a trailing
radix indicator and returns the fixed binary(35) representation of that
number.  (See also cv_integer_string_check_).


Syntax:
declare cv_integer_string_ entry (char(*), fixed bin)
     returns (fixed bin(35));
a = cv_integer_string_ (string, default_base);


Arguments:
string
   is the string to be converted.  The number may be positive or
   negative, and may have a trailing radix indicator as its last
   character.  (Input)
default_base
   is the base to be used if the input string does not have a trailing
   radix indicator.  This base can be any base in the range 2 to 16.
   (Input)
a
   is the result of the conversion.  (Output)


List of radix indicators:
b
   the number is interpreted as a base two number (binary).
o
   the number is interpreted as a base eight number (octal).
d
   the number is interpreted as a base ten number (decimal).
r<number>
   the number is interpreted in the base whose number follows the r.
x
   the number is interpreted as a base sixteen number (hexadecimal).


Notes: If string is not a proper character representation of a number,
"a" will contain the converted value of the string up to, but not
including, the incorrect character within the string.  If the radix
indicator or the default base is not valid "a" will contain 0.

There is a possible ambiguity if the default base is larger than 10 and
the radix indicators b or d are used.  Where the number is ambiguous
(e.g. 13d), it is interpreted as if it had no trailing radix indicator
(i.e. the default base is used).  To avoid this ambiguity, separate the
radix indicator from the number with an underscore (e.g. 13_d).
