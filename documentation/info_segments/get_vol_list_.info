12/18/84  get_vol_list_

Function: allocates and returns two structures containing
disk_table information.  One, pv_list, holds physical_volume
information, the other, lv_list, holds logical volume
information.

The routine is supplied two pointers, initially null () and
hopefully static.  It returns in them pointers to two
structures, for which it has allocated space.  If re-called,
with the same pointers, it will validate the storage addressed
to determine if it is the correct size and re-use it to hold
updated information if it is correct.  If not, it will free the
existing storage and re-allocate and fill in new structures.


Syntax:
   declare get_vol_list_ entry (ptr, ptr, ptr, char(8), fixed bin(35));
   call get_vol_list_
        (pv_list_ptr, lv_list_ptr, area_ptr, version, code);


Arguments:
   pv_list_ptr	(Input/Output)
      is a pointer to the structure lv_info, as defined by
      get_vol_list_.incl.pl1.  If the pointer is input as null,
      storage will be allocated in the specified area for the
      structure.  On exit this pointer will point to the pv_list
      structure.
   lv_list_ptr	 (Input/Output)
      is a pointer to the structure pv_info, as defined by
      get_vol_list_.incl.pl1.  If the pointer is  null,
      storage will be allocated in the specified area for the
      structure.  On exit this pointer will point to the lv_list
      structure.

   area_ptr	(Input)
      if this pointer is null (), storage is allocated in
      system_free_area.  If the pointer is non-null it is taken
      as the pointer to an area for storage allocation.  The
      area is validated prior to use.
   version	(Input)
      is the 8-character name of the current version of
      get_vol_list_ structures.  This value is currently
      "gvlist02".
   code		(Output)
      is a standard status code.


Notes: This subroutine allocates and frees storage as
appropriate.  The user's program should maintain the pointers
correctly to permit re-calling the routine to update
information.  The initial structure pointer values should be
null to cause first-time allocation of the storage.  A user
program can also free the data structures if it is cleaning up,
since they are self-describing and self-contained within a
single structure.  The area pointer of the area of allocation is
stored within the structures for easy reference.

The area supplied is validated prior to use, and if the
information structures must be re-allocated, the area of their
current allocation is validated for freeing prior to an attempt
to free them and re-allocate.  If the area they were allocated
within does not permit freeing then their current storage space
is lost and they will simply be re-allocated in the currently
supplied area, without freeing the space of the current
allocation.
