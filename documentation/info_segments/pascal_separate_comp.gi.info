08/04/86 pascal_separate_comp.gi.info

This info file describes how to share procedures and variables between
Pascal programs, how to call from Pascal procedures written in other
languages, how to reference from Pascal Multics external variables,
and how to, from programs written in other languages, call procedures
or reference variables exported by Pascal programs.


Summary of compiler directives: (Extensions described below are SOL
extensions) Since the standard does not allow to reference external
variables or procedures (i.e.  variables or procedures defined in one
other program, separately compiled), necessary extensions have been
implemented.  They are the compiler directives $IMPORT and $EXPORT.

$import
  identifies the procedures, functions and variables that are defined
outside
  the program.
$export
  identifies which of this program's procedures, functions and
variables are to
  be made accessible to other programs.

These directives must appear immediately after the program header,
with $import first if it exists.

  ONLY PROCEDURES, FUNCTIONS OR VARIABLES DECLARED AT THE MAIN LEVEL
(GLOBALS) CAN BE EXPORTED OR IMPORTED.


The $import directive:
   The $import directive appears immediately after the program header
and identifies the procedures, functions and variables that are
defined outside the program.  Its syntax is:

   $import <imported_list> { ";" <imported_list>} "$"

 <imported_list>  = <external_description_string> ":" <pascal_id_list>
 <pascal_id_list> = <pascal_id> {"," <pascal_id>}
 <external_description_string> =
    "'" <target_name> "(" <generator_name> ["descriptors"] ")" "'"
    | "'external_static'"
 <target_name> = <multics_segment_name> ["$" <entry_name>]
 <generator_name> = "pl1" | "pascal" | "fortran" | "cobol" etc..

   The <pascal_id> is the identifier of the procedure or function or
variable as it is declared in the Pascal program.
   The <external_description_string> gives information to the compiler
about where is allocated the variable or in which segment is the
procedure.  The compiler uses this information to generate a Multics
link in the object segment.  Usually, this link consists on a segment
name and an entry name in this segment.  The segment name is found by
the compiler in the <external_description_string>.  If this string
contains an <entry_name> this entry name is used by the compiler to
generate the link.  Otherwise, the compiler takes the internal (lower
case) name of the procedure, function or variable.  The list of the
generated links may be obtained using the Multics "print_link_info"
command which analyzes the object segment.  These links are used by
the Multics dynamic linker to locate, at execution time, the concerned
variable, function or procedure.


Examples of $import:

   program example;
   $import
      ' pl1_program (pl1)' : proc1, funct1 ;
      'fortran_program (fortran)' : proc3 ;
      'external_static' : v1, v2, v3 ; (* Multics external variables
                         allocated in external static standard area *)
      'hcs_ (pl1 descriptors)' : make_seg ;
      'pascal_program (pascal)' : proc5, v4, v5 ;
      'segment_x$procedure_y (pl1)' : proc_xy ;
      'static_data (cds)' : v6, v7 ; (* allocated in a data segment
                                         created by the cds command *)
      'ioa_$ioa_ (pl1 descriptors)' : ioa_1, ioa_2 $

   The generated links will be:

       Pascal object name                      Multics target

      proc1                                    pl1_program$proc1
      funct1                                   pl1_program$funct1
      proc3                                    fortran_program$proc3
      v1                                       *system$v1
      v2                                       *system$v2
      v3                                       *system$v3
      make_seg                                 hcs_$make_seg
      proc5                                    pascal_program$proc5
      v4                                       pascal_program$v4*
      v5                                       pascal_program$v5*
      proc_xy                                  segment_x$procedure_y
      v6                                       static_data$v6
      v7                                       static_data$v7
      ioa_1                                    ioa_$ioa_
      ioa_2                                    ioa_$ioa_

   Imported variables must be declared in the var section in the
standard manner.  But, since they were mentionned in the $IMPORT
section, they are not allocated in the object segment and will be
referenced through a link.
   Imported procedures and functions are declared at the standard
place in the program with a standard heading including the declaration
of the parameters in the standard manner, but their body (declarations
plus statement part) is replaced by the reserved word "external".



The $export directive: The $export directive appears immediately after
the $import directive (if it exists) and identifies which of this
program's procedures, functions and variables are to be made
accessible to other programs.  It can be used to obtain more space for
large global variables or arrays.  (Internal global variables can
occupy only 16383 words.)


Its syntax is:

   $export <pascal_id_list> "$"

   <pascal_id_list> = <identifier> {"," <identifier> }

   The given <identifier> is the identifier of the variable, procedure or
function in the Pascal program.


Examples of $export:

  $export
     proc6, v8, v9 $

   Exported variables, procedure or functions are declared in the
standard manner.  But the compiler makes them accessible by external
programs through definitions which are generated in the object
segment.  List of generated definitions may be obtained using the
Multics "print_link_info" command which analyzes the object segment.


   However, there is one difference between exported and non exported
variables.  Non exported variables are allocated in the static section
of the object segment, which is limited by Pascal implementation to
16K machine words.
  Exported variables are by default dynamically allocated as external
variables in the process_dir (like PL1 external statics).  So, you can
use $EXPORT directive to export too big variables which could not be
allocated in the static section of the object segment.
   If the program is compiled using the "-private_storage" control
argument, which is not the default, the exported variables will be
allocated in a data segment named "program_name.defs".  In this case
total size of exported variables cannot exceed one segment.



Separate Pascal compilations:
   This part concerns only Pascal programs sharing procedures,
functions or variables.

   Separate Pascal compilations can be used for the developpment of
big applications, libraries, etc..
   Since these programs share procedures, variables, they must contain
the declarations of these objects, and these declarations must be
identical in the different programs.
   It is highly recommended to use include files ($INCLUDE extension)
to include in the different sources the useful constant declarations,
type declarations, variable declarations and procedure or function
headings.


   The pascal_cref command can be used to improve, after compilation,
the validity of the separate compilations by checking the conformity
of types of objects shared by different Pascal object segments.  (This
command scans the symbol tables of the object segments.)

   Example of separate Pascal compilations:

    PROGRAM caller (output) ;
       $IMPORT
          'called (pascal)' : open, n_lines, close ;
          'called$out_nl (pascal)' : write_line $
       TYPE
          output_type = (discard, terminal) ;
       VAR
          n_lines : integer ;
       PROCEDURE open
          (file_type : output_type) ; EXTERNAL ;
       PROCEDURE write_line
          (str : PACKED ARRAY [a..b : integer] OF char) ; EXTERNAL ;


       PROCEDURE close ; EXTERNAL ;
       BEGIN
          open (terminal) ;
             ....
          write_line ('This is a line.') ;
             ....
          write_line ('This is one other line.') ;
             ....
          close ;
          writeln ('Number of lines written : ', n_lines) ;
       END.


    PROGRAM called ;
       $EXPORT
          open, out_nl, close, n_lines $
       TYPE
          output_type = (discard, terminal) ;
       VAR
          output_file : text ;
          n_lines : integer ;


       PROCEDURE open
             (file_type : output_type) ;
          BEGIN
             CASE file_type OF
                discard :
                   fconnect (output_file, 'discard_') ;
                terminal :
                   fconnect (output_file, 'syn_ user_output') ;
             END ;
             n_lines := 0 ;
             rewrite (output_file)
          END ;


       PROCEDURE out_nl
             (str : PACKED ARRAY [a..b : integer] OF char) ;
          BEGIN
             writeln (output_file, str) ;
             n_lines := n_lines + 1
          END ;
       PROCEDURE close ;
          BEGIN
             fclose (output_file)
          END ;
       BEGIN
       END.


   Note that "called" is a kind of library.  His main procedure is
empty and never used.
   Such are most of the Pascal applications using separate
compilations.  There is only one significant main procedure, which is
first called when the program is executed.


Call from Pascal to other languages:
   This part describes the rules which must be observed when a Pascal
program calls a procedure written in one other language.


   Multics Pascal allows a Pascal program to "import" external
procedures written in other languages and compiled by other
translators.
   Since these procedures are somewhere else, they dont have any body
in your source program.  This body is replaced by the reserved word
"external":


Examples:

 PROCEDURE arg_count (VAR arg_count, error_code : integer) ; EXTERNAL;

   The "$import" directive, which takes place immediately after the
program header, contains informations usefull to the compiler for the
generation of a link to the external procedure: the name of the
segment containing this procedure, and the name of this procedure in
this segment.  It contains also the name of the language in which this
procedure was compiled.  This name can be followed by the word
"descriptors" meaning that this procedure is expecting for parameter
descriptors.


Examples:

 $IMPORT 'cu_ (pl1)' : arg_count $

 This program imports the PL/I procedure arg_count from the segment
cu_.

$IMPORT
   'cu_ (pl1)' : arg_count, arg_ptr $
   ...
PROCEDURE arg_count (VAR arg_count, error_code : integer) ; EXTERNAL ;
PROCEDURE arg_ptr (arg_no : integer ; VAR arg_addr : arg_ptr ;
   VAR arg_len, err_code : integer) ; EXTERNAL ;

 This program imports from the segment cu_ the procedures arg_count
and arg_ptr.

   In the two previous examples, the name of the entry point is the
same than the internal Pascal name of the procedure.  But this
internal name can be different:


Examples:

$IMPORT
  'cu_$arg_count(pl1)' : argument_count ;
  'cu_$arg_ptr (pl1)' : argument_pointer $
  ...
  TYPE
  argument = PACKED ARRAY [1..256] OF CHAR ;
  arg_ptr = ^argument ;
  ...
PROCEDURE argument_count (VAR arg_count, error_code : integer) ;
EXTERNAL ;
PROCEDURE argument_pointer (arg_no : integer ; VAR arg_addr : arg_ptr ;
  VAR arg_len, err_code : integer) ; EXTERNAL ;


Note that the following "import" specifications are equivalent:

   $IMPORT 'cu_$arg_count (pl1)' : arg_count $

   $IMPORT 'cu_ (pl1)' : arg_count $


   When you want to use a procedure which was written in one other
language, you know this language if you wrote yourself this procedure,
or you can determine what is the language used looking at the
declaration of the procedure (You probably found this declaration in a
manual, or an info segment..).  It does not matter if the procedure
was not really written in this language, the only one thing you have
to know is in which language the declaration is given.  (For instance,
the entry point cu_$arg_count is described using a PL/I declaration.
In reality it is an ALM program.  It does not matter.  Since this
program is described in the documentation with a PL/I declaration he
conforms to the PL/I call standards and for your Pascal program it
will be a PL/I program.)


   Now, you have to determine if this entry point needs descriptors.
This point is very important.
   A descriptor is a data structure which is passed to the called
procedure and describes the type and dimensions of a parameter.  This
descriptor is used by the generated code of the called procedure if
the parameter may have different sizes or dimensions.  It is the only
whay for this procedure to find out what are the actual size or
dimensions of the passed parameter.


   Descriptors are used by PL/I and FORTRAN.
   A PL/I procedure needs descriptors when type description of at
least one of his parameters contains stars ("*") or when it is
declared "options (variable)".
   A FORTRAN procedure needs descriptors when type description of at
least one of his parameters contains stars ("*").


  If the external procedure needs descriptors, you must add the word
"descriptors" after the name of the language, between the parentheses.

   Examples:

   $IMPORT 'hcs_ (pl1 descriptors)' : make_seg $
    ...
   TYPE
      data = ...
      dir_name = PACKED ARRAY [1..168] OF char ;
      entry_name, ref_name = PACKED ARRAY [1..32] OF char ;
      data_ptr = ^data ;
    ...


   PROCEDURE make_seg (dir : dir_name ; entry : entry_name ;
      ref : ref_name ; mode : integer ; VAR seg_ptr : data_ptr ;
      VAR err_code : integer) ;
   ...
   BEGIN
          ....
      make_seg ('>udd>PROJECT>Me>this_dir', 'this_segment', '  ',
         read_write, seg_ptr, error_code) ;
      IF error_code <> 0 THEN
         BEGIN
            ...


  Pascal only accepts declaration of procedures which have a definite
-and fixed- number of parameters, which types can't change.
   But for PL/I or FORTRAN procedures which may receive different
numbers of parameters, or parameters which type may change, Pascal
allows to declare more than one Pascal procedure, each Pascal
procedure corresponding to a different use of this procedure.

   Examples:

   $IMPORT 'ioa_$ioa_ (pl1 descriptors)' : ioa_1, ioa_2 $
    ....
   TYPE
     char_18: PACKED ARRAY [1..18] OF char
     ...
    ...


PROCEDURE ioa_1 (control_string : char_18) ; EXTERNAL ;
PROCEDURE ioa_2 (control_string : char_18; number : integer); EXTERNAL;
    ....
   BEGIN
    ....
      IF result = 0 THEN
         ioa_1 ('The result is null')
      ELSE
         ioa_2 ('The result is : ^d', number) ;

   The procedures ioa_1 and ioa_2 have the same target : the Multics
subroutine ioa_ which is declared "options (variable)".  They
correspond to different uses of this procedure.  (ioa_ uses the
descriptors to know the number of parameters and their types.)


   Now you have to determine if the parameter has to be passed by
address (i.e.  declared with the reserved word "VAR") or by value
(i.e.  without the reserved word "VAR").
   If the parameter is an input-output parameter or an output
parameter, it MUST be passed by address.  If it is an input parameter,
it is more secure to pass it by value.  But since this way of passing
parameters is less efficient (a copy of the value is made in the stack
frame of the calling procedure), and is sometimes impossible if the
value is too big, you can pass it by address.  Let's hope that the
called procedure works as it is supposed to and doesn't modify it!
   Normally, even if you did not write this procedure, you must be
able to know which parameters are input, output or input-output
parameters (A good documentation must say these things).
  If you have some doubt, pass the parameter by address.


   Now you have to give your parameters the right type which
corresponds to the type of the parameter the procedure is waiting for.

   If the procedure does not need descriptors, declare parameter types
which conform to the data types equivalences given at the end of this
segment.


   If the procedure needs descriptors, during the compilation, the
compiler looks at the types of the parameters and generates (if
possible, otherwise there is one error) the descriptor for the
concerned language corresponding to the Pascal type of this parameter.


If the Pascal type is:           The generated PL/I descriptor will be:

boolean                               fixed bin (35) [aligned]
                                   (value transmitted is the internal
                                      code 1=true, 0=false)
integer                               fixed bin (35) [aligned]
real                                  float bin (63) [aligned]
any typed pointer                     ptr aligned
any enumerated type                   fixed bin (35) [aligned]
                                     (value transmitted is the internal
                                         code)
SET OF boolean                        bit (2) [unal]
SET OF char                           bit (128) [unal]
SET OF a..b                           bit (b+1) [unal]
  string (n)                            char (n) varying [unaligned]


  RECORD   (see NOTE (*) below)
    length : 0..n ;
    string : PACKED ARRAY [1..n] of char
  END;                                  char (n) varying [unaligned]
  RECORD
    a : [any type of this
          list excepted sets]
    ...
    (No variant part)
  END                                   1 aligned,
                                           2 [the corresponding type] ,
                                           ...


  ARRAY [...] OF [any type of this
                    list excepted sets]
                                        (...) [the corresponding type]
	Subscripts:
                                       Pascal type element.
          Subscripts:
	   boolean			0:1
	   char				0:127
	   enumerated of n elements		0:n-1
	   numeric a..b			a:b


  (*) NOTE : This way of passing char(n) varying parameters was useful
in Pascal 8.02, when dynamic-strings did not exist.
  If you want continue to use it, BE CAREFUL: The Multics PL/1
implementation supposes that, for these parameters, the address passed
is not the address of the beginning of the variable (length integer
word) but the address of the string itself.  So, for these parameters,
pass ALWAYS BY ADDRESS the "string" field of the corresponding Pascal
record.  (This is done automatically for "string (n)" Pascal
parameters transmitted to PL1)


Reference from Pascal to non Pascal variables:
   Non Pascal variables can be external variables or variables
allocated in a data segment.
   Pascal declarations must conform to the data type equivalences
given at the end of this info file.

   External variables can have been created by Multics (like
pl1_severity_ or pascal_severity_ after a compilation) or may be
FORTRAN commons or variables declared "external static" in a PL/I
program.  The given <external_description_string> must be
'external_static':


Examples:

  $IMPORT 'external_static' :  pascal_severity, common_a $
      ....
  VAR
    pascal_severity_ :  integer ;
    common_a :  ARRAY [1..10000] OF real ;

   Variables allocated in a data segment must be referenced using the
name of the segment followed by the name of the variable.  Data
segments can be generated using the Multics "create_data_segment"
command.


Examples:

  $IMPORT 'common_data (cds)' :  nbr_of_calls, last_caller$
   ....
   VAR
      nbr_of_calls :  integer ;
      last_caller :  RECORD
            user :  PACKED ARRAY [1..22] OF char;
            project :  PACKED ARRAY [1..9] OF char
         END;


Call from PL/I to a Pascal main procedure:
   Pascal main procedures accept arguments which can be read from
inside the program using ARGC and ARGV extensions.  (Multics PL/I
subroutines cu_$arg_count, cu_$arg_ptr, etc...  can also be used).
These arguments must be non varying character strings.  The Pascal
main procedure must be declared "options (variables)" (PL/I) or
"descriptors" (FORTRAN) because it needs descriptors.
  The last argument can optionnally be an integer (or fixed bin (35)).
If this argument exists, it will be affected by the STOP Pascal
predefined procedure (extension) and can be used to contain a return
code if necessary (It is set to zero by default if it is transmitted
and not affected by a STOP in the Pascal program).


Examples:

   In a PL/I program:
          dcl pascal_program entry options(variable) ;
          dcl code fixed bin (35) ;
          dcl name char (32) ;
          dcl string char (168) ;

          call pascal_program ("-arg1", "-arg2", name, string) ;

    Or:

          call pascal_program ("-arg1", "-arg2", code) ;
          if code ^= 0 then
            .....


For the Pascal program :

       PROGRAM pascal_program ;
          ...
       VAR
          error_code :  integer ;
          ....
       BEGIN
          ...
              (* process args, etc...  *)
          ...
          IF error THEN stop (error_code)
          ELSE stop (0)
       END.


Call from PL/I to a Pascal exported procedure or function:
   In your PL/I program, give your procedure a name of the form:

          <pascal_program_name>$<lower_case_procedure_name>

   If the name of the exported procedure was added to the Pascal
program, you can only use the procedure name.
   The number of parameters must be equal to the number of parameters
the procedure is waiting for.
   The types of the parameters must conform to the data type
equivalences given at the end of this segment.

   If the Pascal procedure is waiting for one conformant array, the
PL/I description of the corresponding array must contain star array
bounds for the variable dimensions.  (Descriptors will be passed to
the Pascal procedure).


Examples:

      For the Pascal declarations:

  PROGRAM pascal_program ;
          ....
   $EXPORT foo, get_ptr $
          ....
   TYPE
      char_32 = PACKED ARRAY [1..32] OF char ;
      data = RECORD
               ....
             END ;
      data_ptr = ^data ;
          ....


   PROCEDURE foo (VAR index : integer ;
      VAR matrix ARRAY [a..b : integer; c..d : integer] OF real ;
      string : char_32) ;
          ....
      BEGIN
          .....
      END (* foo *) ;
          ....
   FUNCTION get_ptr (VAR seg_name : char_32) : data_ptr ;
          ....
      BEGIN
          ....
      END (*get_ptr *) ;


You will declare, for instance, in your PL/I program:

   dcl pascal_program$foo entry (fixed bin (35),
      (*,*) float bin (63), char (32)) ;
   dcl pascal_program$get_ptr entry (char (32)) returns (ptr) ;

   Note that if the Pascal program was compiled with the control
argument "-add_exportable_names", the names of the exported procedures
have been added by the compiler to the object segment, and that you
can, in the PL/I program, call the procedures "foo" and "get_ptr",
without giving the segment name.


Reference from PL/I to a Pascal exported variable:
The following example illustrates how to access a Pascal exported variable.

     dcl pascalprogram$a ptr external;
     dcl a fixed bin (35) based (pascalprogram$a);

  for:

     program pascalprogram ;
     ...
     $export a $
     var
        a :  integer ;

This convoluted method is used because a Pascal exported variable is
not necessarily the same as a PL/I external variable with the same
name.  If the Pascal program above has been compiled with the
-private_storage (-ps) option, the variable "a" will be allocated in a
segment named "pascalprogram.defs" as pascalprogram.defs$a instead of
in the user free area as the *system variable a.


Data types equivalences:

   Simple data:

                                        PASCAL
 (PL/I alignment between brackets
  is the default)

FORTRAN integer
PL/I fixed bin (35) [aligned]
PL/I fixed bin (35) unaligned           integer
PL/I fixed bin (n) [aligned]  0<n<36    numeric (-2**n .. +2**n - 1)
PL/I fixed bin [aligned]                numeric (-2**17 .. +2**17 -1)

FORTRAN logical true                    integer = -1
FORTRAN logical false                   integer = 0

FORTRAN integer = 0
PL/I fixed bin (35) = 0                 boolean false
FORTRAN integer = 1
PL/I fixed bin (35) = 1                 boolean true

FORTRAN double precision
PL/I float bin (63) [aligned]
PL/I float bin (63) unaligned           real

PL/I char aligned
PL/I char [unaligned]                   packed array [1..1] of char
FORTRAN character*n
PL/I char (n) [unaligned]
PL/I char (n) aligned                   packed array [1..n] of char

PL/I ptr [aligned]                      any typed pointer
PL/I null  value                        nil value

PL/I bit (n) [unaligned]
PL/I bit (n) aligned            SET OF [a .. x] (enumerated base type)
                                with ord (a) = 0 and ord (x) = n-1
                                SET OF [0..n-1]  (numeric base type)

PL/I char (n) varying aligned
PL/I char (n) varying [unaligned]       string (n)
			or : (still possible. See NOTE above..)
				RECORD
                                          length : 0..n ;
                                  string : PACKED ARRAY [1..n] OF CHAR
                                        END ;
PL/I (n) char [unaligned]               PACKED ARRAY [1..n] OF char

PL/I char [unal]
PL/I char aligned                       PACKED ARRAY [1..1] OF char

   Agregates

PL/I aligned structure which members are
type of any aligned type of this list
(excepted bit strings)
                                Unpacked unvariant record which fields
                                have the corresponding Pascal type.

PL/I array of aligned elements which type
if any type of this list (excepted
bit strings)
                                Unpacked array of corresponding
                                Pascal type element.

Fortran ONE DIMENSION array of
integer, or double precision    Unpacked array of corresponding
                                Pascal type element.

      Subscripts:
      0:1                                     boolean
      0:127                                   char
      0:(n-1)                                 enumerated of n elements
      a:b                                     numeric (a..b)
