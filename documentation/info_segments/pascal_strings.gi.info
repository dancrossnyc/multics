
08/04/86 pascal_strings.gi.info
 This info file describes string implementation in Multics Pascal.
Strings are an extension to the Standard, and they have been
implemented in some from in many versions of the language.  This
implementation refers to a document of the BSI ("Extensions to
Standard Pascal for string handling", 25 February 1985).


Terminology:
The following terms are used in this document:
"fixed-string"
	Will designate the current "packed array of char" character string.
	Multics Pascal accepts any packed array of char (conformant or not).
"dynamic-string"
	Will designate the string of the new form.
	A dynamic string has a maximum length, given at the definition of
	its type, and a current length which is >= 0 and <= the maximum
	length.
	There is an implementation defined limit for the maximum length
	of a string. Under Multics, this limit is one segment and is the
	value of the predefined constant "maxstring".


Representation:
A dynamic-string value consists of an ordered sequence of elements of type
char: the number of elements is the current length (which may be zero).
The representation of a string is implementation defined. Under Multics
it is similar to the following structure:

	RECORD
	  current_length : 0..maxlength ;
	  character_sequence : PACKED ARRAY [1..maxlength] of char
	END;

and is compatible with the PL/1 "char (maxlength) varying" declaration.


Variables:
The form of declaration of a dynamic-string variable is "string (n)"
where n is its maxlength, which must be > 0.  "string" is a
predeclared shema identifier.  (Multics Pascal does not provide
general implementation of schemas, but string is implemented like a
schema).

  Ex :	TYPE
	  s_256 : string (256) ;
	VAR
	  s1, s2 : string (32) ;
	  s3 : s_256 ;

A dynamic string is not an array, but its elements may be referenced
by indexing, e.g.  sv [i].  Such references are of type char.  It is
an error if the index is less than 1 or exceeds the current length.


Literals:
The notation for string litterals is extended to include the null string ('').
All other string-type litterals (and declared constants) are of the
fixed-string type determined from their length.


String expressions:
Dynamic-string values, fixed-string values, and values of type char
may be mixed within expressions.  In such expressions, there is
implicit coercion of fixed-strings and characters to dynamic-string
type.

The "+" operator is used within expressions to denote concatenation of
dynamic-string values.

  Ex:
	s_132 + 'abc' + 'x'


Assignment:
A dynamic-string expression can be assigned to a dynamic-string
variable.  It is an error if the length of the value exceeds the
maximum lenth of the variable.

  Ex:
	s1 := '' ;
	s1 := 'abc' + s2 + 'X' ;
	s1 := s2 ;
	s1 := 'x' ;


Notes: Standard rules concerning assignment to fixed-strings are
unchanged.  So it is not allowed to assign a dynamic-string to a
fixed-string using an assignment statement.


Parameters:
Value and VAR formal parameters are available.  The only special rule
is that a VAR formal parameter declared as type "string" (with no
length) is compatible with an actual dynamic-string variable of any
length.


Comparison: The comparisons are allowed between dynamic-string values,
the process beeing defined as a lexical comparison (according to the
Standard rules) of corresponding elements from 1 to the length of the
shorter string, and if this yelds equality then the result of
comparing the lengths.

  Ex:
	IF sv = (fixstr + '.ABC') THEN


Read and write:
Read (f, sv)
	Reads from a text file f into a dynamic-string variable sv.
	Characters are transfered sequentially with sv [1] until the number
	of characters equals the maxlength of sv or eoln (f) becomes true.
	If eoln (f) was true initially the effect is the same as sv := ''.
write (f, s : w)
	writes a dynamic-string value s to the text file f, the characters
	of s beeing written sequentially starting with s[1].
	Let ls represent length (s). If w > ls then (w-ls) leading spaces
	are inserted. If ls > w then the last (ls-w) characters of s are
	not transfered. If w is omitted, exactly ls characters are
	transmitted.


Additional standard procedures and functions:

Function length (s)
	Where s is any dynamic string value returns an integer being
          the current length of s.
Function maxlength (sv)
	Where sv is any dynamic-string variable reference returns an
          integer being the the maxlength of the variable.  Function
          position (s1, s2) where s1 and s2 are dynamic-string values,
          returns an integer which is zero if s2 does not contain s1,
          else the index in s2 of the first occurrence of s1 in s2.


Function substr (s, i, n)
	Where s is a dynamic-string value and i and n are integer
          values returns a dynamic-string value containing the
          elements s[i], s[i+1]..s[i+n-1].  It an error if these
          elements are not within the current length of s.
Procedure insert (s, sv, i)
	Where s is a dynamic-string value, sv a dynamic-string variable
	reference, and i an integer value, inserts s into sv at index i.
	It is an error if i < 1, if i > length(sv)+1, or if
	length (s) + length (sv) > maxlength (s).


Procedure delete (sv, i, n)
	Where sv is a dynamic-string variable reference, and i is an
          integer value, ;deletes n characters of sv at index i.
          Elements s[i]..s[i+n-1] are deleted, and elements (if any)
          s[i+n]..s[length(s)] are moved into s[i]..  etc...  It is an
          error if (i+n) > length (s).
