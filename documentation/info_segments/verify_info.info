:Info: verify_info: vi:  2020-10-31  verify_info, vi

Syntax as a command:  vi  {INFO_PATHs} {-control_args}


Syntax as an active function:  [vi INFO_PATHs]


Function: verifies info segment format, section titles, and names
against guidelines for Multics info segments.  The active function
returns the number of the highest severity error that occurs.

Also, control arguments display important guidelines for info
segments.


Arguments:
INFO_PATHs
  relative or absolute pathnames of the info segments to be verified.
  A suffix of .info is assumed if not given.  The star convention is
  supported to match several segments in the given directory.


Control arguments as a command:
-names, -nm
  add names required by guidelines if missing from an info segment.
  Reorder names following guidelines.  If names exist that conflict
  with guidelines, ask user for permission to remove those names.
  If removal not granted, move conflicting names to end of name list.
  Name changes are listed in informational messages.
-no_names, -nnm
  suppress name additions, removals, and reordering.  Error messages
  report names that are missing, conflict with guidelines, or need to
  be reordered.  (default)
-force_names, -fnm
  change names to follow all guidelines without user queries.


-totals, -tt
  displays only a count of errors found, with level of the highest
  severity error.  The active function assumes -totals and returns
  only the level of the highest severity error.  All other output is
  suppressed.
-long, -lg
  displays long error messages and warnings. (default)
-brief, -bf
  displays only error message keywords at end of block or section
  plus summary messages for paragraph and line errors.
-rules {AREA}
  displays verify_info guidelines and rules for info segment structure
  and format.  See "List of rule areas" below.


Control arguments (displaying info lines):
   It is sometimes useful to display lines of an info segment or block
   to understand errors reported by verify_info.  Line-related errors
   are reported by keyword(s) at the end of each displayed line.
-lines,
-ln COUNT,
-ln START:COUNT
  displays lines of the info segment.  The optional START line number
  and COUNT of lines refer to lines within the entire info segment.
  If START is a negative integer, it refers to a line number
  counting back from the end of the segment: -lines -3: displays the
  final 3 lines of the segment.  If neither START nor COUNT is given,
  the entire info segment is printed.


-block,
-bk COUNT,
-bk START:COUNT
  displays lines of each block of the info segment.  The START and
  COUNT values refer to lines within the block.  If START is a
  negative integer, it refers to a line counting back from the end of
  the block.  -block -3:  displays the final 3 lines of the info
  block.  If neither START nor COUNT is given, each info block is
  printed.


Control arguments (debugging verify_info):
   These control arguments display additional data used to check info
   segment format against guidelines.
-debug SELECTOR,
-db SELECTOR
  selects a debugging function.  -debug may be given more that once
  to select several functions; or once with several SELECTORs
  separated by commas.


List of rule areas:
   The -rules AREA operand may be any of the following.
all, a
  displays all rules and guidelines used by verify_info. (default)
file, f
  displays guidelines for supported file structures (allowed order of
  :Info: :[Info]: :Entry: and :hcom: block divider lines within an
  info segment).
block, bk
  displays rules used to determine the kind of each info block
  (e.g., command or active function, subroutine, subsystem request,
  etc.).


section, scn
  displays Multics standard info segment section titles, and a list of
  obsolete or deprecated titles with a preferred replacement.
KIND_OF_INFO_BLOCK
  displays section titles typical for a particular kind of info block
  including the usual order of appearance within the block of each
  title.  See "List of info block kinds" below.


List of info block kinds:
  The -rules KIND_OF_INFO_BLOCK value may be any of the following.
all_kinds, ak
  display section titles typical of all of the following block kinds.
command, cmd
  display section titles used in info blocks describing commands
  and/or active functions.
general_info, gi
  display section titles used in info blocks describing general
  information.


subsystem, ss
  display section titles used in info blocks describing subsystem
  requests and/or active requests; subsystem request summary; or other
  subsystem topic.
request, req
  display section titles used in info blocks describing subsystem
  requests and/or active requests.
topics, topic
  display section titles used in info blocks describing subsystem
  topics (information not a request description or summary of
  requests).


subroutine, subr
  display section titles used in info blocks describing a subroutine
  or function.  This includes a subroutine introduction block, and
  blocks describing a subroutine entry point.
io_module, io
  display section titles used in info blocks describing an I/O module;
  or one of its setup operations (open_file, close_file, or detach);
  or one of its control orders.


List of debug selectors:
file, f
  display names, plus a specification line containing:
    - file structure case number
    - specification string giving block cardinality and block
      type constraints
    - count of each type of info block divider:
       N:  first info block of segment, having no :Info: divider.
       E:  a subroutine :Entry: divider.
       I:  an :Info: divider.
      [I]: an :[Info]: divider.
       H:  an :hcom: history comment divider.


block, bk
  displays block divider and header details.
section, scn
  displays items found in Syntax... sections.
list, ls
  displays item names found in Arguments, Control arguments, and
  List of... sections.


Notes on verification:
The verify_info (vi) command verifies the format, section titles, and
names of an info segment.  For more details on info segment format,
type:  help info_seg.gi


List of error message severities:
  Error messages printed by verify_info are of five severity levels:
Severity 5
  structural errors preventing parsing of the info segment into
  blocks, sections, paragraphs, and lines.
Severity 4
  errors that should be corrected before installing the info segment.
Severity 3
  errors in following info segment guidelines, a few of which may
  qualify as valid exceptions.
Severity 2
  even less important errors.
Severity 1
  warnings of expected situations, such as use of an non-typical
  section title.


:hcom:
/****^  HISTORY COMMENTS:
  1) change(2020-06-12,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
      A) Initial version of this info segment.
  2) change(2020-10-31,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
      A) Remove incorrect ellipsis usage.
      B) Correct references to info block divider tokens:
            :Info:  :[Info]:  :Entry:  :hcom:
  3) change(2020-11-25,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
      A) Revise for use of verify_info_data.incl.pl1 include file,
         and its simplification of the verify_info user interface.
                                                   END HISTORY COMMENTS */
