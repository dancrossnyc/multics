
09/21/87  video 
Known errors in the current release of video.
#	Associated TR's
Description

94  phx20924
(bound_video_) Occasionally an error message is displayed on a user
terminal "The request was not within the boundaries of the requesting
window".  This is overwritten by the next screen update and appears to
have no lasting significance.

91  phx19510
set_editing_chars loses by not setting the erase character until the
order is repeated a second time.

90  phx19564
Fatal process error caused by line_status pending.  The reconnection
control order should disable line status reported.

87  phx19064
Video does not set the proper editing character when invoked.  It
always sets the pound and at signs.

81  phx16928
Something funny is going on with reset_more.  At the least we should be
consistent.

80  phx11770
The iox_ emulator does not implement can mode correctly.

79  phx18121
When doing a large amount of output, an async event in the same window
(e.g.  an interactive message), will often cause the cursor to be
positioned several lines above the correct position.  Printing resumes
with the incorrect cursor position.

77  phx16480
When using dial_out in ^raw mode with video on, more breaks
ocassionally cause things to hang.  Somebody is losing a wakeup.

75  phx17627
Sometimes characters typed are not echoed, but instead spaces are
echoed, yet the real characters do find their way into the input
buffer.  This tends to happen when async events such as wholines
(specifically barmar's vwholine and status_line) go off.  Video is
probably not handling the echo nego correctly, but there could also be
something wrong with ring0.

72  phx16136
Both the TTF mechanism and tc_io_ need to be changed slightly to take
to allow use of terminals which consider line "1" to be the last line
on the screen.

71  phx15795
The video system editor mis-handles TAB's if there is a prompt at the
beginning of a line.

68  phx15379
There are problems with the way window_io_iox_ hacks cu_
intermediaries.  It can get confused an call the wrong one (it's hook,
vs.  the real one).  This can cause one to jump from level N to level
one.

67  phx16060 phx19054
Typing ESC-9999 TAB causes a fatal process errorr.  This is not nice.
Something nasty is going on in the internal procedure
redisplay_input_line.

62  phx15797
Very randomstuff going on with a read message and wdc clear_window; wdc
set_position ...".  Cursor sometimes winds up in the wrong place.

61  phx15523 phx14889 phx16762
The video system currently allows one to set output conversion tables
and special characters, but doesn't use the new setttings.  We should
support these tty_ features, and until we do we should trap the attempt
to change them.  This is also a problem with other unsupported control
orders that tc_ passes on to ring0 (e.g.  abort, store_id).

60  
"ata;wdc invoke;dta;wdc revoke" will cause a fatal process error.
There are problems with the way video_utils_ deals with remember the
-login_channel switch.

58  phx15409 phx16491 phx17888
When window_$get_echoed_chars is told to read N characters, it does not
return until the N+1st character is typed.  This is due to the
definition of the echo negotiation protocol.  Either the protocol
should be redefined (consequences?)  or window_ should be changed to
negotiate N-1 characters and then read the last character and echo it
"by hand".

49  
The video system does not interact well with vertsp mode.  When a
formfeed is encountered in an output string, it simply positions the
cursor to the last line of the screen, causing a more break only if
more_mode=wrap.  The problem is in window_io_iox_ in the internal
routine representation.  On line 1259, there is an explicit call to
position the cursor, regardless of any mode settings.  This should be
replaced by code which checks the more mode, and causes an immediate
more break by the appropriate method (clearing to the end of the window
if necessary).

The code should also make sure to output all of the text before the
formfeed BEFORE it causes the more break, and the rest after.  This
will have to wait until some sort of buffering scheme for tc operations
is invented.

46  phx12638 phx13306
Very large amounts of padding on high speed (e.g.  9600 buad) lines for
operations such as insert and delete lines can lead to fatal process
errors.

45  phx12800
When QUIT is hit in the middle of an input line, a QUIT is generated,
the input is NOT thrown away (no reset_read available), but the pending
input is not redisplayed.

42  phx12624
The video system should use the terminal's "native" scrolling capability
when there is only one window and it occupies the entire screen.

39  phx12593
The video system needs a reset_write mechanism.  This will allow the
flushing of output on QUIT and all sorts of other nice things.  This
requires cooperation all the way down to the FNP, with some scheme
involving packets of characters with acknowledgement.

27  phx11489
window_call change_window does not default a change of the height to
accomodate a change of the top line.  That is, a change_window -line N
of a full screen window should not fail.

12  phx11236
When in red mode, clear_region of any kind must somehow un-red things.
The difficulty is that red mode is purely a creation of the line editor,
and all the other clearing primitives would have to do the same.  We
could send the "GET THE RED OUT" sequence whenever we request cleol in
the line editor, but that would be a crock.

It may be that the only solution is to wait for real attribute
management.

5  
set_window_info should clear the parts of the screen changed by the
change, that is, space formerly occupied by the window that is no
longer, or the part that has just been pirated.
