03/17/86  heap_manager_


To obtain information on a particular entry point use the "ep" request


Entry points in heap_manager_:
   (List is generated by the help command)


:Entry:  push_heap_level: 03/17/86  heap_manager_$push_heap_level


Function: This entry point creates a new heap level, allocates
the heap header and chains the previous heap to the current
heap. If the stack_header_ptr is null an error of
error_table_$null_info_ptr is returned.


Syntax:
declare heap_manager_$push_heap_level entry (pointer, fixed
  bin(17), fixed bin(35));
call heap_manager_$push_heap_level (stack_header_ptr, exe_level,
  code);


Arguments:
stack_header_ptr
   is a pointer to the stack header.  This can be obtained via
   the PL/1 builtin stackbaseptr().  (Input)
exe_level
   is the new execution level after the new heap is created.
   (Output)
code
   is a standard status code.  (Output)


:Entry:  pop_heap_level: 03/17/86  heap_manager_$pop_heap_level


Function: This entry point resets the heap to the previous level
freeing the old heap and any variables allocated therein.


Syntax:
declare heap_manager_$pop_heap_level entry (pointer, fixed
  bin(35));
call heap_manager_$pop_heap_level (stack_header_ptr, code);


Arguments:
stack_header_ptr
   is a pointer to the stack header.  This can be obtained via
   the PL/1 builtin stackbaseptr().  (Input)
code
   is a standard status code.  (Output)


:Entry:  get_heap_header: 03/17/86  heap_manager_$get_heap_header


Function: This entry point returns a pointer to the heap header
for the specified execution level.  If the execution level does
not exist an error of error_table_$no_heap_defined is returned.


Syntax:
declare heap_manager_$get_heap_header entry (pointer, fixed
  bin(17), pointer, fixed bin(35));
call heap_manager_$get_heap_header (stack_header_ptr, exe_level,
  heap_header_ptr, code);


Arguments:
exe_level
   is the execution level of the heap required. If a -1 is passed
   then the current execution level is used.  (Input)
stack_header_ptr
   is a pointer to the stack header.  This can be obtained via
   the PL/1 builtin stackbaseptr().  (Input)
heap_header_ptr
   is a pointer to the heap header for the passed execution
   level. (Output).
code
   is a standard status code.  (Output)


:Entry:  get_heap_level: 03/17/86  heap_manager_$get_heap_level


Function: This entry point returns the current execution level
from the current heap header.  If the heap does not exist an execution
level of -1 is returned.


Syntax:
declare heap_manager_$get_heap_level entry (pointer)
  returns (fixed bin(17));
exe_level =  heap_manager_$get_heap_level (stack_header_ptr);


Arguments:
stack_header_ptr
   is a pointer to the stack header.  This can be obtained via
   the PL/1 builtin stackbaseptr().  (Input)


:Entry:  get_heap_area: 03/17/86  heap_manager_$get_heap_area


Function: This entry point returns a pointer to the heap area
for the specified level.  The area is max_segsize - 50 words.
If the heap level specified does not exist an error of
error_table_$no_heap_defined is returned.


Syntax:
declare heap_manager_$get_heap_area entry (pointer, fixed
  bin(17), pointer, fixed bin(35));
call heap_manager_$get_heap_area (stack_header_ptr, exe_level,
  heap_area_ptr, code);


Arguments:
exe_level
   is the execution level of the heap area required. If a -1 is
   passed then the current execution level is used.  (Input)
stack_header_ptr
   is a pointer to the stack header.  This can be obtained via
   the PL/1 builtin stackbaseptr().  (Input)
heap_area_ptr
   is pointer to the heap area for the passed level. (Output)
code
   is a standard status code.  (Output)

