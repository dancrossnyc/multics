09/04/81	resource_info_


The resource_info_ subroutine returns selected information about RCP
resource types defined on the system.


Entry points in resource_info_:
   (List is generated by the help command)


:Entry: get_type:  09/01/81  resource_info_$get_type


Function:	 This entry point, given the name of a resource type,
indicates whether the resource type named is a device or a volume.


Syntax:
declare resource_info_$get_type entry (char (*), bit (1),
     fixed bin (35));
call resource_info_$get_type (name, is_volume, code);


Arguments:
name
   is the name of a defined resource type (see "Notes" below).  (Input)
is_volume
   is "1"b if the resource type given specifies a class of volumes.
   (Output) If "0"b, the resource type given specifies a class of
   devices.
code
   is a standard status code.	 (Output)


Notes:  A list of defined resource types may be obtained via the
list_resource_types command.


:Entry: limits:  09/01/81  resource_info_$limits


Function:	 This entry point returns information about quantity and time
limits for a given resource type.


Syntax:
declare resource_info_$limits entry (char (*), fixed bin, fixed bin,
     fixed bin, fixed bin (35));
call resource_info_$limits (name, max_quantity, default_time, max_time,
     code);


Arguments:
name
   is the name of a defined resource type.  (Input)
max_quantity
   is the maximum number of this type of resource that a process may
   assign at one time.  (Output)
default_time
   is the default reservation time, in minutes, for this type of
   resource.  (Output)
max_time
   is the maximum allowed reservation time, in minutes, for this type
   of resource.  (Output)
code
   is a standard status code.	 (Output)


Notes:  The information returned by this entry point is from the RTDT.
These are not the limits currently enforced by RCP.


:Entry: mates:  09/01/81  resource_info_$mates


Function:	 This entry provides information about the resource type or
types with which the given resource type may be mounted.


Syntax:
declare resource_info_$mates entry (char (*), fixed bin, char (*)
     dimension (*), fixed bin (35));
call resource_info_$mates (name, n_mates, mates, code);


Arguments:
name
   is the name of a defined resource type.  (Input)
n_mates
   is the number of mates returned.  (Output)
mates
   contains the name or names of the resource type(s) that may be
   mounted with this resource (see "Notes" below).  (Output)
code
   is a standard status code.	 (Output)


Notes:  If the number of elements in mates is too small to hold all the
mates for the given resource type, code is set to error_table_$smallarg
and mates is set to the null string.  However, n_mates still contains
the number of mates associated with the given resource type.


:Entry: defaults:  09/01/81  resource_info_$defaults


Function:	 This entry point fills a resource_descriptions structure
with the default registration parameters defined in the RTDT.


Syntax:
dcl resource_info_$defaults entry (char(*), char(*), pointer,
     fixed bin, fixed bin(35));
call resource_info_$defaults (name, subtype, resource_desc_ptr, 
     resource_no, code);

Arguments:
name
   is the name of a defined resource type.  (Input)
subtype
   is the name of a subtype of the resource type, defined in the RTDT.
   (Input) If subtype is the null string, the master defaults for the
   resource type are used.
resource_desc_ptr
   is the pointer to the entire resource_descriptions structure. (Input)
resource_no
   specifies the resource description structure as defined by 
   resource_description_item (resource_no).  If resource_no is 0, all 
   items are used.  (Input)
code
   is a standard status code.	 (Output)


:Entry: lock_on_release:  09/01/81  resource_info_$lock_on_release


Function:	 This entry point returns a value specifying whether
resources of a given type are to be locked for manual clearing at
release time.


Syntax:
dcl resource_info_$lock_on_release entry (char(*), bit(1) aligned,
     fixed bin(35));
call resource_info_$lock_on_release (name, lock_sw, code);


Arguments:
name
   is the name of a defined resource type.  (Input)
lock_sw
   specifies whether the resource is locked at release time.  (Output)
   "1"b	lock the resource
   "0"b	do not lock the resource
code
   is a standard status code.	 (Output)


:Entry: canonicalize_name:  09/01/81  resource_info_$canonicalize_name


Function:	 This entry point applies the proper canonicalization to a
resource name of a given resource type.	 See "Canonicalization
Routines" in the MAM RCP.


Syntax:
declare resource_info_$canonicalize_name entry (char(*), char(*),
     char(*), fixed bin(35));
call resource_info_$canonicalize_name (resource_type, resource_name,
     canonicalized_name, code);


Arguments:
resource_type
   is the name of a defined resource type.  (Input)
resource_name
   is the string to be canonicalized.  (Input)
canonicalized_name
   is the canonicalized representation of resource_name.  (Output)
code
   is a standard status code.	 (Output)
