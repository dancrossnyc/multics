08/04/86 pascal_util_


To obtain information on a particular entry point us the "ep" request


Entry points in pascal_util_:
   (List generated by the help command)


:Entry: establish_on_unit: 08/04/86 pascal_util_$establish_on_unit


Function: establishes one on_unit for the current procedure (main or
other).  On_units are used to establish handlers for unusual
occurrences (quit, program_interrupt, overflow, pascal_error, etc..).
For more information concerning on_units and conditions refer to the
Multics Reference Manual.
  If one on_unit already exists for the given condition, it is
replaced by this one.
  On units can be removed using the pascal_util_$remove_on_unit
procedure, or are automatically removed when the procedure exits.


Syntax:
	$IMPORT
	   'pascal_util_ (pascal)' : establish_on_unit $

	PROCEDURE establish_on_unit
	   (condition_name : PACKED ARRAY [a..b : integer] of CHAR;
	   PROCEDURE condition_handler) ; EXTERNAL :


Parameters:
condition_name
     Is the name of the condition for which an on_unit is established.
   Leading spaces are removed if any, and then all characters after and
   including first space encountered -if any- are removed.
condition_handler
     Is a procedure to be called if this condition occurs.  This
   procedure must be exported or imported but not internal.


Examples:

   establist_on_unit ('program_interrupt', abort_current_request_execution) ;

   establish_on_unit ('cleanup', clean_up_environment) ;


:Entry: remove_on_unit: 08/04/86 pascal_util_$remove_on_unit


Function: removes one on_unit in the the current procedure (main or
other).  On_units are used to establish handlers for unusual
occurrences (quit, program_interrupt, overflow, pascal_error, etc..).
For more information concerning on_units and conditions refer to the
Multics Reference Manual.
  It is not an error if no on_unit exists in the current procedure
for the given condition.
  On units can be established using the pascal_util_$establish_on_unit
procedure.


Syntax:
	$IMPORT
	   'pascal_util_ (pascal)' : remove_on_unit $

	PROCEDURE remove_on_unit
	   (condition_name : PACKED ARRAY [a..b : integer] of CHAR) ;
	   EXTERNAL ;


Parameters:
condition_name
      Is the name of the condition for which an on_unit is removed.
   Leading spaces are removed if any, and then all characters after and
   including first space encountered -if any- are removed.


Examples:


   remove_on_unit ('program_interrupt') ;


:Entry: breakall_on: 08/04/86 pascal_util_$breakall_on


Function: Sets the given Pascal text file in breakall mode.
   Some screen applications may need to input characters exactly at
the moment when they are typed in.  Since Pascal text input are
normally buffered line by line, you need this procedure to say to
Pascal I/O environment that you want now character by character input.
This procedure sets Pascal input in "unbuffered" mode for this text
file, and attempts to set the terminal in "breakall" mode.  (No error
is signalled if the terminal is already in this mode, or if this mode
is not accepted).
   If this call has switched your terminal from "^breakall" to
"breakall" mode, it is switched back to "^breakall" mode when the
procedure where the file is declared exits or when the procedure
pascal_util_$breakall_off if called for this file.


Syntax:

	$IMPORT
	   'pascal_util_ (pascal) : breakall_on $

	PROCEDURE breakall_on
	   (VAR text_file : text) ; EXTERNAL ;


Parameters:
text_file
   Is the concerned text file. It must be attached but may be open or
   not.


Examples:

	breakall_on (input) ;


:Entry: breakall_off: 08/04/86 pascal_util_$breakall_off


Function: Resets the given Pascal text file in non breakall mode if
it was put in breakall mode by a previous call to
pascal_util_$breakall_on (otherwise it has no effect).
   This procedure resets Pascal input in "buffered" mode for this text
file, and resets the terminal in "breakall" mode if it was switched
from "^breakall" mode to "breakall" mode by the previous call to
pascal_util_$breakall_on.


Syntax:

	$IMPORT
	   'pascal_util_ (pascal) : breakall_off $

	PROCEDURE breakall_off
	   (VAR text_file : text) ; EXTERNAL ;


Parameters:
text_file
   Is the concerned text_file. It must be attached but may be open or
   not.


Examples:

	breakall_off (input) ;
