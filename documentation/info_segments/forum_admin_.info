03/06/85  forum_admin_


Entry points in forum_admin_:
   (List is generated by the help command)


The forum_admin_ subroutine provides a site administrative interface to
the Forum Interactive Meeting System.


:Entry:  change_chairman:  03/06/85 forum_admin_$change_chairman


Function:  This entry is used to change the chairman of a Forum meeting
by a system administrator who is not the current chairman of the
meeting.


Syntax:
declare forum_admin_$change_chairman entry (char(*), char(*), char(*),
     fixed bin(35));
call forum_admin_$change_chairman (dirname, entryname, chairman,
     status);


Arguments:
dirname
   is the pathname of the directory containing the meeting.  (Input)
entryname
   is the entryname of the meeting.  (Input) The ".forum" suffix is
   required.
chairman
   is the name of the new chairman of the meeting, in the form
   Person_id.Project_id.  The new chairman must already be a
   participant.  (Input)
status
   is a standard status code.  (Output) It can have one of the
   following values:
   forum_error_table_$no_such_user
      The supplied new chairman is not a participant.


Access required:
The caller must have modify permission on the containing directory.


:Entry:  convert:  03/06/85 forum_admin_$convert


Function:  This entry is used to convert a meeting created with
pre-MR11 software into a current version meeting without requiring the
user to be the chairman.


Syntax:
declare forum_admin_$convert entry (char (*), char (*), fixed bin
     (35));
call forum_admin_$convert (dirname, entryname, status);


Arguments:
dirname
   is the name of the directory containing the meeting.  (Input)
entryname
   is the name of the meeting.  (Input) The ".forum" suffix is
   required.
status
   is a standard status code.


Access required:
The caller must have modify permission on the containing directory.


:Entry:  delete_forum:  03/06/85 forum_admin_$delete_forum


Function:  This entry is used to delete a meeting by a system
administrator who is not the current chairman of the meeting.


Syntax:
declare forum_admin_$delete_forum entry (char(*), char(*),
     fixed bin(35));
call forum_admin_$delete_forum (dirname, entryname, status);


Arguments:
dirname
   is the pathname of the directory containing the meeting.  (Input)
entryname
   is the entryname of the meeting.  The ".forum" suffix is required.
   (Input)
status
   is a standard status code.  (Output)


Access required:
The caller must have modify permission on the containing directory.


:Entry:  init_notifications:  03/06/85 forum_admin_$init_notifications


Function:  This entry is used to create the notifications database.


Syntax:
declare forum_admin_$init_notifications entry (fixed bin(35));
call forum_admin_$init_notifications (status);


Arguments:
status
   is a standard status code.  (Output)


Access required:
The caller must have "sma" access to the central forum directory.


:Entry:  set_forum_acl:  03/06/85 forum_admin_$set_forum_acl


Function:  This entry is used to add or change an ACL term on a
meeting.  ACL terms can only be specified for Person_id.* or
*.Project_id, terms of the form Person_id.Project_id are not allowed.
The caller need not be the chairman of the meeting.


Syntax:
declare forum_admin_$set_forum_acl entry (char(*), char(*), char(*),
     bit(1) aligned, bit(1) aligned, bit(1) aligned, fixed bin(35));
call forum_admin_$set_forum_acl (dirname, entryname, access_name,
     user_sw, set_sw, write_sw, status);


Arguments:
dirname
   is the pathname of the directory containing the meeting.  (Input)
entryname
   is the entryname of the meeting.  The ".forum" suffix is required.
   (Input)
access_name
   is the Person_id or Project_id whose ACL is to be added or deleted.
   Access_name can not contain a ".".  (Input)


user_sw
   This switch should be on if access_name is a Person_id, and off if
   it is a Project_id.  (Input)
set_sw
   This switch should be on if access is to be added, and off if it is
   to be deleted.  (Input)
write_sw
   This switch should on if write access is to be added, and off if
   only read access is to be added.  This switch is ignored if set_sw
   is off.  (Input)
status
   is a standard status code.  (Output)


Access required:
The caller must have modify permission on the containing directory.


:Entry:  set_global_switch:  03/06/85 forum_admin_$set_global_switch


Function:  This entry is used to set switches associated with the forum
environment for an entire site.


Syntax:
declare forum_admin_$set_global_switch entry (char(*), bit(1) aligned,
     fixed bin(35));
call forum_admin_$set_global_switch (switch_name, value, status);


Arguments:
switch_name
   is the name of the switch to be set.  It can be one of
   "print_eligiblity_messages", "pemsg", "chairman_set_eligibilty_msg",
   or "cm_set_emsg".  (Input)
value
   is the value to be assigned to the switch.  (Input)
status
   is a standard status code.  (Output) It can have the following
   value:
   forum_error_table_$invalid_switch_name
      The switch_name given was not one of those listed above.


Access required:
The user must have "rw" access to forum_data_.


:Entry:  set_switch:  03/06/85 forum_admin_$set_switch


Function:  This entry is used to change several switches associated
with a Forum meeting or its participants.  The caller need not be the
chairman of the meeting in order to set any of the switches.


Syntax:
declare forum_admin_$set_switch entry (char(*), char(*), char(*),
     char(*), bit(1) aligned, fixed bin(35));
call forum_admin_$set_switch (dirname, entryname, person_id,
     switch_name, switch_setting, status);


Arguments:
dirname
   is the pathname of the directory containing the meeting.  (Input)
entryname
   is the name of the meeting.  The ".forum" suffix is required.
   (Input)
person_id
   is the Person_id of the user on whose behalf you are setting the
   switch.  The Project_id should not be given.  Starnames are not
   permitted.  If this is blank, the caller's Person_id is used.
   (Input)


switch_name
   is the name of the switch to set.  See "List of Switches" below.
   (Input)
switch_setting
   is the new switch setting.  (Input)
status
   is a standard status code.  It can have one of the following values:
   forum_error_table_$invalid_switch_name
      the switch_name is not one of the valid switches.
   forum_error_table_$switch_not_changed
      the old setting was the same as the new setting.


List of switches:
access_changed
   Specifies that the ACL on the meeting has changed.  This switch is
   set by the forum_chairman_$set_forum_acl entrypoint, and should
   normally only be turned off by this subroutine.
adjourned, adj
   Prevents users from entering the meeting.
deleted
   Specifies that the attendee record for this user should be marked as
   deleted.


meeting_eligibility_messages, mtg_emsg
   Turns on printing of eligibilty messages for this meeting.
message_seen
   Specifies that the chairman message on the meeting has changed.
   This switch is set by the forum_$set_message entrypoint, and should
   normally only be turned off by this subroutine.
notify, nt
   Turns on the notify switch for the meeting.  This means that an
   interactive message will be sent each time a transaction is entered
   if the user is logged in and has issued the
   forum_accept_notifications command.
participating, part
    Turns on the participation switch for the meeting.


Access required:
The caller must have either modify permission on the containing
directory or write access to the ".forum" segment.
