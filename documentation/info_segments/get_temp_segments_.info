03/08/82  get_temp_segments_


Entry points in get_temp_segments_:
   (List is generated by the help command)


:Entry: get_temp_segments_:  09/25/86  get_temp_segments_


Function: puts temporary segments in the process directory for
whatever purpose the caller may have.  The segments returned to the
caller are zero-length.

A free pool of temporary segments is associated with each user process.
The pool concept makes it possible to use the same temporary segment
more than once during the life of a process.  Reusing temporary
segments in this way avoids the cost of creating a segment each time
one is needed.


Syntax:
declare get_temp_segments_ entry (char(*), (*) ptr, fixed bin(35));
call get_temp_segments_ (program, ptrs, code);


Arguments:
program
   is a 32-character field identifying the program on whose behalf the
   temporary segment is to be used.  This field is displayed by the
   list_temp_segments command.  Besides giving the name of the command
   or subroutine invoked by the user, it can also briefly describe how
   the temporary segment is used; for example, "sort_seg (sort
   indexes)."  (Input)
ptrs
   is an array of returned pointers to the requested temporary
   segments.  (Output)
code
   is a standard status code.  (Output)


Notes:  This subroutine assigns temporary segments to its caller.  It
creates new temporary segments and adds them to the free pool if there
currently are not enough available to satisfy the request.  The
temporary segments are created in the process directory with a unique
name including the temp.xxxx suffix, where xxxx is the segment number
of the segment in octal.  See the description of the
release_temp_segments_ or the release_temp_segment_ subroutine for a
description of how to return temporary segments to the free pool.

The number of segments returned to the caller is determined by the
bounds of the ptrs array above.

The list_temp_segments command (described in the MPM Commands) can be
used to list the temporary segments being used by a process.
