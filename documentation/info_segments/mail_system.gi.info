10/17/84  The Multics Mail System

The Multics Mail System allows you to communicate with other users on
the system through the exchange of messages which are stored in
mailboxes.  The mail system provides several types of addresses to be
used to identify the authors and recipients of a message.  For more
information about messages and addresses, type:
     help message_format.gi mail_addresses.gi

The mail system provides a subroutine interface, a simple command for
sending and printing mail, and several more sophisticated mail
processing subsystem which are available as unbundled software.  Each
of these portions of the mail system is breifly described here.


The subroutine interface:
The mail system subroutine interface provides all of the necessary
functions to allow a subsystem or application program to create,
transmit, receive, and print messages.  This interface consists of the
subroutines mail_system_ and mlsys_utils_.  The mail_system_ subroutine
provides access to the primitive functions of the mail system (eg:
transmitting and receiving messages); the mlsys_utils_ subroutine
provides many commonly used utility functions (eg: message printing).

The subroutine interface is documented in the Multics Programmer's
Reference Manual (order number AG91) and the Multics Subroutines and
I/O Modules Manual (order number AG93).


Standard commands:
The standard Multics product includes three mail system commands/active
functions: mail, have_mail, have_messages.

The mail command is an extremely simply interface which allows a user
either to print all the mail in a mailbox or to send a message to other
users.  However, due to its limited syntax, the mail command can not
access all features of the mail system such as the mail table or
mailing lists.  One of the mail processing subsystems, described below,
should always be used instead of this command.  For more information on
the mail command, type:
     help mail

The have_mail and have_message command/active-functions indicate
whether mail or interactive messages are present in a given mailbox and
are intended mainly for use in start_up exec_coms.  For more
information on these commands, type:
     help have_mail have_messages


The Extended Mail Facility:
The three commands print_mail, read_mail, and send_mail comprise the
Extended Mail Facility product.  This product is documented in the
Extended Mail Facility User's Guide (order number CH23).

The print_mail command is an easy to use command which simply prints
each message in a mailbox and then asks you if you wish to delete it.
This command is designed to be used in place of the mail command for
reading mail as the mail command only provides you with the option of
deleting all of the messages in the mailbox.  For more information,
type:
     help print_mail


The read_mail command is a powerfull interactive subsystem which allows
you to peruse the messages in a mailbox.  Requests are provided to
summarize, print, delete, reply to, forward with optional comments, and
save individual messages.  Powerfull message selection capabilities are
also included to allow you, for example, to print all the messages in a
mailbox that were created in October 1982 by any one of a list of
individuals.  For more information, type:
     help read_mail

The send_mail command is an interactive subsystem which allows for the
creation and tranmission of messages to one or more individuals,
distribution lists, or combinations thereof.  It is possible to edit
the message before transmission using the editor of the user's choice.
For more information, type:
     help send_mail


The Executive Mail Facility:
This product is a menu-driven mail processing subsystem designed for
use on video display terminals.  Executive mail implements most of the
functions of read_mail and send_mail but in a more structured
environment.  This facility is documented in the Executive Mail
Facility User's Guide (ordner number CX20).


The Emacs mail subsystem:
Two subsystems -- RMAIL and Send-Mail -- are available within the Emacs
video editor product.  The RMAIL subsystem provides the same
functionality as the read_mail command but uses an Emacs buffer to
display the messages in the mailbox.  The user may then use Emacs'
pwerfull screen management facilities to read and/or reply to the
message.  The Send-Mail subsystem provides the same functionality as
the send_mail command but allows the user to construct the message
within an Emacs buffer where all the text manipulation facilites of
Emacs are readily available.

RMAIL and Send-Mail are documented in the Emacs Text Editor User's
Guide (order number CH27).


The Mail Table:
The mail table is a system-wide database which provides a translation
between an arbitrary character string and a mail system address.  The
mail table contains an entry for each person registered on the system
using their Person_id (and alias) as the name of the entry.  Thus, the
mail table allows a user to send mail to another user without having to
know on what projects that user is registered.  In addition, the mail
system provides the user with commands to change the address stored in
his mail table entry and to display the address stored in any mail
table entry.

For further information on the mail table, type:  help mail_table.gi


Including your full name in outgoing mail:
All messages sent by the mail system include a header which contains,
among other items, the addresses of the author(s) of the message; this
list of authors is known as the From field.  By default, when you send
a message, the mail system places your Person_id in the From field of
the message.  However, the Person_id alone may not be sufficient for
the recipients of your message to realize that you are the author of
the message.  In order to make your identity clearer, the mail system
provides the capability to include your full name along with your
Person_id in the From field.

The mail system looks in your default value segment for a variable
named "full_name._".  If this variable is present, the mail system
includes its value as your full name in the From: field of any
messages that you send.  You can use the value_set command to set
and/or change the value of this variable; however, if you change its
value, the mail system doesn't use the new value until you create a
new process.  For more information about the use of value segments,
type
   help value_set value_list


For example, the user Palter would use the command line

     value_set full_name._ "Gary M. Palter"

to supply his full name to the mail system.  Any messages sent by
Palter after executing this command would then contain the From field

     From:  Gary M. Palter <Palter>

rather than the default From field

     From:  Palter
