01/30/84  mlr_


Entry points in mlr_:
     (List is generated by the help command)


:Entry:  mlr_:  01/30/84  mlr_

Function:  moves a character string by copying the characters from left
to right.


Syntax:
declare mlr_ entry (ptr, fixed bin(21), ptr, fixed bin(21));
call mlr_ (input_ptr, input_lth, output_ptr, output_lth);


Arguments:
input_ptr
   is a pointer to the input character string.  (Input)
input_lth
   is the length of the input string in characters.  (Input)
output_ptr
   is a pointer to the output character string.  (Input)
output_lth
   is the length of the output string in characters.  (Input)


Notes: If the output string is shorter than the input string, only the
first output_lth characters of the input string are moved.  If the
output string is longer than the input string, the output string is
padded on the right with blanks.


The following call to mlr_ --

     call mlr_ (addcharno (addr (text), start+N), lth,
                addcharno (addr (text), start), lth);

where N is a positive number is equivalent to the following PL/I loop--

     do i = 1 to lth;
       substr (text, (start+i-1), 1) = substr (text, (start+N+i-1), 1);
     end;

which is also equivalent to the PL/I statement --

     substr (text, start, lth) = substr (text, start+N, lth);


Due to the nature of the Multics hardware, if the input and output
strings overlap and the output string is to the right of the input
string (ie:  N, above, were a negative number), the results of the call
to mlr_ will be different from the results of the above PL/I loop.
