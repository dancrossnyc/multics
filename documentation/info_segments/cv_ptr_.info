03/15/85  cv_ptr_


Entry points in cv_ptr_:
   (List is generated by the help command)


:Entry:  cv_ptr_:  03/15/85  cv_ptr_


Function:
The cv_ptr_ function converts a virtual pointer to a pointer value.  A
virtual pointer is a character-string representation of a pointer
value.


Syntax:
declare cv_ptr_ entry (char(*), fixed bin(35)) returns (ptr);
ptr_value = cv_ptr_ (vptr, code);


Arguments:
vptr
   is the virtual pointer to be converted.  (Input)
code
   is a standard status code.  (Output)
ptr_value
   is the pointer that results from the conversion.  (Output)


:Entry:  terminate:  03/15/85 cv_ptr_$terminate


Function:  This entry point is called to terminate the segment that has
been initiated by a previous call to cv_ptr_.


Syntax:
declare cv_ptr_$terminate (ptr);
call cv_ptr_$terminate (ptr_value);


Arguments:
ptr_value
   is the pointer returned by the previous call to cv_ptr_.  (Input)


Notes:  Pointers returned by the cv_ptr_ function cannot be used as
entry pointers.  The cv_ptr_ function constructs the returned pointer
to a segment in a way that avoids copying of the segment's linkage and
internal static data into the combined linkage area.  The cv_entry_
function is used to convert virtual entries to an entry value.

The segment pointed to by the returned ptr_value is initiated with a
null reference name.  The cv_ptr_$terminate entry point should be
called to terminate this null reference name.


Virtual pointers:
The cv_ptr_ function converts virtual pointers that contain one or two
components -- a segment identifier and an optional offset into the
segment.  Altogether, seventeen forms are accepted.  A description of
virtual pointers can be found in "virtual_pointers.gi.info".
