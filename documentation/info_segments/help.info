:Info: help:  2020-10-23  help

Syntax as a command:  help {INFO_NAMEs} {-control_args}


Function:  the help subsystem prints descriptions of system commands,
active functions, and subroutines; as well as miscellaneous
information about system status, system changes, and general
information.

The help command gets the information it displays from info segments,
each containing one or more blocks of information, divided into named
sections.  Each section holds one or more paragraphs of information.
It displays the information one page at a time.  At the end of each
page, help gives a list of section titles that follow and asks if the
user wants "More help?".  For a list of responses, type:
   help help_responses
or at a "More help?" prompt, type:
   help


Arguments (selecting info segments):
INFO_NAMEs
   select an info seg having an entryname matching one of the given
   INFO_NAMEs.  The suffix ".info" is assumed if not given.  If a
   pathname is given, only an info seg in that directory is selected.
   If only an entryname is given, help looks in the "info_segments"
   search list for a segment with matching INFO_NAME.

   When selecting an info seg describing a subroutine, an entry point
   name may be included in the INFO_NAME:  help hcs_$status
   Printing begins with the description of that entry point.


   The star convention is allowed, except when INFO_NAME includes a
   subroutine entry point name, or when the -entry_point is given.

   If no INFO_NAME is given, help prints the default info seg
   help_system.gi.info which gives a brief introduction to the help
   subsystem.


Control arguments (selecting info segments):
   The -section and -search controls select info segs for display: an
   info seg matching INFO_NAME must also contain a paragraph matching
   one of the STR strings below.  Display begins at that matching
   paragraph.
-section STRs, -scn STRs
   selects the first section of the info seg whose title contains one
   of the STR strings.  The entire section title is not required.
   STRs may be typed in lowercase; by default, case is ignored when
   matching.  All arguments following the -section control argument
   until the next control argument are treated as STRs.


-search STRs, -srh STRs
   selects the first paragraph of the info seg containing any of the
   STR strings.  These may be typed in lowercase; by default, case is
   ignored when matching.  All arguments following the -search control
   argument are treated as STRs, so -search must be the last control
   argument given.  The search usually begins with the first
   paragraph; if -section is also specified, searching begins with the
   matching section and continues to the last paragraph of the info
   block.


-case_sensitive, -cs
   when used with either -section of -search, will perform the
   requested action in a case sensitive manner.
-non_case_sensitive, -ncs
   when used with either -section or -search, will perform the
   requested action in a non-case sensitive manner.  This is the
   default.


-pathname INFO_PATH, -pn INFO_PATH
   specifies the pathname of an info segment to be printed.  It is
   useful when the info to be printed is in the working directory, or
   if the pathname begins with a minus (-) character.  The final
   entryname of INFO_PATH is treated as the INFO_NAME.
-entry_point, -ep
   selects the info describing the main entry point of a subroutine,
   if there is one.  For example, "help ioa_ -ep" prints the info
   describing the ioa_$ioa_ subroutine entry point.
-info BLOCK_NAME
   within an info seg selected by INFO_NAME, actually select a block
   designated by :[Info]: BLOCK_NAME: where BLOCK_NAME.info does not
   appear as an entryname on the info segment.  This is useful for
   displaying a subsystem's request descriptions.


Control arguments (info displayed):
-all, -a
   prints the entire info or subroutine entry point description
   without intervening questions.  If used with only a subroutine
   reference name, help prints the subroutine introduction and all of
   its entry points.
-brief, -bf
   prints only a brief summary of a command, active function or
   subroutine info seg with no intervening questions.  The summary
   includes the Syntax section, and names of "Arguments",
   "Control arguments" and "List of ..." items.
-brief_header, -bfhe
   displays only a short header introducing the info seg: the heading
   line from the info seg; and its line count.


-control_arg STRs, -ca STRs
   prints only the descriptions of the control (or other) arguments
   whose names contain STR.  STR must NOT include a leading minus sign
   (-).  For example, "help mail -ca brief match exclude" prints
   descriptions of the -brief, -match and -exclude control arguments
   of the mail command.  All arguments following -ca until the next
   control argument are treated as STR operands.
-header, -he
   prints only a long heading line consisting of the pathname of the
   info seg, heading line from the info seg, and its line count.  No
   other information is printed.  This control argument conflicts with
   all other information display control arguments.


-list_entry_points, -lep
   names all entry points in a subroutine info segment, then prompts
   about sections in the subroutine's introduction.  The entry_point
   response may be used to select a particular entry point for
   display.  For example, to display the pathname_$component entry
   point, respond to the prompt with:  ep component
-titles, -title
   lists the section titles used in the info seg (including section
   line counts), then asks if the user wishes to see the first section.


Control arguments (paragraph grouping):
-maxlines J
   sets the maximum paragraph grouping size to J lines.  J or fewer
   lines of information are printed before asking if the user wants
   more help.  Default is the terminal's page length.


Notes on control arguments:
The -all, -brief, -control_arg and -title control arguments are
mutually exclusive.


When -section or -search control arguments are specified and no
matching paragraph is found in any info seg selected by an INFO_NAME
or info selection control argument, that info seg is skipped without
comment.

Also, -section and -search do not always control where printing
starts.

  If used with -header, only the heading lines for infos containing a
  matching paragraph are listed; the matching paragraph is not
  printed.

  If used with -brief or -control_arg, help prints a heading line and
  then the information selected by -brief or -control_arg; the
  matching paragraph is not printed.


  If used with -brief_header, a brief heading line is printed
  preceding the matching paragraph.

  When used with -title, help prints a heading line, then the list of
  section titles, and finally the matching paragraph.

  If used with -all, the entire info is printed for infos containing a
  matching paragraph.


Notes on info segments:
Help gets the information it displays from segments formatted as an
"info segment".  Each info seg contains one or more blocks of
information, divided into named sections.  Each section holds one or
more paragraphs of information.

An information block describes a command, subroutine entry point, or
other information topic.

For information about the format of an info seg, type:
   help info_seg.gi


Notes on help operation:
The help command displays information from info segments, each
containing one or more blocks of information, divided into named
sections.  Each section holds one or more paragraphs of information.

Information is displayed one page at a time.  At the end of each
page, help gives a list of section titles that follow and asks if the
user wants "More help?".  For a list of possible responses, type:
   help help_responses
or
   help hr


The help command remembers which paragraphs the user has seen and
which have been skipped or not yet reached.  It automatically stops
printing an info block if all paragraphs have been seen when reaching
the end of the info block.


If any paragraphs were skipped, help enters an unseen_paragraphs_only
mode of operation, asking if groups of adjacent unseen paragraphs
should be printed.  Typical responses when in unseen_paragraphs_only
mode are:

yes, y
   print the next group of unseen paragraphs.
rest -unseen, rest
   print all remaining unseen paragraphs.
titles -unseen, titles
   print section titles for all sections containing an unseen
   paragraph.
section STR, scn STR
   select which section containing unseen paragraphs to display from
   sections listed by:  titles -unseen


The user may enter unseen_paragraphs_only mode at any time by typing
one of the responses: unseen_paragraphs_only, unseen, uns


Notes on help-related commands:
If the help command fails to find an info seg corresponding to a given
INFO_NAME, search for the correct name using:

      list_help TOPIC

list_help (lh) displays the names of info segs having a given TOPIC
string anywhere in its entryname.  For details, type:  help lh


Use the check_info_segs (cis) command to locate info segments changed
recently.  For details, type:  help cis


:Info: help_responses.gi: help_responses: hr.gi: hr:
2020-10-27  Responses to help's "More help?"

The help command displays information from info segments, each
containing one or more blocks of information, divided into named
sections.  Each section holds one or more paragraphs of information.

Information is displayed one page at a time.  At the end of each page,
help gives a list of section titles that follow and asks if the user
wants "More help?".  The user may give one of the following responses.


List of responses (all info segments):
   As help prints a paragraph of information, it marks that paragraph
   as "seen by the user".  Several responses include options to skip
   seen paragraphs, or to check for unseen paragraphs.

   Responses that search the info segment or list section titles
   operate from the current paragraph to the end of the information
   block.  Automatic wraparound searches are not used.

yes, y
   prints paragraphs mentioned in the prompt, then displays section
   titles of subsequent paragraphs, and prompts:  More help?


rest {-section | -unseen},
   r {-scn | -uns}
   prints the rest of the info block without intervening prompts.
   Or if the -section control argument is given, prints only the
   remaining paragraphs of the current section without prompts.
   If -unseen is given, prints the remaining unseen paragraphs
   in the information block.
skip {-section | -seen | -rest},
   s {-scn | -seen | -rest}
   skips paragraphs mentioned in the prompt, and asks the user about
   display of subsequent paragraphs in the block.  If -section is
   given, help skips only the paragraphs in the first section of the
   prompt.  If -seen is given, searches for and display the next
   unseen paragraph.  If -rest is given, skips to the end of the info
   block, and then asks if unseen paragraphs should be displayed.


next, no, n
   exits from the current information segment if more help is not
   needed.  If the help command INFO_NAMEs selected other segments,
   help begins printing the next info segment; otherwise, help returns
   to the command processor.
quit, q
   causes help to return to the command processor without printing the
   remaining info segs selected by the INFO_NAMEs.


brief, bf
   prints a summary of a command, active function or subroutine info
   seg including its Syntax section and names of "Arguments",
   "Control arguments", and "List of ..." items.
control_arg {STRs} {-case_sensitive},
         ca {STRs} {-cs}
   prints descriptions of "Arguments", "Control arguments" and
   "List of ..." items whose names contain one of the STR strings.
   Then repeats the previous "More help?" question.  If STR is
   omitted, the string used in the previous control_arg response or
   help -control_arg control is used again.


titles {-top | -unseen},
 title {-t | -uns}
   lists title and line count for all sections remaining in the current
   info seg.  If -top is given, help lists information for all
   sections.  If -unseen is given, help lists all titles containing
   unseen paragraphs.


section {STRs} {-case_sensitive} {-top},
    scn {STRs} {-cs} {-t}
   skips to the next section whose title contains STRs.  The entire
   section title is not required.  STRs may be typed in lowercase;
   -non_case_sensitive is the default when matching.  If -top is
   specified, title searching starts at the beginning of the info
   block.  If STR is omitted, help uses the search strings from the
   previous section response or -section control argument.


search {STRs} {-case_sensitive} {-top},
   srh {STRs} {-cs} {-t},
    sh {STRs} {-cs | -ncs} {-t}
   skips to the next paragraph containing one of the STR strings.
   STRs may be typed in lowercase; -non_case_sensitive is the default
   when searching.  If -top is specified, searching starts at the
   beginning of the info seg.  If no STR is given, help uses the
   strings from the previous search response or -search control
   argument.


top, t
   skips to the beginning of the info block, prints its heading line,
   and asks whether the user wants to see the first section.  This is
   useful if the user wishes to review earlier parts of the info seg.
header, he
   prints a long heading line to identify the current info seg.  The
   line consists of the pathname of the info seg, heading, and line
   count.


unseen_paragraphs_only, unseen, uns
   skips to the top of the info block, then searches for unseen
   paragraphs.  Those in the first section with unseen paragraphs  are
   printed as a group; then help prompts asking if the user wants to
   see the next group of unseen paragraphs.  Typical responses are
   described below in "Notes on unseen paragraphs".
every_paragraph_visible, every_pgh, every
   reverts from unseen_paragraphs_only mode to normal mode in which
   both seen and unseen paragraphs are printed.


help {RESPONSE_NAME} {-brief | -control_arg STR},
   h {RESPONSE_NAME} {-bf | -ca STR}
   prints details about help responses.  RESPONSE_NAME may be the name
   of any help response.  If a response name is given, -brief and
   -control_arg may be given to summarize information about that
   response's syntax and arguments.

   If RESPONSE_NAME is omitted, a summary of "More help?" responses
   is printed.


list_responses, list_requests, lr
   prints a 1-line description of each available help response.
?
   prints a summary of available response name and control arguments.
.
   prints "help" with current version to identify the help subsystem.
.. MULTICS_COMMAND_LINE
   passes the remainder of the response to the Multics command
   processor as a command line.


List of responses (subroutine info segments):
   The following responses are available only when displaying an
   info segment documenting a subroutine.
list_entry_points, list_ep, lep
   lists the entry points in a subroutine info segment.

entry_point {EP_NAME}, ep {EP_NAME}
   skips to the description of subroutine entry point EP_NAME.  The
   EP_NAME may be given as subroutine_$entry_point_name or as just
   entry_point_name.  For example, when viewing pathname_.info, to
   skips to the pathname_$component entry point description, type:
      ep component
   If EP_NAME is omitted, help skips to the description of the
   subroutine_$subroutine_ entry point, if one exists.


find_entry_point {STRs} {-case_sensitive | -non_case_sensitive} {-top},
         find_ep {STRs} {-cs | -ncs} {-t}
   skips to the subroutine entry point whose description includes one
   of the STR strings.  Matching is -non_case_sensitive by default.
   If STRs are omitted, the strings given in the most recent find_ep
   response are re-used to find a subsequent matching entry point.

all_entry_points, aep
   prints a heading for subroutine info segment, then prints its
   introduction followed by descriptions of each entry point without
   asking questions.


List of responses (non-subroutine info segments):
   The following responses are available only when displaying an
   info segment documenting a command or general information topic.
all_paragraphs, all
   prints a heading for the info block, then prints all of its
   sections without asking questions.
info INFO_NAME
   skips to another block in the current info segment, if the user
   knows one of the names by which that block is known.
find_info {STRs} {-case_sensitive | -non_case_sensitive} {-top},
  find {STRs} {-cs | -ncs} {-t}
   skips to another block in the current info segment by searching
   those blocks for a paragraph matching one of the STR strings.
   If STRs are omitted, the strings given in the most recent find_info
   response are re-used to find a subsequent matching entry point.


Notes on unseen paragraphs:
The help command remembers which paragraphs the user has seen and
which have been skipped or not yet reached.  It automatically stops
printing an info block if all paragraphs have been seen when reaching
the end of the info block.


If any paragraphs were skipped, help enters an unseen_paragraphs_only
mode of operation, asking if groups of adjacent unseen paragraphs
should be printed.  Typical responses when in unseen_paragraphs_only
mode are:

yes, y
   print the next group of unseen paragraphs.
rest -unseen, rest
   print all remaining unseen paragraphs.
titles -unseen, titles
   print section titles for all sections containing an unseen
   paragraph.
section STR, scn STR
   select which section containing unseen paragraphs to display from
   sections listed by:  titles -unseen


The user may enter unseen_paragraphs_only mode at any time by typing
one of the responses: unseen_paragraphs_only, unseen, uns


:[Info]:  yes: y:  2020-10-27  yes, y

Syntax:  yes, y


Function:  prints paragraphs mentioned in the prompt, displays section
titles of subsequent paragraphs, and prompts:  More help?


:[Info]:  rest: r:  2020-11-17  rest, r

Syntax: rest {-control_arg}
           r {-control_arg}


Function:  prints the remaining paragraphs of the info block or
section without further prompts.


Control arguments (end of range):
   Zero or one of the following may be given.  If neither is given,
   print the remaining paragraphs of the current info block without
   prompts. (default in every_paragraph_visible mode)
-section, -scn
   print the remaining paragraphs of the current section without
   prompts.
-unseen, -uns
   prints the remaining unseen paragraphs in the information block.
   (default in unseen_paragraphs_only mode)


Control arguments (start of range):
   If -top is not given, printing begins with next paragraph of the
   current info block.
-top, -t
   print beginning at the top of the current section (if -section is
   also given; otherwise, at the top of the current info block.


:[Info]:  skip: s:  2020-10-27  skip, s


Syntax: skip {-control_arg}
           s {-control_arg}


Function:  skips paragraphs mentioned in the prompt, and asks the user
about display of subsequent paragraphs in the block.  (default in
every_paragraph_visible mode)


Control arguments:
   Zero or one of the following may be given.
-section, -scn
   skips only the paragraphs in the first section of the prompt.
   Prompts again about subsequent paragraphs.
-seen
   searches for and displays the next unseen paragraph.  (default in
   unseen_paragraphs_only mode)
-rest
   if the block has unseen paragraphs, asks if the first group of
   unseen paragraphs should be displayed.  Otherwise, moves on to the
   next info seg selected by help INFO_NAMEs.


Notes:
For information about unseen_paragraphs_only mode, type:
   help unseen


:[Info]:  next: no: n:  2020-10-27  next, no, n

Syntax:  next, no, n


Function:  exits from the current information segment when more help
is not needed.  If the help command INFO_NAMEs selected other
segments, help begins printing the next info segment.  Otherwise, help
returns to the command processor.


:[Info]:  quit: q:  2020-10-27  quit, q

Syntax:  quit, q


Function:  causes help to return to the command processor without
printing the remaining info segs selected by the INFO_NAMEs.


:[Info]:  brief: bf:  2020-10-27  brief, bf

Syntax:  brief, bf


Function:  prints a summary of a command, active function or
subroutine info seg including its Syntax section and item names in
"Arguments", "Control arguments", and "List of ..." sections.  Then
repeats the previous "More help?" question.


:[Info]:  control_arg: ca:  2020-10-27  control_arg, ca

Syntax:
   control_arg {STRs} {-control_arg}
            ca {STRs} {-control_arg}


Function:  prints descriptions of "Arguments", "Control arguments" and
"List of ..." items whose names contain one of the STR strings.  Then
repeats the previous "More help?" question.


Arguments:
STRs
   strings matched with item names in "Arguments", "Control arguments"
   and "List of ..." sections of the current info block.  If STRs are
   omitted, the strings used in the previous control_arg response or
   help -control_arg control are used again.


Control arguments:
-non_case_sensitive, -ncs
   matching of STR with item names is performed with both STR and item
   names translated to lower case letters. (default)
-case_sensitive, -cs
   matching of STR with item names is performed in a case sensitive
   manner.


:[Info]: titles: title:  2020-10-27  titles, title

Syntax:
   titles {-control_arg}
    title {-control_arg}


Function:  displays section titles in the current info block.


Control arguments:
-top, -t
   displays all section titles.  By default, only section titles below
   the current section are displayed.
-unseen, -uns
   displays all section titles containing unseen paragraphs.


:[Info]: section: scn:  2020-10-27  section, scn

Syntax:
   section {STRs} {-control_args},
       scn {STRs} {-control_args}


Function:  positions to a section of the current info block whose
title has words matching one of the STR strings.


Arguments:
STRs
   strings matched with words in the section titles.  If STRs are
   omitted, the strings used in the previous section response or
   help -section control are used again.


Control arguments:
-top, -t
   searches all section titles.  By default, only section titles below
   the current section are searched.
-non_case_sensitive, -ncs
   matching of STR with title words is performed with both STR and
   titles translated to lower case letters. (default)
-case_sensitive, -cs
   matching of STR with title words is performed in a case sensitive
   manner.


:[Info]: search: srh: sh:  2020-10-27  search, srh, sh

Syntax:
   search {STRs} {-control_args},
      srh {STRs} {-control_args},
       sh {STRs} {-control_args}


Function:  in the current info block, skips to the next paragraph
containing one of the STR strings.


Arguments:
STRs
   strings matched with words in the paragraphs.  If STRs are
   omitted, the strings used in the previous search response or
   help -search control are used again.


Control arguments:
-top, -t
   searches all paragraphs.  By default, only paragraphs following
   the most recently displayed paragraph are searched.
-non_case_sensitive, -ncs
   matching of STR with paragraphs is performed with both STR and
   paragraphs translated to lower case letters. (default)
-case_sensitive, -cs
   matching of STR with paragraphs is performed in a case sensitive
   manner.


:[Info]: top: t:  2020-11-11  top, t

Syntax:  t {-control_arg}


Function:  skips to the beginning of the info block, prints its
heading line, and asks whether the user wants to see the first
section.  This is useful if the user wishes to review earlier parts
of the info seg.


Control arguments:
-section, -scn
   skips to the beginning of the current section and begins printing
   the entire section.


:[Info]: header: he:  2020-10-27  header, he


Syntax:  header, he


Function:  prints a long heading line to identify the current info
seg.  The line consists of the pathname of the info block, its heading,
and count of lines in the block.


:[Info]: unseen_paragraphs_only: unseen: uns:
2020-10-27  unseen_paragraphs_only, unseen, uns

Syntax:  unseen_paragraphs_only, unseen, uns


Function:  skips to the top of the info block, then searches for
unseen paragraphs.  Those in the first section with unseen paragraphs
are printed as a group; then help prompts asking if the user wants to
see the next group of unseen paragraphs.  Typical responses are
described below in "Notes on unseen paragraphs".


Notes on unseen paragraphs:
The help command remembers which paragraphs the user has seen and
which have been skipped or not yet reached.  It automatically stops
printing an info block if all paragraphs have been seen when reaching
the end of the info block.


If any paragraphs were skipped, help enters an unseen_paragraphs_only
mode of operation, asking if groups of adjacent unseen paragraphs
should be printed.  The unseen_paragraphs_only response enters this
mode before the end of block is reached.


Typical responses when in unseen_paragraphs_only mode include the
following:

yes, y
   print the next group of unseen paragraphs.
rest -unseen, rest
   print all remaining unseen paragraphs.
titles -unseen, titles
   print section titles for all sections containing an unseen
   paragraph.
section STR, scn STR
   select which section containing unseen paragraphs to display from
   sections listed by:  titles -unseen


For responses that include an -unseen control argument, that control
becomes the default when in unseen_paragraphs_only mode.


:[Info]: every_paragraph_visible: every_pgh: every:
2020-10-27  every_paragraph_visible, every_pgh, every

Syntax:  every_paragraph_visible, every_pgh, every


Function:  reverts from unseen_paragraphs_only mode to normal mode in
which both seen and unseen paragraphs are printed.


:[Info]: help: h:  2020-10-27  help, h

Syntax:
   help {RESPONSE_NAME} {-control_args},
      h {RESPONSE_NAME} {-control_args}


Function:  prints details about help responses.  If RESPONSE_NAME is
omitted, prints a list of help responses.


Arguments:
RESPONSE_NAME
   the name of any help response.  By default, prints a list of help
   responses.


Control arguments:
-brief, -bf
   prints the "Syntax" section, and item names in "Arguments" and
   "Control arguments" sections to summarize use of the response.
-control_arg STR, -ca STR
   matches STR string against names of items in the "Arguments" and
   "Control arguments" section.  Prints a description of matching
   items.


:[Info]: list_responses: list_requests: lr:
2020-10-27  list_responses, list_requests, lr

Syntax:
   list_responses {STRs} {-control_args}
    list_requests {STRs} {-control_args}
               lr {STRs} {-control_args}


Function:  prints a brief description of selected subsystem requests.


Arguments:
STRs
   specifies the requests to be listed.  Any request with a name
   containing one of these strings is listed.  If no STRs are given,
   all requests are listed.


Control arguments:
-all, -a
   includes undocumented and unimplemented requests in the list of
   requests eligible for matching the STR arguments.
-exact
   lists only those requests one of whose names exactly match one of
   the STR arguments.


Notes:
When matching STRs with request names, a request name is considered
to match a STR only if that STR is at the beginning or end of a word
within the request name.  Words in request names are bounded by the
beginning and end of the request name and by the characters period (.),
hyphen (-), underscore (_), and dollar sign ($).


Examples:
The request line:
   list_requests list
will match requests named list, list_users, and forum_list but will not
match a request named prelisting.


:[Info]: ?:  2020-10-27  ?

Syntax: ?


Function:  prints a summary of available response names and their
arguments and control arguments.


:[Info]: .:  2020-10-27  .

Syntax:  .


Function:  prints "help" with current version to identify the help
subsystem.


:[Info]:  ..:  2020-10-27  ..

Syntax:  .. MULTICS_COMMAND_LINE


Function:  passes the remainder of the response line to the Multics
command processor as a command line.


Arguments:
MULTICS_COMMAND_LINE
   is a standard Multics command line containing one or more Multics
   commands.


:[Info]: list_entry_points: list_entrypoints: list_ep: lep:
2020-11-11  list_entry_points, list_ep, lep

Syntax:  lep {-control_arg}


Function:  lists the entry points descriptions available for a
subroutine info segment.


Control arguments:
-unseen, -uns
   lists only entry points that have not been displayed.  If any
   paragraph of an entry point was displayed, that entry point is
   omitted from the list.


:[Info]:  entry_point: entrypoint: ep:
2020-11-19  entry_point, ep

Syntax:
   entry_point {EP_STRING} {-control_arg},
            ep {EP_STRING} {-control_arg}


Function:  selects the next subroutine entry point(s) to display:
one whose entry point name matches an EP_STRING argument; or the first
entry point which has not been displayed by the user.


Arguments:
EP_STRING
   selects an entry point name that matches EP_STRING.  EP_STRING may
   be given as subroutine_$EP_STRING or just EP_STRING.  If EP_STRING
   is omitted, selects an entry point name that is the same as the
   subroutine's reference name (subroutine_$subroutine_).
   See also the -match EP_STRING control argument.

   If neither -match nor -exact is given, searching selects an entry
   point whose name exactly matches EP_STRING.  If none is found, a
   second search looks for entry points whose name contains EP_STRING.


Control arguments:
-match EP_STRING
   selects all entry point names that contain EP_STRING.  This is
   useful to force a wider search if EP_STRING exactly matches one of
   the entry point names.
-exact ER_STR
   selects only an entry point name exactly matching EP_STRING.


-unseen, -uns
   selects only entry points that have not been displayed earlier.


Examples:
When viewing pathname_.info, to select the pathname_$component
description, type:
   ep component
or just:
   ep comp

When viewing check_star_name_.info, to select the
check_star_name_$check_star_name_ entry point, type:
   ep

To display names of all cu_$ (command utility) entry points dealing
with argument counts, type:
   ep -match arg_count


:[Info]: find_entry_point: find_entrypoint: find_ep:
2020-10-27  find_entry_point, find_ep

Syntax:
   find_entry_point {STRs} {-control_args}
            find_ep {STRs} {-control_args}


Function:  selects for display the next subroutine entry point whose
description includes one of the STR strings.  This search can locate
an entry point performing a given function when the entry point name is
not known.


Arguments:
STRs
   strings matched against paragraphs in the entry point info block.
   The next block matching one of the STR strings is selected for
   display.  If no STRs are given, the strings given with the most
   recent find_ep request are reused.


Control arguments:
-top, -t
   searching begins with the first entry point description block in the
   info segment, rather than searching only descriptions following the
   current block.
-non_case_sensitive, -ncs
   matching of STR with paragraphs is performed with both STR and
   paragraph translated to lower case letters. (default)
-case_sensitive, -cs
   matching of STR with item names is performed in a case sensitive
   manner.


Notes:
Use the entry point response to select the description of a known
subroutine entry point.


:[Info]: all_entry_points: all_entrypoints: aep:
2020-10-27  all_entry_points, aep

Syntax:  aep


Function:  prints a heading for subroutine info segment, then prints
its introduction followed by descriptions of each entry point without
asking questions.


:[Info]: all_paragraphs: all:  2020-10-27  all_paragraphs, all

Syntax:  all


Function:  prints a heading for the current info block, then prints
all of its sections without asking questions.


:[Info]:  info:  2021-02-01  info

Syntax:  info {INFO_NAME} {-control_arg}


Function: selects another info block in the current info segment,
given one of the names in its block divider.  Or lists info blocks
in the current info segment.


Arguments:
INFO_NAME
   gives a name for the desired info block to be displayed.


Control arguments:
-list, -ls
   displays a list of info blocks in the info segment.


Notes: Either an info_name or -list may be given.  Both are not
supported.


:[Info]: find_info: find:   2020-10-27  find_info, find

Syntax:
   find_info {STRs} {-control_args}
        find {STRs} {-control_args}


Function:  selects for display the next info block in the current info
segment whose description includes one of the STR strings.  This
search can locate an info block describing a particular operation when
the operation name is not known.


Arguments:
STRs
   strings matched against paragraphs in the info block.  The next
   block matching one of the STR strings is selected for display.  If
   no STRs are given, the strings given with the most recent find_info
   request are reused.


Control arguments:
-top, -t
   searching begins with the first info block in the info segment,
   rather than searching only descriptions following the current
   block.
-non_case_sensitive, -ncs
   matching of STR with paragraphs is performed with both STR and
   paragraph translated to lower case letters. (default)
-case_sensitive, -cs
   matching of STR with item names is performed in a case sensitive
   manner.


:[Info]: hidden_args.topic: hidden_args:
2020-12-31  help's hidden control arguments

The following control arguments were added to the help command to
support debugging of the help_ subroutine.  These descriptions are
hidden to avoid presenting debug-related descriptions to general user
community.


List of hidden control arguments:
-no_video, -nv
   disables help_ code that overwrites prompt and user response after
   user replies "yes" to the prompt.


-debug OP
   turns on special debugging code in help_.  OP may be an integer
   between 1 and 14 inclusive.  Only values 1, 2, 3 were defined as of
   this writing.
     OP=1: enable debug_prompt and debug_print calls in
           help_listen_util_.  These show factors affecting the next
           prompt, and next text printed.
     OP=2: enable print statements in help_util_$format_LIST showing
           how number of columns and rows were determined in the
           formatted LIST.
     OP=3: print iFile.caseI and .structure values seen by help_ after
           info segment has been parsed.
   The OP value is stored in the help_args.pad2(6) array element, and
   help_ accesses that OP using that element.


:Info: help_infos.gi: help_infos:  1981-07-25  On-line information

Information is available on-line in info segments such as this one.
To get this information, use the help command, just as you did to get
this info seg, with the name (an info_name) of the info seg you want
to read.


List of helpful info segs:
   The following info segments provide more information about the
   help system.  Their short names are in parentheses.
help
  describes the function of the help command, how to use it,
  and how to read through an info segment.
list_help (lh)
  describes the list_help command, which provides a means of
  searching for and listing info_names.
modules (module)
  explains how to get information about Multics commands,
  active functions, and subroutines by using the help command.
topics (topic)
  explains how to get general information about certain aspects
  of the Multics system.


:Info: help_system.gi: help_system:  2020-10-27  Multics help system

Multics provides online help through information segments (info segs)
such as this one.  Type the command "help TOPIC" where TOPIC is a
string identifying the desired information.  The help command will
look for an info seg having the entryname TOPIC.info; if found, help
prints the information contained in the info seg describes that topic.

A topic can be an individual command, subroutine or some other feature
of the system.  For example, to get information about the print
command, type:
   help print


If the info seg is lengthy, help stops after printing a certain number
of lines to ask you if you want "More info?".  In response, you may
type:

   yes  (or y)  to print the next section of the info seg
   no   (or n)  to stop printing the current info seg
   rest (or r)  to print the rest of the info seg without the questions
   top  (or t)  to return to the beginning of the info seg.
   quit (or q)  to exit the help subsystem.

After typing your response, press CARRIAGE RETURN.


Other responses are available.  To display a summary of available
responses while using help, type:
   ?
which prints the full set of responses.


At Multics command level, for details about a particular response, use
the help -control_arg (or -ca) control to select a particular response
name.  For example, learn about the titles response by entering the
command:
   help help -ca title

For details about all help responses, type:
   help help -scn responses

To invoke a Multics command while at a "More help?" prompt, use a
dot-dot escape followed by the command.  For example:
   ..help help -ca title


To get more information about Multics that you can read at the
terminal, type:
   help help_infos

Use the print_search_paths (psp) command to list directories holding
info segs; type:
   psp info


You may get general information about certain aspects of the Multics
system, type:
   help topics

If you want to get information about Multics commands and other system
modules, type:
   help modules

To get information about Multics published documentation, you can type:
   help documentation

If the help command can't find an info seg for a given info name, use
the list_help command to find info segs that contain the specified
TOPIC string in their entryname.


Notes on short names:
Many of the info segs have short names as well as the long names we've
been using thus far.  You get the same information with the short
name; it's just that you have to type fewer characters on your
keyboard.  Three of the four info segs listed above have short names.
To get the topics info seg, you could type:
   help topic

To get the modules info seg, you could type:
   help module

And to get the documentation info seg, you could type:
   help doc


:Info: topics.gi: topics: topic.gi: topic:  1984-10-17  Online help topics

The Multics help system includes a number of info segments (info segs)
that contain general information (gi) about features or use of the
system.  The info names of these segments end with the suffix
"gi.info".  For example, acl_matching.gi.info describes how Access
Control List (acl) entries are matched with User_ids in access control
commands such as set_acl.  The suffix ".info" is assumed if you don't
provide it; so to get the info segment on acl_matching, type:
   help acl_matching.gi


To get a complete list of the info segs whose names have the suffix
"gi.info", use the list_help command:
   list_help gi


If you want a list of info segs that pertain to a particular subject,
type a word, or a string of characters that is part of a word, that
describes that subject and list_help prints a list of all info names
containing that word or partial word.  For example, if you want a list
of info segs that describe the Multics mail facility, type:
   list_help mail


For more information about list_help, including its method for
matching character strings, type:
   help list_help


:Info: modules.gi: modules: module.gi: module:
2020-10-27  Commands, Active Functions, Subroutines

The help system provides individual info segments for each command,
active function, and subroutine in the Multics system.  These info
segments are given the name of the particular system module (command,
active function, or subroutine) with a suffix of "info".  The
resulting name is called an info_name.  For example, the info segment
describing the print command is named "print.info".  But you need not
type this suffix when using the help command; you can simply type:
   help print


Notes on module info_names:
If you are unsure of the name of a system module, you can get a list
of possible names by using the list_help command with a word that
describes what you are looking for.  For example, if you want to know
how to use the mail facility, you might type:
   list_help mail

For more information about the list_help command, type:
   help list_help


Notes on subroutine entry points:
You can go directly to the description of a particular entry point in
a subroutine by typing the name of the entry point with the help
command.  For example, by typing:

   help cu_$get_command_processor

you automatically bypass the 18 cu_ entry points described in
alphabetical order before this one.


If, on the other hand, you want to start printing at the beginning of
the info seg for the command utility subroutine, you type:
   help cu_

This prints an introduction for the cu_ subroutine, lists the
entry points it provides, and asks if you want to see the first
entry point.  To select the cu_$arg_ptr entry point, respond to
the "More help?" prompt with:
   ep arg_ptr


:Info: documentation.gi: documentation: doc.gi: doc:
1981-07-25   Multics Documentation

There are two general information info segments which provide
information about Multics manuals.  Type "help" with the following
info segment names (info_names) to get the information indicated:

manuals
   lists all Multics manuals and their current revision status.

order_manuals
   provides instructions for ordering Multics manuals.


:hcom:




/****^  HISTORY COMMENTS:
  1) change(2020-10-24,GDixon), approve(2021-02-23,MCR10089),
     audit(2021-03-31,Swenson), install(2021-03-31,MR12.6g-0053):
      A) Capitalize positional argument names (like INFO_NAME and TOPIC).
      B) Describe -all when applied to introduction of a multi-entry-point
         subroutine info seg.
      C) Describe -brief output including Syntax, plus all items in
         "Arguments", "Control arguments", and "List of ..." sections.
      D) Add help_system.gi.info and several info segs it references
         since they for part of the documentation for the help command.
         The referenced info segs are: topics.gi.info, modules.gi.info,
         and documentation.gi.info.
                                                   END HISTORY COMMENTS */



