04/15/16  Multics video system input editor requests

Function: A process obtains input from a video terminal using
the window_io_ I/O module (video system).  Each input line may
optionally be saved in a USER.history file using the input_history
command, with its input_history_ I/O module.

The window_io_ real-time line editor provides a subset of Emacs
requests for editing each input line as it is entered.


List of video system input editor requests:
   The following list first gives the ASCII character
   and then the operation associated with that character.

^F
   Position the cursor one character forward.
^B
   Position the cursor one character backward.
ESC F
   Position the cursor one word forward.


ESC B
   Position the cursor one word backward.
^E
   Position the cursor to end of the line.
^A
   Position the cursor to beginning of the line.
^D
   Delete one character forward.
DEL or #
   Delete one character backward.
ESC D
   Delete one word forward.
ESC DEL or ESC #
   Delete one word backward.


^K
   Delete from the cursor to end of line.
@
   Delete from the cursor to the beginning of the line.
^Y
   Retrieve the last deleted characters or line.
ESC Y
   Retrieve previously deleted characters or line.
^T
   Interchange the previous two characters with each other.
ESC T
   Interchange the current (or last) word with the previous word.
^Q
   Accept the next character without treating it as an editor request.


^L
   Clear the window and redisplay the input line.
ESC C
   Capitalize (only) the first character of the current (or last) word.
ESC L
   Change the current (or last) word to lowercase.
ESC U
   Change the current (or last) word to uppercase.
ESC ?
   List valid editor request characters.


List of input_history_ input editor requests:
When the input_history_ I/O module is configured, several more
requests are added to the input line editor.  For information, see
"Notes on video editing" in: input_history_.info


^P
   Select the previous line in the USER.history file for editing.
^N
   Select the next line in the USER.history file for editing.
^R
   Perform an incremental search backward in the USER.history file,
   looking for a line that matches characters typed following ^R.
   Search ends by typing ESC: line can then be edited further; or by
   hitting RETURN: line is re-input as is.
^S
   Perform an incremental search forward in the USER.history file,
   looking for a line that matches characters typed following ^S.
   Search ends by typing ESC: line can then be edited further; or by
   hitting RETURN: line is re-input as is.


List of numeric repetition pre-requests:
   Some requests may be preceded by a repetition count, which causes
   the request to be performed a given number of times.  A
   repetition count is entered by preceding the request with
   one or more of the following pre-requests.

ESC n
   Where n is one or more numeric digits: enter a count of n.
   For example, ESC 100 enters a count of 100.
^U
   Multiply the repetition count entered so far by 4.  If no count
   has been entered, set the repetition count to 4.


Summary of cursor positioning requests and deletion requests:

                   | One character | One Word  | To Edge of Line|
   ----------------|---------------|-----------|----------------|
           | Right | Control-F     | ESC F     | Control-E      |
    Move   |-------|---------------|-----------|----------------|
    Cursor | Left  | Control-B     | ESC B     | Control-A      |
   --------|-------|---------------|-----------|----------------|
           | Right | Control-D     | ESC D     | Control-K      |
    Delete |-------|---------------|-----------|----------------|
           | Left  | DEL           | ESC DEL   | @              |
           |       | or #          | or ESC #  |                |
   --------------------------------------------------------------


Notes:
The ASCII characters given in the above list are the characters
associated with the corresponding functions by default. These
associations can be displayed with the command

  io_call control WINDOW_SWITCH get_editor_key_bindings key_sequence

and may be changed with the command

  io_call control WINDOW_SWITCH set_editor_key_bindings
    key_sequence1 {user_routine1} {control_args1} ...
    key_sequenceN {user_routineN} {control_argsN}



A "word" is a string of one or more consecutive "token characters".
The set of token characters may be displayed with the command

  io_call control WINDOW_SWITCH get_token_characters

and may be changed with the command

  io_call control WINDOW_SWITCH set_token_characters TOKEN_CHAR_STRING

Type "help window_io_" for details about these commands.

