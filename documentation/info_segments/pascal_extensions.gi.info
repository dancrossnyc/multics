08/04/86 Multics Pascal extensions

This segment lists a number of extensions to ISO standard Pascal that
are implemented in the Multics version. For a list of Multics
implementation restrictions and incompatible deviations from the
standard, type "help pascal_limitations.gi". Except for the deviations
documented there, Multics Pascal is an upwards-compatible extension
that includes ISO Pascal.


Those extensions marked (SOL) belong to a set of extensions documented
in "The Programming Language Pascal, Specifications and
Implementation", AFNOR-SOL, 92080 Paris La Defense, Paris, France.

A list of Multics extensions follows. Some of them, as indicated, are
documented under other help topics. The remaining ones are described in
sections below with corresponding names.

  For meaning of "fixed-string" and "dynamic-string" terms below, see
pascal_string.gi.info.


- Underscores in identifiers
- Octal, hexadecimal, and binary notation for integers (SOL)
- Fixed-string padding in assignment
- Fixed-string manipulation via "sread" and "swrite" (SOL)
- Variable initialization with $value (SOL)
- Expressions of constants in declaration of constants.
- Predefined constants "maxreal" and "minreal" (SOL)
- Clock, date and time functions
- The "log10" function
- The "otherwise" extension to the "case" statement
- Dynamic deallocation with "reset"
- Passing arguments to a Pascal program (argc, argv and stop
  extensions)
- The $include directive (type "help pascal_compile_time.gi") (SOL)
- Conditional compilation (type "help pascal_compile_time.gi")


- File I/O extensions (type "help pascal_file_io.gi") (SOL)
     The extensions are: fconnect, fclose, flush, fget, fput, fupdate.
- Importing and exporting variables and procedures
	     (type "help pascal_separate_comp.gi") (SOL)
- Pascal parameters (type "help pascal_separate_comp.gi") (SOL)
- Communication with other languages
	     (type "help pascal_separate_comp.gi")
- Dynamic-strings
  	     (type "help pascal_strings.gi")


Underscores in identifiers:
Multics Pascal allows underscores in identifier names. These are not
allowed in standard Pascal.


Octal, hexadecimal, and binary notation for integers:
Integer constants in these bases are enclosed in quotes (') and
followed by the tag "o" for octal, "x" for hexadecimal, or "b" for
binary. For example, the statement--

	i := 45;

Is equivalent to--

	i := '55'o;  (octal)
	i := '2d'x;  (hexadecimal)
	i := '101101'b;  (binary)


Fixed-string padding in assignment:
Multics Pascal allows a fixed-string (packed array [1..n] of char)
to be assigned the value of a shorter fixed-string. The target is
padded with blanks, for example:

	var char8 : packed array [1..8] of char;
	...
	char8 := 'FOO';

which causes char8 to have the value 'FOO     '. In standard Pascal,
the source and target strings must have the same length.


Fixed-string manipulation with "sread" and "swrite":
These two nonstandard functions operate on strings in the same way that
"read" and "write" operate on file variables. They are:

sread (string, index, var_name1 {, ..., var_nameN})
   reads the values of the named variables starting at the index'th
   position of string, where index is an integer expression and string
   is a fixed-string (array of char) variable.  The return value
   of the function is the integer position of the next character in
   string.
swrite (string, index, expression1 {, ..., expressionN})
   writes the values of the expressions into string starting at the
   index'th position.  The return value is the index of the next
   character to be filled in string.


A further extension allows any of the expression arguments to be of
the form:
	string_variable:length:start

to specify a substring of the string_variable, where length and start
are integer expressions. For example, the Pascal assignment:

	i := swrite (s1, 10, s2:3:5)

Is equivalent to the PL/1 assignment

	substr (s1, 10, 3) = substr (s2, 5, 3);

One other extension is the possibility of writing value of variables
or constants of enumerated type. The symbolic value is written on 32
characters if no length is specified.

     Ex:
	i := swrite (str, k, enum_value1, enum_value2 : 10) ;

Both the "sread" and "swrite" functions return -1 in the case of any
error such as index out of bounds or invalid input.  They also issue
warning messages similar to those issued by "read" and "write". These
warning messages can be suppressed by the -no_io_warnings control
argument to the pascal compiler.


Variable initialization with $value:
The $value compiler directive initializes the values of specified
variables.  It must appear after the "var" section and before the first
procedure declaration.  It is not allowed inside internal procedures.

Initializations declared in the $value section are performed the first
time that the program segment is made known.  Re-initialization can be
forced by terminating and re-initiating the segment.  Re-initialization
is not performed for global variables.

The syntax of $value is--

	$value var_name1 = value1 {; var_name2 = value2} $


The following rules must be observed--

- Variables must appear in the order of their declarations in the "var"
  section.
- The values must be single constants.
- The syntax "N*constant" is allowed to initialize an array or subarray
  of N elements.
- Initialization of records is not allowed.
- Initialization of packed data structures (except for packed arrays of
  char) is not allowed.


 Expressions of constants in declaration of constants: Expressions are
allowed in declarations of constants.  Any expression is allowed.
This expression must be evaluatable at compilation time, without code
generation, and, of course, be of a type allowed for a Pascal
constant.

   Examples:

      CONST
	two = 2;
        	four = two * two;
	bell = chr (5 + two);


Predefined constants "maxreal" and "minreal":
The value of "maxreal" is the largest positive real number allowed.
The value of "minreal" is the smallest positive real number allowed.
Type "help pascal_limitations.gi" for the numerical values of these
constants.


Clock, date and time functions:
The "clock" function returns virtual cpu process time in milliseconds.
The "date" procedure returns an 8-character date of the form MM/DD/YY.
The "time" procedure returns an 8-character time of day of the form
HH:MM:SS.  Examples:

	var cpu_time: real;
	date_string, time_string: packed array [1..8] of char;
	...
	cpu_time := clock;
	date (date_string);
	time (time_string);

  Note that date and time accept also dynamic-strings parameters.
Their len length must be > 8.
  In the example above, the following declarations would be
acceptable:

    	date_string : string (10) ;
 	time_string : string (8);



The "log10" function:
This function returns the base-10 logarithm of its real argument.
Example:
	log_value := log10 (real_number);


The "otherwise" extension to the "case" statement:
This extension to the "case" statement provides a default target if
none of the other tags is satisfied. The standard "case" statement
syntax is--

	case <case_index> of <case_list_element>
	     {; <case_list_element>}
	end

The extended syntax is--

	case <case_index> of <case_list_element>
	     {; <case_list_element>}
	     {; otherwise <statement> {; <statement>}}
	end


Dynamic deallocation with "reset":
Invoking "reset" on a pointer to a data element causes it to free all
allocations that were made in the same area since the corresponding
element was allocated.  This is a convenient way to clean up all the
allocations performed, for example, by a procedure before exiting the
procedure.  For example:

	new (pointer);
	...
	reset (pointer);

cleans up all allocations that were made since before the data pointed


Passing arguments to a Pascal program (argc, argv and stop
extensions):
 You are allowed to pass arguments to Pascal program.
These arguments must be n fixed-strings (where n>= 0) which may be
followed by an additional optional integer argument.  These arguments
are passed by the command processor when you call the program at the
command level.  In this case, the passed arguments are n fixed-strings
which are the n arguments found in the command line by the command
processor.  These arguments may be passed to a main Pascal program
from within one other program.  In this case, passed arguments must be
non-varying fixed-strings (PL/1) *char (Fortran) or PACKED ARRAY
[1..n] OF char (Pascal) and the Pascal main procedure must be declared
"options (variable)" (PL/1) or "descriptors" (Fortran) or "pl1
descriptors" (Pascal).


An additional integer (Fortran, Pascal) or fixed bin (35) (PL/1)
argument may be passed.  This argument is used by the called Pascal
program as return code, set to zero by default.  A non null return
value can be given to this argument using the STOP extension in the
Pascal program.


The predeclared funcion ARGC returns the number of fixed-string
arguments passed to the main procedure by the command processor
(or any other caller).

The predeclared procedure ARGV (NUMBER, PARAM) returns in
the fixed-string PARAM the argument number NUMBER (integer).
Args are numbered from 1 to ARGC.

A fatal error occurs if argument list passed to the main
procedure has no descriptors or if the referenced argument is not
a fixed-string or if it does not exist.


The predeclared procedure STOP causes a GOTO to the "END." sequence of
the main procedure of the program.


Syntax:
		"STOP" ["(" integer expression ")"]


Examples:
		STOP ; (* equivalent to "STOP (0)" *)

		STOP (3) ;

		stop (error_code) ;

If the Pascal program was called with arguments, and if the last
argument is an integer, this argument is set to the value passed to
STOP procedure.

A fatal error occurs if the main procedure is not active (This may
occur if the reference to STOP procedure is in an exported procedure.)
