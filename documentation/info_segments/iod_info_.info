02/08/84  iod_info_

The iod_info_ subroutine extracts information from the I/O daemon
tables needed by those commands and subroutines that submit I/O daemon
requests.


Entry points in iod_info_:
   (List is generated by the help command)


:Entry:  driver_access_name:  02/08/84 iod_info_$driver_access_name


Function:  This entry point returns the driver access name for a
specified request type as defined in the I/O daemon tables.  For
example, the driver access name for the "printer" request type might be
"IO.SysDaemon.*".


Syntax:
declare iod_info_$driver_access_name entry (char(*), char(32),
     fixed bin(35));
call iod_info_$driver_access_name (request_type, access_name, code);


Arguments:
request_type
   is the name of a request type as defined in the I/O daemon tables.
   (Input)
access_name
   is the driver access name for the above request type.  (Output)
code
   is a standard status code.  If the specified request type is not
   found, the code error_table_$id_not_found is returned.  (Output)


:Entry:  generic_type:  02/08/84 iod_info_$generic_type


Function:  This entry point returns the generic type of a specified
request type as defined in the I/O daemon tables.  For example, the
generic type for the "unlined" request type might be "printer".  Refer
to the print_request_types command for information on generic types
available for specific request types.


Syntax:
declare iod_info_$generic_type entry (char(*), char(32),
     fixed bin(35));
call iod_info_$generic_type (request_type, generic_type, code);


Arguments:
request_type
   is the name of a request type as defined in the I/O daemon tables.
   (Input)
generic_type
   is the name of the generic type of the above request type.  (Output)
code
   is a standard status code.  If the specified request type is not
   found, the code error_table_$id_not_found is returned.  (Output)


:Entry:  queue_data:  02/08/84 iod_info_$queue_data


Function:  This entry point examines the I/O daemon tables and returns
the default queue and maximum number of queues for a given request
type.


Syntax:
declare iod_info_$queue_data entry (char(*), fixed bin, fixed bin,
     fixed bin(35);
call iod_info_$queue_data entry (request_type, default_q, max_queues,
     code);


Arguments:
request_type
   is the name of the request type as defined in the I/O daemon tables.
   (Input)
default_q
   is the number of the default queue for the request type.  (Output)
max_queues
   is the number of queues for the request type.  (Output)
code
   is a standard status code.  If the specified request type is not
   found, the code error_table_$id_not_found is returned.  (Output)


:Entry:  rqt_list:  02/08/84 iod_info_$rqt_list


Function:  This entry point examines the I/O daemon tables and returns
a list of request types of a given generic type.


Syntax:
declare iod_info_$rqt_list entry (char(32), (*) char(32), fixed bin,
     fixed bin(35));
call iod_info_$rqt_list entry (gen_type, q_list, n_queues, code);


Arguments:
gen_type
   is the generic type of request types to be listed.  If the string is
   blank, then all request types are listed.  (Input)
q_list
   is an array that is filled in with the request type names to be
   returned.  If the size of this array is less than the number of
   names to be returned, the code error_table_$too_many_names will be
   returned, with the partial list.  (Output)
n_queues
   is the number of entries returned in the q_list array.  (Output)
code
   is a standard status code.  If there are no matching entries, the
   code error_table_$no_entry is returned.  (Output)
