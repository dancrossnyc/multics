01/14/87  pascal, pas

Syntax as a command:  pas path {-control_args}


Function: invokes the Pascal compiler, which compiles a source program
written in Pascal and produces a Multics executable object segment.


Arguments:
path
   is the pathname of the source segment.  The suffix .pascal is
   assumed.


Control arguments:
-add_exportable_names, -aen
   adds names of exported variables and procedures to the object
   segment.
-brief_map, -bfm
   produces a compilation listing containing source, error messages,
   and a statement map.
-brief_table, -bftb
   generates a partial symbol table consisting of only a statement
   table that gives the correspondence between source line numbers and
   object locations for use by symbolic debuggers.  The table appears
   in the symbol section of the object segment.  This control argument
   does not significantly increase the size of the object segment.
-compilation_warnings, -cw
   prints compilation warnings for minor errors.  (Default)
-conditional_execution VAR_NAME true/false, -cond VAR_NAME true/false
   forces the value of the conditional compilation variable VAR_NAME to
   either true or false.  It overrides any assignments of VAR_NAME in
   the text of the program.
-debug, -db
   generates code to check for references outside of array bounds,
   invalid assignments, values that are out of range, and a variety of
   other potential errors.  Also initializes program storage to blanks
   (\040) so that a reference through an uninitialized pointer causes a
   fault_tag_1 condition.  (Default)
-english
   assumes that Pascal reserved words are in English.  (Default)
-error_messages, -em
   prints error messages on user_output and includes them in the
   listing segment.  (Default) cbn A
-extended_character_code, -ecc
   extends internal code allowed for characters to 255 (decimal).
-french
   accepts Pascal reserved words in French.  Type "help
   pascal_french_keywords.gi" for the correspondence between French and
   English reserved words.
-full_extensions, -full
   uses all nonstandard extensions defined for Multics Pascal.
   (Default)
-interactive, -int
   allows text files to operate in interactive mode.  On reset or
   readln, "get" of next character is deferred until the next reference
   to the file or to one of the variables attached to the file, such as
   eof, eoln, and file^.  (Default)
-io_warnings, -iow
   allows warnings to be printed by I/O procedures called by the
   compiled program.  (Default)
-list
   produces a compilation listing including source, error messages, map
   and cross-reference of symbols, statement map, and generated code in
   symbolic ALM.
-long_profile, -lpf
   generates additional code that records the virtual CPU time and
   number of page faults for each source statement.  It is incompatible
   with -pf.  The profile command can handle both regular and long
   profiles.  This feature adds considerable CPU overhead to heavily
   executed code.  The extra CPU time is subtracted out so that it does
   not appear in the report printed by profile.
-map
   produces a compilation listing including source, error messages, map
   and cross-reference of symbols, and statement map.
-no_compilation_warnings, -ncw
   does not print compilation warnings.
-no_debug
   does not generate code to test for references outside of array
   bounds, values out of range, or other errors, and does not
   initialize storage to blanks.
-no_error_messages, -nem
   does not print error messages on user_output.  They are still
   included in the listing segment.
-no_extended_character_code, -necc
   allows internal code range of 0..127 for characters, as required by
   the standard.  (Default)
-no_interactive, -nint
   does not allow text files to operate in interactive mode.
-no_io_warnings, -niow
   does not print I/O warnings if a nonfatal error occurs in I/O
   procedures called by this program.
-no_list
   does not produce a compilation listing.  (Default)
-no_long_profile, -nlpf
   does not generate additional code to record the virtual CPU time and
   number of page faults for each source segment.  (Default)
-no_private_storage, -nps
   dynamically allocates exported variables in external static.
   (Default)
-no_profile, -npf
   does not generate code to meter the execution of source statements.
   (Default)
-nonrelocatable, -nrlc
   generates an object segment that cannot be bound, thus saving from
   10 to 20 percent of compilation time.
-no_table, -ntb
   does not generate a symbol table in the object segment.
-page_length N, -pl N
   specifies a page length for the listing segment.  (Default: 59
   lines)
-private_storage, -ps
   allocates all exported variables in a segment in the process
   directory named progname.defs, where progname is the entryname of
   the path argument, without the .pascal suffix.  This segment is
   created if it does not exist.
-profile, -pf
   generates additional code to meter the execution of individual
   statements.  Each statement in the object program contains an
   additional instruction to increment an internal counter associated
   with that statement.  After a program has been executed, you can use
   the profile command to print the execution counts.
-reference_table -rftb
   generates a full symbol table (see -table) and adds for each
   variable a table of statements where this variable is referenced or
   modified.  This feature, used by pascal_cross_reference, is
   experimental.
-relocatable, -rlc
   generates an object segment that can be bound.  (Default)
-sol_extensions, -sol
   allows only French SOL extensions to be used (type "help
   pascal_extensions.gi" for their list).
-standard
   allows only standard (ISO) Pascal to be used.  (Default: -full)
-table, -tb
   generates a full symbol table for use by symbolic debuggers.  The
   symbol table is part of the symbol section of the object segment and
   consists of two parts: a statement table that gives the
   correspondence between source line numbers and object locations, and
   an identifier table containing information about every identifier
   actually referenced by the source program.  This control argument
   usually lengthens the object segment significantly.  (Default)


Notes: If compilation errors are encountered, error messages are
printed on user_output.

If you supply incompatible control arguments, the rightmost one is
used.

Multics Pascal is case insensitive.  All identifier names are mapped to
lowercase in the program and its symbol table.  As a result, the Pascal
program header
   program: Foo;
produces a segment entry point with the name "foo."

For information on Pascal see the Multics Pascal User's Guide (GB62).


Notes on listing: The Pascal compilation listing contains the
following sections in this order:
   1. Header: gives the full pathname of the source segment, the
      Multics site indentification, the date and time of compilation,
      and the compiler indentification.
   2. Source: with lines numbered sequentially.  In include files,
      file number precedes the line number.
   3. Any error messages.
   4. Storage requirements for the object segment.
   5. List of source files used.
   6. Complete map and cross-reference for symbols declared and used,
      symbols declared and never used, and symbols declared by default.
   7. Displacement for fields given in octal (bytes), locations for
      variables given in octal (words), and sizes given in octal
      (bytes).

   8. "DEF:" followed by the number of the line where the symbol is
      defined.  "REF:" followed by the number of the line(s) where the
      symbol is referenced.  An asterisk is printed for each reference
      where the variable or field is set or passed by reference ("var"
      parameter) to a subroutine.

   9. Complete map and cross-reference of labels.  "DEF:" is followed
      by the number of the line where the label is defined.  "DCL:" is
      followed by the number of the line where the label is declared.
      "REF:" is followed by the number of the lines where the label is
      referenced in a GOTO statement.  An asterisk is printed where the
      GOTO statement exits the current procedure.

   10.
      Statement map:  gives the octal location of the first instruction
      of each statement of the source program.
