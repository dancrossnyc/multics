:Info: mtape_:  2020-12-26  mtape_ I/O module

Syntax as a command:
   io_call attach SWITCHNAME mtape_ VOLUME_SPECs {-control_args}


Syntax of attach description:
   mtape_ VOLUME_SPECs {-control_args}


Function:  The mtape_ I/O module supports I/O to/from tapes in
   - ANSI standard format
   - IBM standard format
   - IBM unlabeled format
   - IBM Disk Operating System (DOS) formatted

For details not described in this info segment, see the Multics
Subroutines and I/O Modules manual (order no. AG93) description of the
mtape_ I/O module.


Arguments:
attach
   is the iox_ operation to be performed by the io_call command.
SWITCHNAME
   is the name of an I/O switch to be attached to the mtape_ I/O
   module.
mtape_
   is the I/O module name.


Arguments for volume specification:
   Each VOLUME_SPEC argument requires a VOL_NAME, which may be
   followed by a -comment control argument.
VOL_NAME
   label of a volume in the volume set to be attached.


Control arguments for volume specification:
-volume VOL_NAME
   used when VOL_NAME begins with hyphen (-) character, VOL_NAME is a
   label of a volume in the volume set to be attached.
-comment VNi_STR, -com VNi_STR
   an optional message to be displayed on the operator console at the
   time this VOL_NAME is to be mounted.  The comment text VNi_STR may
   be from 1 to 64 characters in length and must be quoted if it
   contains embedded white space.  The optional comment specification
   must follow its corresponding volume specification and precede the
   next volume specification.


Control arguments (attach description):
-default_volume_type STR, -dvt STR
   specifies the volume type (STR) to be used for Per-Format module
   selection (see "Notes on tape format selection" below) when an
   unreadable or unlabeled tape is mounted for potential output
   operations and no "-volume_type" control argument is given.
   Permissable values for this control argument are "ansi", or "ibm".
   (Default value is "ansi".)


-density N, -den N
   specifies the recording density for output operations in bits per
   inch (BPI).  For input operations, the density is determined and
   set automatically by RCP.  Permissible values are 200, 556, 800,
   1600 and 6250.  (Default density is 1600 BPI.)


-device N, -dv N
   specifies the number of tape devices that will be requested to be
   used simultaneously for multi-volume operations.  Permissible
   values are from 1 to 63.  (Default is 1 device.)


-display, -ds
   specifies that the entire attach description, after it has been
   parsed and any necessary defaults added, will be displayed on the
   user_output I/O switch.
-no_display, -nds
   specifies that the attach description will not be displayed.
   (Default)


-error, -err
   specifies that verbose error messages will be displayed when
   exception conditions (e.g.  unrecoverable tape errors) are
   detected.  (Default)
-no_error, -nerr
   specifies that only error codes will be returned upon detection of
   exception conditions.


-label, -lbl
   specifies that volume and file label records exist and or are to
   be recorded by the selected Per-Format module.  (Default)
-no_label, -no_labels, -nlbl
   specifies that volume and file label records do not exist or are
   not to be recorded by the selected Per-Format module.  If this
   control argument is given when attempting to select a Per-Format
   module that does not accept unlabeled tape volumes, the attachment
   is aborted.


-ring, -rg
   specifies that volumes are to be mounted with write rings
   installed.
-no_ring, -nrg
   specifies that volumes are to be mounted with no write rings
   installed.  (Default)


-speed N1{,N2,...,Nn}, -ips N1{,N2,...,Nn}
   specifies desired tape drive speed(s) in inches per second (IPS).
   permissible values are 75, 125 and 200.  If more than one speed
   device is to be used, the optional second and third speed
   specification must be separated by commas as shown.  If this
   control argument is omitted, RCP will pick any available speed
   device.


-system, -sys
   specifies that the user is requesting to be considered a system
   process.
-no_system, -nsys
   specifies that the user is not to be considered a system process.
   (Default)


-track N, -tk N
   specifies the track type of the tape drive to be used.
   Permissible values are 7 or 9.  (Default is 9 track.)


-volume_type STR, -vt STR
   specifies the volume type to be used in Per-Format module
   selection (See "Notes on tape format selection" below).
   Permissable values for this control argument are "ansi", or "ibm".
   (No Default.  The volume type is determined by RCP for labeled
   volumes and by the "-default_volume_type" specification for
   unlabeled or unreadable volumes.)


-wait, -wt
   specifies that when tape devices are not immediately available
   from RCP for a requested volume mount, the mtape_ I/O module
   should wait for the number of minutes specified by the
   "-wait_time" control argument (or its default value), before
   reporting an error on the initial volume mount or subsequent
   volume switching.
-no_wait, -nwt
   specifies that the mtape_ I/O module will not wait for an
   available device to become free, but instead report an error
   immediately.  (Default)


-wait_time N, -wtm N
   specifies the time (in minutes) that the mtape_ I/O module will
   wait for unavailable tape drives to become available for volume
   mounts when the "-wait" control argument is specified.
   Permissible values range from 1 to 1440 minutes (24 hours).
   (Default wait time is 10 minutes.)


List of opening modes:
   The following I/O opening modes are supported by mtape_.
sequential_input
   read data blocks from tape media.
sequential_output
   write data blocks to tape media.


List of operations:
   mtape_ implements the following I/O setup operations.  For details
   on any operation, type: help mtape_.OPERATION

open_file, open
   opens an mtape_ I/O switch for reading or writing a file from the
   attached volume set.
close_file, close
   closes an mtape_ I/O switch to end operations on the current file.
detach, detach_iocb
   detaches an mtape_ I/O switch to end operations on the volume set.


List of i/o operations:
   The following standard iox_ operations are supported by mtape_.
   For details about any operation, type: help iox_$OPERATION
read_record
   read records from an mtape_ file, when opened for sequential_input.
write_record
   write records to an mtape_ file, when opened for sequential_output.
position
   when opened for sequential_input, mtape_ supports all positioning
   types appropriate for sequential_input.
control
   executes a special mtape_ operation.  See "List of controls" and
   "List of control operations" below.


List of controls:
   Controls with the following ORDERNAMEs require no additional data.
   The info_ptr argument should be a null pointer.  To use these
   controls from a command line, type:
      io_call control SWITCHNAME ORDERNAME

force_end_of_volume, feov
   simulates detection of the end of tape reflective foil upon
   the next write block operation.  The PFM will then close out
   the volume by writing the EOV trailer labels and request a
   volume switch for the next volume in the volume sequence
   list.  The I/O switch must be open for sequential_output.


ring_in, rin
   requires that the I/O switch is closed and will cause all
   currently mounted volumes of the volume set to be demounted.
   When the next file opening is performed, the required volume
   will be re-mounted with the write ring installed.


List of control operations:
   Controls with the following ORDERNAMEs accept info_ptr values.  For
   details about inputs/outputs for each control order, type:
      help mtape_.ORDERNAME

file_status, fst
   returns a pointer to a structure that contains the status of
   the current file specified by the open description.
file_set_status, fsst
   returns a pointer to an array of structures defining the
   file status for all files in the current file set.
hardware_status, hwst
   returns a pointer to a structure that contains hardware status
   for the last I/O operation.


volume_status, vst
   returns a pointer to a structure that contains the status of
   the current volume.
volume_set_status, vsst
   returns a pointer to an array of structures defining the
   volume status for all volumes in the current volume set.
io_call
   executes one of the above mtape_ control operations on behalf of
   the io_call command.  The details for each control include
   "Syntax as a command" and/or "Syntax as an active function"
   sections describing how inputs for the control are given via the
   io_call command, or how outputs from the control are displayed or
   returned as the active function result.


Notes on tape format selection:
Unlike other Multics tape I/O modules, mtape_ will process tapes
in several different formats (currently limited to ANSI and IBM
formats).  In order to accommodate this capability, the mtape_ I/O
module itself does all of the physical tape I/O and error
recovery, but allows all logical file and record level I/O to be
performed by a format specific subroutine known as a Per-Format
module (PFM).  Selection of the appropriate PFM is performed at
attach time after the first volume has been mounted.  In the
absence of a "-volume_type" specification, the PFM is selected on
the basis of the volume_type info returned by RCP.


Notes on user settable defaults:
The default values for the attach, open, close and detach
descriptions were picked for their sensibility and the authors
experience in how most people process tapes.  However, it is
recognized that for whatever reason different people and or
groups of people may want different default values to suit their
needs.  Therefore, a command has been written which will allow
the attach, open, close and detach description default values to
be tailored to a particular groups or persons needs.  For further
information, type: help mtape_set_defaults


Notes on user label processing:
Each labeled volume set may include user-specified volume and file
labels.  Generation of output labels and validation of input labels is
performed by a user label subroutine.  This routine is referenced by
the -label_entry open description argument.

For information about the calling sequence and functions of the label
processing routine, type:
   help mtape_user_label_rtn_


:Info: mtape_.open_file: mtape_.open:  2020-06-17  mtape_ open_file operation

Syntax as a command:
   io_call open_file SWITCHNAME OPENING_MODE {-control_args}
   io_call open      SWITCHNAME OPENING_MODE


Syntax of open description:
   {-control_args}


Function:
Opening a file is accomplished by calling the iox_$open_file entry
which accepts a character string "open description" argument.  The
open description is one or more control arguments giving file
attribute and positioning information to the selected per-format
module (PFM).  Both the ANSI and IBM PFMs accept sequential_input and
sequential_output opening modes.

The iox_$open entry is also supported.  It passes an empty string
description to the open_file entry, thereby applying default open
description values.  For information about iox_ entrypoints, type:
   help iox_$open_file    or   help iox_$open


Arguments:
open_file
   is the I/O operation to be performed when open description control
   arguments are provided.
open
   is the I/O operation to be performed when default values are
   acceptable for each opening description control argument.
SWITCHNAME
   is the name of an I/O switch attached using the mtape_ I/O module.
OPENING_MODE
   may be any mode given in "List of opening modes below.


List of opening modes:
   The following I/O opening modes are supported by mtape_.  Each
   description ends numeric value followed by constant name (from
   iox_modes.incl.pl1) for that opening mode.  For iox_ details, type:
      help iox_$open_file

sequential_input, sqi
   read records from the tape media. (4 = Sequential_input)
sequential_output, sqo
   write records to the tape media. (5 = Sequential_output)


Control arguments for open description (all tape formats):
-append, -app
   specifies that the requested file is to be appended to the
   end of the file set as a new file.  The requested opening
   mode must be sequential_output or the file opening will be
   aborted.
-no_append, -napp
   specifies that the requested file is not to be appended to
   the end of the file set.  (Default)


-block N, -bk N
   specifies the block size in bytes for output operations and
   is also required for input operations for IBM unlabeled or
   DOS formatted tapes.  For input operations on standard
   labeled IBM or ANSI tape files, the block size is obtained
   from the the file header label record.  Permissible values
   are from 18 to 99996 bytes.  (Defaults are 2048 bytes for
   ANSI and 8192 bytes for IBM formats.)


-comment STR, -com STR
   specifies a user comment to be displayed on the user_output
   I/O switch, after the file has been successfully opened.
   The comment text (STR) may be from 1 to 80 characters in
   length.


-default_fixed_record N, -dfr N
   specifies the record length to be used for "f" or "fb" formats in
   the absence of a "-record" specification.  The intended purpose of
   this control argument is to supply a default value for record size
   without having to include a "-record" specification in the open
   description.  If the user wishes to explicitly specify the record
   length, the "-record" control argument should be used.  Although
   the "-default_fixed_record" control argument may appear in a users
   open description and be processed accordingly, this would not be
   considered the "proper" method of explicitly supplying the record
   length.  The default value of "N" is set to 80 (for 80 character
   records) for both the ANSI and IBM PFMs.  This default value may
   be changed by the default setting mechanism (see "Notes on user
   settable defaults" below).


-default_spanned_record N, -dsr N
   specifies the record length to be used for ANSI "s" or "sb"
   formats, or IBM "vs" or "vbs" formats, in the absence of a
   "-record" specification.  The intended purpose of this
   control argument is to supply a default value for record
   size without having to include a "-record" specification in
   the open description.  If the user wishes to explicitly
   specify the record length, the "-record" control argument
   should be used.  Although the "-default_spanned_record"
   control argument may appear in a users open description and
   be processed accordingly, this would not be considered the
   "proper" method of explicitly supplying the record length.
   The default value of "N" is set to 1044480
   (sys_info$max_seg_size * 4) for both the ANSI and IBM PFMs.


   This default value may be changed by the default setting mechanism
   (see "Notes on user settable defaults" below).


-default_variable_record N, -dvr N
   specifies the record length to be used for ANSI "d" or "db"
   formats, or IBM "v" or "vb" format in the absence of a
   "-record" specification.  The intended purpose of this
   control argument is to supply a default value for record
   size without having to include a "-record" specification in
   the open description.  If the user wishes to explicitly
   specify the record length, the "-record" control argument
   should be used.  Although the "-default_variable_record"
   control argument may appear in a users open description and
   be processed accordingly, this would not be considered the
   "proper" method of explicitly specifying the record length.
   The default value of "N" is set equal to the default block
   size (i.e.  2048 for ANSI and 8192 for IBM).


   This default value may be changed by the default setting mechanism
   (see "Notes on user settable defaults" below).


-display, -ds
   specifies that the entire open description, after it has
   been parsed and any necessary defaults added, is to be
   displayed on the user_output I/O switch.
-no_display, -nds
   specifies that the open description will not be displayed on
   the user_output I/O switch.  (Default)
-expires date, -exp date
   specifies the expiration date of the file to be created,
   where date must be of a form acceptable to the
   convert_date_to_binary_ subroutine.


-extend, -ext
   specifies extension of an existing file.
-no_extend, -next
   specifies that the requested file is not to be extended.
   (Default)
-force, -fc
   specifies that the expiration date of the file being overwritten
   is to be ignored.
-no_force, -nfc
   specifies that the expiration date of a file being
   overwritten is not to be ignored.  If the expiration date is
   not in the past, the user is queried for permission to
   overwrite the file.  (Default)


-format F, -fmt F
   specifies the record format of the file.  Permissible values
   for ANSI: U, F, D, S, FB, DB, and SB; for IBM: U, F, V, VS,
   FB, VB, and VBS.  (They may be specified in either upper or
   lower case.) (Default values are DB for ANSI format and VB
   for IBM formats.)
-label_entry entry, -lbe entry
   specifies the entry point of a user subroutine which will be
   called to process the contents of user label records on
   input and generate the contents of same, for subsequent
   writing by mtape_ on output.  (See "Notes on user label processing"
   below.)


-last_file, -lf
   specifies that the file to be processed is the last file of
   the file set.
-not_last_file, -nlf
   specifies that the file to be processed may not be the last
   file of the file set.  (Default)
-mode STR, -md STR
   specifies the encoding mode used to record the file data.
   Permissible values of STR are ascii, ebcdic or binary.
   (Default for ANSI format is ascii; for IBM format the
   default is ebcdic.)


-modify, -mod
   specifies modification of an existing file while retaining
   the file attributes as recorded in the original files header
   label records.
-no_modify, -nmod
   specifies that modification of an existing file is not to be
   performed.  (Default)
-name STR, -nm STR
   specifies the file identifier of the requested file.  STR
   can be from 1 to 17 characters.


-next_file, -nf
   specifies the file to be processed as the "next" (or first)
   file of the file set.  This control argument is intended to
   be used when sequentially processing files.  For output
   operations, if -name and or -number are not specified, the
   values of their respective fields are fabricated by using
   the next sequential number as the file sequence number and
   forming the file name by concatenating the string "FILE"
   with the alpha-numeric representation of the file number.
   (i.e.  "FILE0001").  (Default)
-not_next_file, -nnf
   specifies that the requested file is not the next file.


-number N, -nb N
   specifies the file sequence number or numerical position
   within the file set.  Permissible values range from 1 to
   9999.


-record N, -rec N
   specifies the logical record length in bytes.  Permissible
   values range from 18 to 1044480 (sys_info$max_seg_size * 4)
   bytes, but the legality of the record size is dependent on
   the record format specified with the "-format" control
   argument and the block size.  In general the record size
   must be <= the block size with the exception of "spanned
   record" formats (i.e.  ANSI S or SB formats and IBM VS or
   VBS formats), where the record size may be the max
   allowable.  (No default value.  The default record size is
   determined by the value of the appropriate "-default_(fixed
   spanned variable)_record" specification.)


-replace STR, -rpl STR
   specifies replacement of an existing file, where STR is the
   file identifier to use in the search for the file to be
   replaced.


Control arguments for open description (ansi tape format):
-buffer_offset, -bo
   specifies that each block will be recorded with an 8
   character prefix.  See "Notes on ansi block prefix" below.
-no_buffer_offset, -nbo
   specifies that no block prefix will be recorded in each data
   block.  (Default)


-generate, -gen
   specifies creating a new "generation" of an existing file by
   replacement.  The file attributes recorded in the file
   header remains the same as the replaced file, but the
   generation number in the file header is incremented by 1.
-no_generate, -ngen
   specifies that a new generation of an existing file will not
   be created.  (Default)


Control arguments for open description (ibm tape format):
-dos
   specifies that the file to be processed is in IBM DOS
   format.  IBM DOS files contain only one header label (the HDR1
   label) and do not retain any information as to file format,
   block length and record length.  It is therefore necessary
   to specify the "-block", "-record" and "-format" control
   arguments (or allow the default values for same to be used)
   even when opening an IBM DOS file for input.
-no_dos, -ndos
   specifies that the file to be processed is not in IBM DOS
   format but is in fact in IBM standard OS/VS format.
   (Default)


-system_use
   specifies that when opening for output, certain fields of
   the HDR2 and EOV2 label records will be used to record the
   recording mode (ASCII, EBCDIC or BINARY), and the volume
   name of the next volume in the volume sequence list.  The
   fields used for these purposes are HDR2 character position
   40 for recording mode (recorded as an EBCDIC "1", "2", or
   "3" for ASCII, EBCDIC, or BINARY respectively), and EOV2
   character positions 41 - 46 for the next volume name.  The
   IBM OS/VS Tape Labels specification marks these fields as
   "reserved for future use".  It is therefore recommended that
   the "-system_use" control argument not be used in an
   interchange environment.


-no_system_use
   specifies that the HDR2 and EOV2 label record fields
   mentioned above will not be corrupted.  (Default)


Notes on ansi block prefix:
  dcl 1 tape_block aligned based,
      2 block_size fixed dec (7, 0) unaligned,
      2 block_number fixed dec (7, 0) unaligned,
      2 block_data char (tape_block.block_size - 8) unaligned;

block_size
   is the block size in 9 bit bytes, including the block_size and
   block_number elements (8 characters long).
block_number
   is the numerical sequence number of the block within the current
   physical file, starting at block number 0.
block_data
   is the user specified data recorded in the block.  The length of
   this field is governed by the user specified block length.


An ansi-format tape block written with the -block_offset control
argument includes a prefix describing each data block.  Each block
is written to tape using the tape_block template shown below.

The block_size and block_number field are recorded in the packed fixed
decimal pl1 data type, so that they may be written in the same manner
without regard to interface recording mode (nine bit or binary).  The
buffer offset prefix length is recorded in the ANSI HDR2 label record
buffer offset field (character positions 51 and 52).


Notes on user settable defaults:
The default values for the attach, open, close and detach descriptions
were picked for their sensibility and the authors experience in how
most people process tapes.  However, it is recognized that for
whatever reason different people and or groups of people may want
different default values to suit their needs.  Therefore, a command
has been written which will allow the attach, open, close and detach
description default values to be tailored to a particular groups or
persons needs.  For further information, type "help
mtape_set_defaults".


Notes on user label processing:
Each labeled volume set may include user-specified volume and file
labels.  Generation of output labels and validation of input labels is
performed by a user label subroutine.  This routine is referenced by
the -label_entry open description argument (see above).

For information about the calling sequence and functions of the label
processing routine, type:
   help mtape_user_label_rtn_


:Info: mtape_.close_file: mtape_.close:  2020-06-17  mtape_ close_file operation

Syntax as a command:
   io_call close_file SWITCHNAME {-control_args}
   io_call close      SWITCHNAME


Syntax of close description:
   {-control_args}


Function:
Closing a file is accomplished by calling the iox_$close_file
entry which accepts as one of its arguments a character string
"close description".  The close description supplies close option
information to the selected Per-Format Module (PFM).

The iox_$close entry is also supported.  It passes an empty string
description to the close_file entry, thereby applying default close
description values.  For information about iox_ entrypoints, type:
   help iox_$close_file    or   help iox_$close


Arguments:
close_file
   is the I/O operation to be performed when close description control
   arguments are provided.
close
   is the I/O operation which may be called when default values are
   acceptable for each close description control argument.
SWITCHNAME
   is the name of an I/O switch attached using the mtape_ I/O module.


Control arguments:
-close_position STR, -cls_pos STR
   specifies where to physically position the tape volume
   within the bounds of the file that is being closed.  The
   values of STR are case insensitive and may be selected from
   "bof" (for beginning of file), "eof" (for end of file) and
   "leave" to leave the tape positioned where it is.  (Default
   close position is "leave".)
-comment STR, -com STR
   specifies a user comment to be displayed on the user_output
   I/O switch, after the file has been successfully closed.
   The comment text (STR) may be from 1 to 80 characters in
   length.


-display, -ds
   specifies that the entire close description, after it has
   been parsed and any necessary defaults added, is to be
   displayed on the user_output I/O switch.
-no_display, -nds
   specifies that the close description will not be displayed
   on the user_output I/O switch.  (Default)


Notes on user settable defaults:
The default values for the attach, open, close and detach descriptions
were picked for their sensibility and the authors experience in how
most people process tapes.  However, it is recognized that for
whatever reason different people and or groups of people may want
different default values to suit their needs.  Therefore, a command
has been written which will allow the attach, open, close and detach
description default values to be tailored to a particular groups or
persons needs.  For further information, type: help mtape_set_defaults


:Info: mtape_.detach: mtape_.detach_iocb:  2020-06-17  mtape_ detach operation

Syntax as a command:
   io_call detach      SWITCHNAME {-control_args}
   io_call detach_iocb SWITCHNAME


Syntax of detach description:
   {-control_args}


Function:
Detaching the I/O switch is accomplished by calling the iox_$detach
entry which accepts as one of its arguments a character string "detach
description".  The detach description supplies mtape_ with detach
option information.

The iox_$detach_iocb entry is also supported.  It passes an empty
string description to the detach entry, thereby applying default
detach description values.  For information about iox_ entrypoints,
type:    help iox_$detach    or   help iox_$detach_iocb


Control arguments:
-comment STR, -com STR
   specifies the contents of an optional comment to be
   displayed on the operator console when demounting the first
   volume found that is still mounted.  The comment may be from
   1 to 65 characters in length.
-display, -ds
   specifies that the entire detach description, after it has
   been parsed and any necessary defaults added, is to be
   displayed on the user_output I/O switch.
-no_display, -nds
   specifies that the detach description will not be displayed
   on the user_output I/O switch.  (Default)


-rewind, -rew
   specifies that the remaining mounted volumes are to be
   rewound to load point upon detachment.  (Default)
-unload, -unld
   specifies that the remaining mounted volumes are to be
   physically unloaded from the tape drive upon detachment.


Notes on user settable defaults:
The default values for the attach, open, close and detach descriptions
were picked for their sensibility and the authors experience in how
most people process tapes.  However, it is recognized that for
whatever reason different people and or groups of people may want
different default values to suit their needs.  Therefore, a command
has been written which will allow the attach, open, close and detach
description default values to be tailored to a particular groups or
persons needs.  For further information, type: help mtape_set_defaults


:Info: mtape_.file_status: mtape_.fst:  1985-02-18  mtape_ file_status control

Control order:  file_status, fst

The iox_$control info_ptr argument points to a structure that reports
the status of the current file specified by the open description.
File attribute as well as error summary information is included.


Syntax:
   call iox_$control (iocb_ptr, "file_status", info_ptr, code);


Arguments for iox_$control:
info_ptr
   points to the following structure, or is a null pointer.  See
   "Notes on the info_ptr" below.

      dcl 1 mtape_fst aligned based (info_ptr),
	  2 version char (8),
	  2 file_type fixed bin,
	  2 file_state fixed bin,
	  2 error_code fixed bin (35),
	  2 file_id char (32),
	  2 file_seq fixed bin,
	  2 begin_vol_index fixed bin,
	  2 end_vol_index fixed bin,
	  2 file_sections fixed bin,
	  2 generation fixed bin,
	  2 gen_version fixed bin,
	  2 creation char (6),
	  2 expiration char (6),
	  2 file_format char (3),
	  2 block_len fixed bin,
	  2 reclen fixed bin (21),
	  2 recording_mode char (6),
	  2 block_count fixed bin (35),
	  2 read_errors fixed bin (35),
	  2 write_errors fixed bin (35);


List of elements:
version
   is the current structure version.  If info_ptr is nonnull on input,
   the caller must set the version element to fst_version_1.
   Otherwise mtape_ will set the version element in the structure it
   allocates.
file_type
   is the encoded file set type as determined by RCP, and could have
   one of the following values.
      4 = IBM file set
      5 = ANSI file set


file_state
   is the current state of this file and could have one of the
   following values:
      0 = No information available (I/O switch never opened)
      1 = File not open
      2 = File open
      3 = File open and locked for error

   The "locked for error" state referenced above is defined as an
   error or circumstance that prevents continued processing of this
   file.  For example, parity error while reading, reached end of
   information, no next volume available, etc.


error_code
   is the error code when mtape_fst.file_state is equal to 3 above,
   otherwise equal to 0.
file_id
   is the file name or identifier as recorded in the appropriate file
   label record.  This field. will be blank for unlabeled formats.
file_seq
   is the numerical order of this file within the file set.
begin_vol_index
   is the numerical index of the first volume set member on which this
   file resides.
end_vol_index
   is the numerical index of the last volume set member on which this
   file resides.


file_sections
   is a count of the number of volumes on which this file resides.
generation
   is the generation number of this file for those formats that
   support several "generations" of files.  If this is the first
   generation, or if the format does not support several generations,
   then this field will be equal to 0.
gen_version
   is the generation version number for those formats that support
   file generations.  If this is the first generation, or if the
   format does not support several generations, then this field will
   be equal to 0.
creation
   is the Julian creation date of this file in the form "yyddd".


expiration
   is the expiration creation date of this file in the form "yyddd".
   If no expiration date was specified at file creation time, then the
   field will contain the string "00000".
file_format
   is the encoded alphabetic representation of the volume type
   specific file format (e.g. "VBS" for IBM variable spanned block
   format, "DB" for ANSI variable record, blocked format, etc).
block_len
   is the maximum block length of each block within this file.
reclen
   is the maximum record length of the logical records within this
   file.


recording_mode
   is the numeric indication of the recording mode of this file.  The
   following values are defined:
      0 = Unknown or unspecified
      1 = ASCII
      2 = EBCDIC
      3 = Binary
block_count
   is the number of tape blocks contained in this file. If the file is
   still open, this number represents the number of blocks processed
   thus far.


read_errors
   is a count of the number of read errors (recoverable as well as
   unrecoverable) encountered while reading this file.  Note that read
   errors recovered by the hardware auto retry are not counted.  Only
   Multics reread operations (with varying threshold and deskew
   settings) are counted.
write_errors
   is a count of the number of write errors (recoverable as well as
   unrecoverable) encountered while writing this file.


Notes on the info_ptr:
The mtape_fst structure declaration shown above can be found in the
include file "mtape_file_status.incl.pl1".  If the iox_$control
info_ptr argument is null, then mtape_ will allocate the structure
returned to the caller; the caller must free that structure.


Syntax as a command:
   io_call control SWITCHNAME fst


Arguments for io_call:
SWITCHNAME
   is the name of an I/O switch attached to the mtape_ I/O module.
file_status, fst
   is the name of the control order to be performed.


Notes on the io_call command:
When the io_call command performs an mtape_ control order, any data
normally returned by that control order is interpreted by mtape_ and
displayed on the user's terminal.


:Info: mtape_.file_set_status: mtape_.fsst:  1985-02-18  mtape_ file_set_status control

Control order:  file_set_status, fsst

The iox_$control info_ptr argument points to a structure holding an
array of file status for all files in the current file set.


Syntax:
   call iox_$control (iocb_ptr, "file_set_status", info_ptr, code);


Arguments for iox_$control:
info_ptr
   points to the following structure, or is a null pointer.  See
   "Notes on the info_ptr" below.

      dcl 1 mtape_fsst aligned based (info_ptr),
	2 version char (8),
	2 file_set_id char (32),
	2 file_type fixed bin,
	2 nfiles fixed bin,
	2 fs_stat (mtape_fsst nfiles refer (mtape_fsst.nfiles)),
	  3 file_state fixed bin,
	  3 error_code fixed bin (35),
	  3 file_id char (32),
	  3 file_seq fixed bin,
	  3 begin_vol_index fixed bin,
	  3 end_vol_index fixed bin,
	  3 file_sections fixed bin,
	  3 generation fixed bin,
	  3 gen_version fixed bin,
	  3 creation char (6),
	  3 expiration char (6),
	  3 file_format char (3),
	  3 block_len fixed bin,
	  3 reclen fixed bin (21),
	  3 recording_mode char (6),
	  3 block_count fixed bin (35),
	  3 read_errors fixed bin (35),
	  3 write_errors fixed bin (35);


List of elements:
version
   is the current structure version.  If info_ptr is nonnull on input,
   then the caller must set the version field to fsst_version 1.  If
   null, mtape_ will set the version element in the structure it
   allocates.
file_set_id
   is the file set identifier recorded in the file labels.  This is
   usually the volume name of the first volume in the volume set.
file_type
   is the encoded file set type as determined by RCP, and could have
   one of the following values.
      4 = IBM file set
      5 = ANSI file set


nfiles
   is the number of files in the file set.
fs_stat
   is an array of structures of file set members, which appears below
   in sequential order.  See "Notes on the mtape_fsst structure"
   below.


file_state
   is the current state of this file and could have one of the
   following values:
      0 = No information available (I/O switch never opened)
      1 = File not open
      2 = File open
      3 = File open and locked for error

   The "locked for error" state referenced above is defined as an
   error or circumstance that prevents continued processing of this
   file.  For example, parity error while reading, reached end of
   information, no next volume available, etc.


error_code
   is the error code when mtape_fst.file_state is equal to 3 above,
   otherwise equal to 0.
file_id
   is the file name or identifier as recorded in the appropriate file
   label record.  This field. will be blank for unlabeled formats.
file_seq
   is the numerical order of this file within the file set.
begin_vol_index
   is the numerical index of the first volume set member on which this
   file resides.
end_vol_index
   is the numerical index of the last volume set member on which this
   file resides.


file_sections
   is a count of the number of volumes on which this file resides.
generation
   is the generation number of this file for those formats that
   support several "generations" of files.  If this is the first
   generation, or if the format does not support several generations,
   then this field will be equal to 0.
gen_version
   is the generation version number for those formats that support
   file generations.  If this is the first generation, or if the
   format does not support several generations, then this field will
   be equal to 0.
creation
   is the Julian creation date of this file in the form "yyddd".


expiration
   is the expiration creation date of this file in the form "yyddd".
   If no expiration date was specified at file creation time, then the
   field will contain the string "00000".
file_format
   is the encoded alphabetic representation of the volume type
   specific file format (e.g. "VBS" for IBM variable spanned block
   format, "DB" for ANSI variable record, blocked format, etc).
block_len
   is the maximum block length of each block within this file.
reclen
   is the maximum record length of the logical records within this
   file.


recording_mode
   is the numeric indication of the recording mode of this file.  The
   following values are defined:
      0 = Unknown or unspecified
      1 = ASCII
      2 = EBCDIC
      3 = Binary
block_count
   is the number of tape blocks contained in this file. If the file is
   still open, this number represents the number of blocks processed
   thus far.


read_errors
   is a count of the number of read errors (recoverable as well as
   unrecoverable) encountered while reading this file.  Note that read
   errors recovered by the hardware auto retry are not counted.  Only
   Multics reread operations (with varying threshold and deskew
   settings) are counted.
write_errors
   is a count of the number of write errors (recoverable as well as
   unrecoverable) encountered while writing this file.


Notes on the info_ptr:
The mtape_fsst declaration can be found in the include file
"mtape_file_status.incl.pl1".  If the iox_$control info_ptr argument
is null, then mtape_ will allocate the structure returned to the
caller; the caller must free that structure.

Note that mtape_fsst.fs_stat has an adjustable array dimension.  If
the info_ptr points to storage allocated by the caller, the caller
must set the variable mtape_fsst_nfiles to the maximum number of files
in the file set for which data is to be returned before allocating the
structure.  This variable is declared in the include file.


Syntax as a command:
   io_call control SWITCHNAME fsst


Arguments for io_call:
SWITCHNAME
   is the name of an I/O switch attached to the mtape_ I/O module.
file_set_status, fsst
   is the name of the control order to be performed.


Notes on the io_call command:
When the io_call command performs an mtape_ control order, any data
normally returned by that control order is interpreted by mtape_ and
displayed on the user's terminal.


:Info: mtape_.hardware_status: mtape_.hwst:  1985-02-18  mtape_ hardware_status control

Control order: hardware_status, hwst

The iox_$control info_ptr argument points to a structure that reports
the hardware status stored by last tape I/O operation.


Syntax:
   call iox_$control (iocb_ptr, "hardware_status", info_ptr, code);


Arguments for iox_$control:
info_ptr
   points to the following structure, or is a null pointer.  See
   "Notes on the info_ptr" below.

      dcl 1 mtape_hardware_status aligned based (info_ptr),
	  2 version char(8),
	  2 description char (256) varying,
	  2 pad bit (36),
	  2 iom_status bit (72),
	  2 iom_lpw bit (72);


List of elements:
version
   is the current structure version.  If info_ptr is nonnull on input,
   then the caller must set the version element to hwst_version_1.  If
   null, mtape_will set the version number in the structure it
   allocates.
description
   is the English language description of this hardware status.
iom_status
   is the raw I/O status words returned from the last I/O operation.
   A definition for the format of these status words can be found in
   the include file iom_status.incl.pll.


iom_lpw
   is the I/O List Pointer Word as it appeared at the termination of
   the last I/O operation.  A definition of the format of the LPW can
   be found in the include file iom_lpw.incl.pll.


Notes on the info_ptr:
The mtape_hardware_status structure declaration shown above can be
found in the include file "mtape_hardware_status.incl.pl1".  If the
iox_$control info_ptr is null, then mtape_ will allocate the structure
for the caller; the caller must free that structure.


Syntax as a command:
   io_call control SWITCHNAME hwst


Arguments for io_call:
SWITCHNAME
   is the name of an I/O switch attached to the mtape_ I/O module.
hardware_status, hwst
   is the name of the control order to be performed.


Notes on the io_call command:
When the io_call command performs an mtape_ control order, any data
normally returned by that control order is interpreted by mtape_ and
displayed on the user's terminal.


:Info: mtape_.volume_status: mtape_.vst:  1985-02-18  mtape_ volume_status control

Control order: volume_status, vst

The iox_$control info_ptr argument points to a structure that reports
the status of the current volume.  The returned status contains volume
attribute as well as volume error summary information.


Syntax:
   call iox_$control (iocb_ptr, "volume_status", info_ptr, code);


Arguments for iox_$control:
info_ptr
   points to the following structure, or is a null pointer.  See
   "Notes on the info_ptr" below.

      dcl 1 mtape_vst aligned based (info_ptr),
	  2 version char (8),
	  2 volume_type fixed bin,
	  2 volume_name char (32),
	  2 volume_id char (32),
	  2 mounted bit (1),
	  2 device_name char (8),
	  2 volume_index fixed bin,
	  2 mounts fixed bin,
	  2 tot_error_stats,
	    3 read,
	      4 errors fixed bin (35),
	      4 operations fixed bin (35),
	    3 write,
	      4 errors fixed bin (35),
	      4 operations fixed bin (35),
	    3 orders,
	      4 errors fixed bin (35),
	      4 operations fixed bin (35),
	    3 successful retry (7) fixed bin (35),
	  2 rel error_stats,
	    3 read,
	      4 errors fixed bin (35),
	      4 operations fixed bin (35),
	    3 write,
	      4 errors fixed bin (35),
	      4 operations fixed bin (35),
	    3 orders,
	      4 errors fixed bin (35),
	      4 operations fixed bin (35),
	    3 successful_retry (7) fixed bin (35);


List of elements:
version
   is the current structure version.  If info_ptr is nonnull on input,
   the caller must set the version element to vst_version_1.  If null,
   then mtape_ will set the version element in the structure it
   allocates.
volume_type
   is the encoded volume type as determined by RCP, and could have one
   of the following values.
      4 = IBM labeled volume
      5 = ANSI labeled volume
      6 = Unlabeled volume


volume_name
   is the name of the current volume as specified in the volume
   sequence list (i.e., attach description).
volume_id
   is the name of the current volume as recorded in the volume label.
   For unlabeled volumes, this field will be blank.
mounted
   is a flag indicating the mounted state of the current volume.  A
   "1"b indicates that the volume. is mounted, "O"b indicates that the
   volume is not currently mounted.
device_name
   is the name of the tape device that the current volume is mounted
   on (e.g., "tape_O1").  If the volume is currently unmounted, this
   field will be blank.


volume_index
   is the numerical order of this volume within the volume set.
mounts
   is a count the number of times the current volume has been mounted
   during this attachment.
tot_error_stats
   is a block representing the error statistics for the current volume
   inclusive of all of the mounts during the current attachment.  The
   block includes the number of errors perportioned with the number of
   operations for read, write and order (i.e., non-data transfer
   operations, like forward space file), as well as a metering array
   of the number of times that read operations were successfully
   retried for each of the combinations of deskew window and threshold
   changes.


rel_error_stats
   is the same as tot_error_stats above except it is the error
   statistics for the current mount only.


Notes on the info_ptr:
The mtape_vst structure declaration shown above can be found in the
include file "mtape_volume_status.incl.pl1".  If the iox_$control
info_ptr argument is null, then mtape_ will allocate the structure
returned to the caller; the caller must free that structure.


Syntax as a command:
   io_call control SWITCHNAME vst


Arguments for io_call:
SWITCHNAME
   is the name of an I/O switch attached to the mtape_ I/O module.
volume_status, vst
   is the name of the control order to be performed.


Notes on the io_call command:
When the io_call command performs an mtape_ control order, any data
normally returned by that control order is interpreted by mtape_ and
displayed on the user's terminal.


:Info: mtape_.volume_set_status: mtape_.vsst:  1985-02-18  mtape_ volume_set_status control

Control order:  volume_set_status, vsst

The iox_$control info_ptr argument points to a structure holding an
array of volume status for all volumes in the current volume set.


Syntax:
   call iox_$control (iocb_ptr, "volume_set_status", info_ptr, code);


Arguments for iox_$control:
info_ptr
   points to the following structure, or is a null pointer.  See
   "Notes on the info_ptr_ below.

      dcl 1 mtape_vsst aligned based (info_ptr),
	  2 version char (8),
	  2 volume_type fixed bin,
	  2 nvolumes fixed bin,
	  2 vs_stat (mtape_vsst_nvolumes refer (mtape vsst.nvolumes)),
	    3 volume name char (32),
	    3 volume_id char (32),
	    3 mounted bit (1),
	    3 device_name char (8),
	    3 volume_index fixed bin,
	    3 mounts fixed bin,
	    3 tot error stats,
	      4 read,
	        5 errors fixed bin (35),
	        5 operations fixed bin (35),
	      4 write,
	        5 errors fixed bin (35),
	        5 operations fixed bin (35),
	      4 orders,
	        5 errors fixed bin (35),
	        5 operations fixed bin (35),
	      4 successful_retry (7) fixed bin
	    3 rel error stats,
	      4 read,
	        5 errors fixed bin (35),
	        5 operations fixed bin (35),
	      4 write,
	        5 errors fixed bin (35),
	        5 operations fixed bin (35),
	      4 orders,
	        5 errors fixed bin (35),
	        5 operations fixed bin (35),
	      4 successful_retry (7) fixed bin (35);


List of elements:
version
   is the current structure version.  If info_ptr is nonnull on input,
   the caller must set the version element to vsst_version_1.  If
   null, then mtape_ will set the version element in the structure it
   allocates.
volume_type
   is the encoded volume type as determined by RCP, and could have one
   of the following values.
      4 = IBM labeled volume
      5 = ANSI labeled volume
      6 = Unlabeled volume


nvolumes
   is the number of volumes in the volume set.
vs_stat
   is an array of structures of volume set members, which appears
   below in sequential order.  See "Notes on the mtape_vsst structure"
   below.


volume_name
   is the name of the current volume as specified in the volume
   sequence list (i.e., attach description).
volume_id
   is the name of the current volume as recorded in the volume label.
   For unlabeled volumes, this field will be blank.
mounted
   is a flag indicating the mounted state of the current volume.  A
   "1"b indicates that the volume. is mounted, "O"b indicates that the
   volume is not currently mounted.
device_name
   is the name of the tape device that the current volume is mounted
   on (e.g., "tape_O1").  If the volume is currently unmounted, this
   field will be blank.


volume_index
   is the numerical order of this volume within the volume set.
mounts
   is a count the number of times the current volume has been mounted
   during this attachment.


tot_error_stats
   is a block representing the error statistics for the current volume
   inclusive of all of the mounts during the current attachment.  The
   block includes the number of errors perportioned with the number of
   operations for read, write and order (i.e., non-data transfer
   operations, like forward space file), as well as a metering array
   of the number of times that read operations were successfully
   retried for each of the combinations of deskew window and threshold
   changes.
rel_error_stats
   is the same as tot_error_stats above except it is the error
   statistics for the current mount only.


Notes on the info_ptr:
The mtape_vsst declaration can be found in the include file
"mtape_volume_status.incl.pl1".  If the iox_$control info_ptr argument
is null, then mtape_ will allocate the structure returned to the
caller; the caller must free that structure.

Note that mtape_vsst.vs_stat has an adjustable array dimension.  If
the info_ptr points to storage allocated by the caller, the caller
must set the variable mtape_vsst_nvolumes to the maximum number of
volumes in the volume set for which data is to be returned before
allocating the structure.  This variable is declared in the include
file.


Syntax as a command:
   io_call control SWITCHNAME vsst


Arguments for io_call:
SWITCHNAME
   is the name of an I/O switch attached to the mtape_ I/O module.
volume_set_status, vsst
   is the name of the control order to be performed.


Notes on the io_call command:
When the io_call command performs an mtape_ control order, any data
normally returned by that control order is interpreted by mtape_ and
displayed on the user's terminal.


:Info: mtape_.io_call:  1985-02-18  mtape_ io_call control

Control order: io_call

Executes one of the other control operations initiated by the io_call
command.  For any control operation that would normally return a
structure to the user, this control will display an interpretation
of the data on the user terminal.  The format of the structure input
to the io_call order can be found in the include file
"io_call_info.incl.pl1".


Syntax:
   call iox_$control (iocb_ptr, "io_call", info_ptr, code);


Arguments for iox_$control:
info_ptr
   points to the following structure that describes input data for the
   control operation to be performed.  The structure may be found in
   "io_call_info.incl.pl1".

      dcl 1 io_call_info aligned based (info_ptr),
	  2 version fixed bin,
	  2 caller_name char (32),
	  2 order_name char (32),
	  2 report entry variable options (variable),
	  2 error entry variable options (variable),
	  2 af_returnp ptr,
	  2 af_returnl fixed bin,
	  2 fill (5) bit (36) aligned,
	  2 nargs fixed bin,
	  2 max_arglen fixed bin,
	  2 args (0 refer (io_call_info.nargs))
               char (0 refer (io_call_info.max_arglen)) varying;


List of elements:
version
   is 1.
caller_name
   is program name that should be reported in any error messages.
order_name
   is the control order to be performed by mtape_.  For a list of
   supported control order names, type:  help mtape_ -brief
report
   an entrypoint with a calling sequence like ioa_ on which mtape_
   reports contents of structures that would have been returned by the
   target control order.
error
   an entry with a calling sequence like com_err_ on which mtape_
   displays error messages.


af_returnp
   points to the active function return string when io_call is invoked
   in an active string (e.g., [io_call control ... ]  The mtape_ I/O
   module does not support active function control orders.
af_returnl
   is the maximum length of this active function return valuel.
nargs
   is the number of character varying strings passed as arguments to
   the io_call order.  None of the mtape_ control orders accept such
   arguments, so this should always be 0.
max_arglen
   is the maximum length of any of the arguments.  Since mtape_ does
   not use such arguments, this may be set to 4.


args
   is the array of arguments to be passed by the io_call control
   command to the mtape_ target control order.  mtape_ does not
   require such arguments, and ignores any arguments that are passed.


Syntax as a command:
   io_call control SWITCHNAME ORDERNAME


Arguments for io_call:
SWITCHNAME
   is the name of an I/O switch attached to the mtape_ I/O module.
ORDERNAME
   is the name of the mtape_ control order to be performed using the
   io_call command.


Notes on the io_call command:
When the io_call command performs an mtape_ control order, mtape_
interprets the data normally returned by that control order and
displays that on the user's terminal.


:Info: mtape_get_defaults:  1985-02-18  mtape_get_defaults

Syntax as a command:  mtape_get_defaults OPN {-control_args}


Function: prints default arguments set by the mtape_set_defaults
command.  It prints the default arguments, stored in a specified value
segment, that are associated with a given volume type and tape
processing operation.


Arguments:
OPN
   is the type of tape operation (attach, open, close, or detach) that
   uses the default arguments.


Control arguments:
-pathname path, -pn path
   specifies the pathname of a value segment to be searched for default
   arguments.  It is incompatible with -use_search_list.
-use_search_list, -usl
   specifies that each value segment in the mtape_arguments search list
   is to be searched for default arguments and that the final default
   linear form that the mtape_ argument processing subroutine uses is
   to be printed.  (Default)
-volume_type VT, -vt VT
   specifies the volume type (ansi or ibm) used by mtape_ to select the
   per-format module for tape processing.  Give -volume_type when you
   specify either the open or close operations; omit it when you supply
   either the attach or detach operations.


:Info: mtape_set_defaults:  1985-02-18  mtape_set_defaults

Syntax as a command:  mtape_set_defaults OPN -control_args


Function: sets default arguments used by the mtape_ I/O module.
For information about the current defaults, type:
   help mtape_get_defaults


Arguments:
OPN
   is the type of tape operation (attach, open, close, or detach) that
   uses the default arguments.


Control arguments:
-arguments ARGS, -argument, -ag ARGS
   are the arguments appropriate to the specified operation and tape
   format.  They must be syntactically correct and appropriate to the
   conditions under which they are applied.  You must supply
   -arguments, which must be the last one specified on the command
   line.
-pathname path, -pn path
   is the name of the value segment in which the requested default
   values are stored.  If you omit it, the value segment >udd>[user
   project]>[user name]>[user name].value is used.


-volume_type VT, -vt VT
   specifies the volume type (ansi or ibm) used by mtape_ to select the
   per-format module for tape processing.  Give -volume_type when you
   specify either the open or close operations; omit it when you supply
   either the attach or detach operations.  This control argument,
   along with -operation, defines restrictions on the specification of
   the default arguments (see the mtape_ I/O module in the Subroutines
   manual).


Notes: The command sets the default arguments associated with a given
volume type and tape processing operation.  These default arguments are
eventually used to complete attach, open, close, and detach
descriptions when you have not explicitly supplied all the necessary
information.

The default arguments specified in the command line are processed by
the mtape_ argument processing subroutine to assure that they follow
all the restrictions imposed by their intended future usage.  The
result of this processing is then converted to a character string and
is stored in the data space of a specified value segment.  The stored
value is later located and used as default information for argument
processing when tapes are being processed by the mtape_ I/O module (see
the Programmer's Reference Manual for tape processing).


Notes on using default arguments: When it is necessary to use default
arguments in a particular application, they are located by the mtape_
argument processing routine using the mtape_arguments search list.  The
default mtape_arguments (mtape_args) search list, is as follows:
   mtape_arguments
   mtape_args
      >udd>[user project]>[user name]>[user name].value
      >site>mtape_arguments.value
      >sss>mtape_arguments.value

You can add or delete search paths as necessary using the search paths
commands.


In locating default arguments, the mtape_ argument processing routine
looks in every value segment in the search list and takes the
appropriate default arguments from each (if it finds them).  Whether a
group of default arguments is determined to be appropriate for an
application depends on the volume type and tape processing operation
for which is intended.

Default arguments from value segments at the top of the search list
take precedence over those from value segments at the bottom.
Equivalently arguments on the right side of an argument list take
precedence over arguments on the left.  This means that after all
default arguments for a particular application have been gathered from
the search list, if an argument occurs more than once, the argument
with the highest precedence is retained and the others are excluded.
The result is called the default linear form.


:Info: mtape_user_label_rtn_:  2020-06-27  mtape_user_label_rtn_

Function:
In order to process user defined file labels when the "-label_entry"
open description argument is used, the entry variable argument to the
"-label_entry" control argument must conform to the following calling
sequence in order to be called properly by mtape_ and its Per-Format
modules.


Syntax:
  dcl mtape_user_label_rtn_ entry (ptr, char (*), fixed bin,
         fixed bin, fixed bin, fixed bin (35));

  call mtape_user_label_rtn_ (iocb_ptr, user_label_data, label_number,
           label_type, file_section_number, code);


Arguments:
iocb_ptr
     is a pointer to the I/O control block through which the
     mtape_ I/O module is attached.  A user_label_entry routine
     may wish to know more information about the file for which
     it is processing user labels.  This can be accomplished by
     calling the iox_$control entry with this iocb_ptr and
     executing the mtape_ "file_status" control operation.
user_label_data
     is the actual contents of the user label record to be
     processed (INPUT) or written (OUTPUT).  For ANSI and IBM
     user label records, the length of this field will be 76
     characters on input and truncated to same on output.


label_number
     is the number of the user label record within the file label
     group.  The ANSI and IBM standards allow from 1 to 9 user
     label records within a file label group (UHL1 - UHL9, and
     UTL1 - UTL9).
label_type
     is the encoded file label group type that the
     user_label_entry is being called to process label records
     for.  Its possible values are as follows:
     1 = Beginning of file (BOF) label group
     2 = End of volume (EOV) label group
     3 = End of file (EOF) label group


file_section_number
     is the section number of the file for which the
     user_label_entry routine is being called to process user
     labels for.  For multi-volume files, this would essentially
     be the number of the volume (the first volume on which a
     file resides being number 1) on which this file "section"
     resides.  For single volume files, the file_section_number
     would always be a 1.


code
     is a standard system error code.  When writing user labels,
     the user_label_entry routine should set code to
     error_table_$end_of_info in order to tell the caller that no
     more user labels are to be written.  Otherwise, the
     user_label_entry is called repeatedly to generate user label
     data until the maximum number of user labels have been
     written.


Notes on processing user labels:

The user label routine is called by the open, open_file, close,
close_file operations and when the end of a tape volume is
encountered.  The routine must be written to monitor the input
argument values (user_label_data, label_number, label_type and
code) in order to process each type of label correctly.


For output, the user label routine is called repeatedly upon open,
close and volume end to support writing of up to nine user
labels.  The call loop is terminated after the ninth call or when
the error_table_$end_of_info error code is returned.  For input,
the routine is called once for each user label found on the tape.


To determine whether the label processing routine is being called
to process labels read from a tape or to build new labels for
writing, the value of the user_label_data parameter should be
checked.  If the value is set to spaces, then the label should be
constructed by the routine and stored in user_label_data.
Otherwise, the information contained in user_label_data should be
processed as input.


The label_type parameter value is set by the caller.  The label
processing routine should check this value to determine the type
of user label to process.


The label_number parameter value is set by the caller.  The label
processing routine should check this value to determine which
label within type should be processed.


It is up to the writer of the routine to set the code parameter
to error_table_$end_of_info and return it.  Setting this value
will stop the call loop for the current label building operation.


:hcom:



/****^  HISTORY COMMENTS:
  1) change(2020-06-22,GDixon), approve(2021-02-22,MCR10088),
     audit(2021-05-27,Swenson), install(2021-05-27,MR12.6g-0056):
      A) Convert existing mtape_.info I/O module description to Operation
         Format now supported by verify_info.
      B) Provide detailed information for all mtape_ control orders.
                                                   END HISTORY COMMENTS */



