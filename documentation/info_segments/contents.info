:Info: contents:  2020-05-09  contents

Syntax as a command: contents PATH {-control_args}


Syntax as an active function:  [contents PATH {-control_args}]


Function: prints or returns the selected contents of a segment or
archive component as a character string.


Arguments:
PATH
   is an absolute or relative pathname to the segment or archive
   component to be processed.


Control arguments (line range):
   The range of lines eligible for output is given by zero or one
   -from control arguments; and zero or one -to or -for control
   arguments.


-from N, -fm N
   line range begins with the Nth line.  (default: line range begins
   with line 1 of segment/component)
-from -N, -fm -N
   range begins with the Nth line before end of segment/component.
-from STRING, -fm STRING
   range begins with first line containing a string matching STRING.
-from /REGEXP/, -fm /REGEXP/
   range begins with first line containing a string matching the
   regular expression REGEXP.  (See "Notes on regular expressions".)


-for N
   line range includes (at most) N lines including first line of the
   range.
-to N
   line range stops after line number N.  (default: line range
   continues through the last line of segment/component)
-to +N
   range stops with the Nth line after the -from line (includes at
   most N+1 consecutive lines).  This is equivalent to:
      -for [plus N 1]
-to -N
   range stops after the Nth line before end of the segment/component.


-to STRING
   range stops after first line containing a string matching STRING,
   or continues to end of segment/component if such line is not found.
   The search for STRING begins with the first line of the range.
-to /REGEXP/
   range stops after the first line containing a string matching the
   regular expression REGEXP, or continues to end of segment/component
   if such line is not found.  The search for REGEXP begins with the
   first line of the range.  (See "Notes on regular expressions".)


Control arguments (content filters):
   Up to 30 controls select which lines in the line range are output,
   in any combination of -match and -exclude.  If -match controls are
   given, a line is output if it matches any of the -match controls,
   and does not match any of the -exclude controls.  If -match
   controls are not given, a line is output if it does not match any
   -exclude controls.

-match STRING
   matches lines containing the characters in STRING.
-match /REGEXP/
   matches lines containing a string matching the regular
   expression REGEXP.  (See "Notes on regular expressions".)


-exclude STRING, -ex STRING
   excludes lines containing the characters in STRING.  Exclusion test
   is done after matching.  Thus, -match A -exclude B outputs all
   lines with an A except those containing a B.
-exclude /REGEXP/, -ex /REGEXP/
   excludes lines containing a string matching the regular
   expression REGEXP.  (See "Notes on regular expressions".)


Control arguments (output format):
-newline, -nl
   leaves unchanged the newline character ending each selected line.
   It is printed with each selected line from the line range.
-no_newline, -nnl
   changes the newline character ending each selected line to a space
   character. (default)
-requote_line, -rql
   requotes each selected line, returning it as a unit without its
   ending newline.  Quoted lines are separated by a space character.


Control arguments (errors):
-errors, -err
   report an error if the -from line is not found; or if the active
   function return string maxlength is exceeded.  (default)
-no_errors, -nerr
   skip reporting of the above errors about the -from line or
   maxlength of the active function return string.  No content is
   examined if the -from line is not found.  Content that fits in the
   active function string is returned without error.


Notes on regular expressions:
A regular expression /REGEXP/ is the character string between slash
delimiters in a line range or content selection search string.  It
follows the regular expression rules implemented by the qedx command.

The regular expression characters are matched against characters
in each line of the segment/component.


List of specialized REGEXP characters:
   The following characters have specialized meanings when used in a
   regular expression.

*
   signifies any number (or none) of the preceding character.
^
   when used as the first character of a regular expression, signifies
   the (imaginary) character preceding the first character on a line.
$
   when used as the last character of a regular expression, signifies
   the newline character at the end of each line.  If the segment ends
   with a partial line (not ending in newline), that line does not
   match an expression ending with a $ character.


.
   matches any character on a line.
\c
   suppresses the special meaning of the character following it.  For
   example, /\c^switch/ matches the string "^switch" appearing
   anywhere in the line.


:Info: contains:  2020-05-09  contains

Syntax as a command: contains PATH -control_args


Syntax as an active function:  [contains PATH -control_args]


Function: returns "true" if any line of a segment/component
in a given a line range matches the requirements given in
-match and/or -exclude constraints; returns "false" if no lines
match those requirements.


Arguments:
PATH
   is an absolute or relative pathname to the segment or archive
   component whose contents is examined.


Control arguments (line range):
   The range of lines to be examined may be limited by zero or one
   -from control arguments; and zero or one -to or -for control
   arguments.

-from N, -fm N
   line range begins with the Nth line.  (default: line range begins
   with line 1 of segment/component)
-from -N, -fm -N
   range begins with the Nth line before end of segment/component.
-from STRING, -fm STRING
   range begins with first line containing a string matching STRING.
-from /REGEXP/, -fm /REGEXP/
   range begins with first line containing a string matching the
   regular expression REGEXP.  (See "Notes on regular expressions".)


-for N
   line range includes (at most) N lines including first line of the
   range.
-to N
   line range stops after line number N.  (default: line range
   continues through the last line of segment/component)
-to +N
   range stops with the Nth line after the -from line (includes at
   most N+1 consecutive lines).  This is equivalent to:
      -for [plus N 1]
-to -N
   range stops after the Nth line before end of the segment/component.


-to STRING
   range stops after first line containing a string matching STRING,
   or continues to end of segment/component if such line is not found.
   The search for STRING begins with the first line of the range.
-to /REGEXP/
   range stops after the first line containing a string matching the
   regular expression REGEXP, or continues to end of segment/component
   if such line is not found.  The search for REGEXP begins after the
   first line of the range.  (See "Notes on regular expressions".)


Control arguments (content requirements):
   Up to 30 controls define requirements for lines in the line range
   in any combination of -match and -exclude.  One or more -match
   and/or -exclude controls must be given.  If -match controls are
   given, a line meets requirements if it matches any of the -match
   controls, and does not match any of the -exclude controls.  If
   -match controls are not given, a line meets requirements if it
   does not match any -exclude controls.

-match STRING
   matches lines containing the character string STRING.
-match /REGEXP/
   matches lines containing a string matching the regular
   expression REGEXP.  (See "Notes on regular expressions".)


-exclude STRING, -ex STRING
   excludes lines containing the characters in STRING.  Exclusion test
   is done after matching.  Thus, -match A -exclude B selects all
   lines with an A except those containing a B.
-exclude /REGEXP/, -ex /REGEXP/
   excludes lines containing a string matching the regular
   expression REGEXP.  (See "Notes on regular expressions".)


Control arguments (errors):
-errors, -err
   report an error if the -from line is not found.  (default)
-no_errors, -nerr
   skip reporting of the above error about the -from line.  No content
   is examined if the -from line is not found.


Notes on regular expressions:
A regular expression /REGEXP/ is the character string between slash
delimiters in a line range or content selection search string.  It
follows the regular expression rules implemented by the qedx command.

The regular expression characters are matched against characters
in each line of the segment/component.


List of specialized REGEXP characters:
   The following characters have specialized meanings when used in a
   regular expression.

*
   signifies any number (or none) of the preceding character.
^
   when used as the first character of a regular expression, signifies
   the (imaginary) character preceding the first character on a line.
$
   when used as the last character of a regular expression, signifies
   the newline character at the end of each line.  If the segment ends
   with a partial line (not ending in newline), that line does not
   match an expression ending with a $ character.


.
   matches any character on a line.
\c
   suppresses the meaning of the special character following it.  For
   example, /\c^switch/ matches the string "^switch" appearing
   anywhere in the line.


:Internal: history_comment.gi:  2020-05-09  history_comment


/****^  HISTORY COMMENTS:
  1) change(2020-05-09,GDixon), approve(2020-05-13,MCR10081),
     audit(2020-06-08,Swenson):
     Add modernized replacement for the contents command/AF which:
      A) Uses ssu_ interface to permit easy integration with ssu_ subsystems,
         and to simplify the code.
      B) Adds support for signed numeric values in -from and -to bounds.
      C) Adds -for and -no_error control arguments.
      D) Adds a contains command/AF entrypoint which returns true if
         contents would have printed any output; and false otherwise.
      E) Adds ssu_contents_request and ssu_contains_request entrypoints
         for possible use in future ssu_ subsystems.
                                                   END HISTORY COMMENTS */

