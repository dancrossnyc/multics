03/31/83  nd_handler_


Entry points in nd_handler_:
   (List is generated by the help command)


:Entry: nd_handler_: 02/08/83  nd_handler_


Function: attempts to resolve the name duplication caused when a
program tries to create a segment, multisegment file, or link in a
directory that already contains an entry by the same name.  If the
existing entry has additional names, nd_handler_ tries to delete the
name needed for the new entry and, if successful, prints a warning
message.  If the existing entry has only one name, nd_handler_ queries
the user whether or not to delete it.  A zero status code in either
case means that nd_handler_ has succeeded, and the calling program can
retry creating the new entry.


Syntax:
dcl nd_handler_ entry (char(*), char(*), char(*), fixed bin(35));
call nd_handler_ (caller, dn, en, code);


Arguments:
caller
   is the name of the calling program, used in printed messages.
   (Input)
dn
   is the pathname of the directory involved.  (Input)
en
   is the name of the entry that the calling program wants to create.
   (Input)
code
   is a standard status code.  (Output) It can be:
   0
      if the old entryname has been removed.
   error_table_$action_not_performed
      if the user answered "no" to a query.
   other codes
      if the old entryname could not be removed for some other reason
      such as lack of access.  An error message is then printed by
      nd_handler_.


Notes:
This subroutine is usually called after another subroutine call has
returned error_table_$namedup.  If nd_handler_ returns a zero status
code, the other subroutine is called a second time.  A warning message
of the following kind is printed if the existing entry has multiple
names:
   caller:  Name duplication.  Old name foo removed from >udd>m>Smith>oldseg.
If the existing entry has only one name, wording of the query depends
on the existing entry's type:
   caller:  Do you want to delete the old segment <path>?
   caller:  Do you want to delete the old multisegment file <path>?
   caller:  Do you want to unlink the old link <path>?
                   (Target <path2> exists.)
              or:  (Target <path2> does not exist.)
              or:  (Cannot get info for target <path2>.)
              or:  (No target pathname.)
The following entry points have the same calling sequence.


:Entry:  del:  02/08/83 nd_handler_$del


Function:  This entry point queries whether or not to delete the
existing entry, regardless of whether or not it has additional names.


:Entry:  del_force:  02/08/83 nd_handler_$del_force


Function:  This entry point deletes the old entry (no query),
regardless of whether it has additional names.


:Entry:  force:  02/08/83 nd_handler_$force


Function:  This entry point deletes the existing entry if it has only
one name, rather than issue a query.
