02/03/84  tssi_

The tssi_ (translator storage system interface) subroutine simplifies
the way the language translators use the storage system.


Entry points in tssi_:
   (List is generated by the help command)


:Entry:  get_segment:  02/03/84 tssi_$get_segment


Function:  This entry point returns a pointer to a specified segment.
The ACL on the segment is rw for the current user.  If an ACL must be
replaced to do this, aclinfo_ptr is returned pointing to information to
be used in resetting the ACL.


Syntax:
declare tssi_$get_segment entry (char(*), char(*), ptr, ptr,
     fixed bin(35));
call tssi_$get_segment (dir_name, entryname, seg_ptr, aclinfo_ptr,
     code);


Arguments:
dir_name
   is the pathname of the containing directory.  (Input)
entryname
   is the entryname of the segment.  (Input)
seg_ptr
   is a pointer to the segment, or is null if an error is encountered.
   (Output)
aclinfo_ptr
   is a pointer to ACL information (if any) needed by the
   tssi_$finish_segment entry point.  (Output)
code
   is a storage system status code.  (Output)


:Entry:  get_file:  02/03/84 tssi_$get_file


Function: returns a pointer to the specified multisegment file.
Additional components, if necessary, can be accessed using the
msf_manager_$get_ptr entry point (see the description of the
msf_manager_ subroutine), with the original segment considered as
component 0.


Syntax:
declare tssi_$get_file entry (char(*), char(*), ptr, ptr, ptr,
     fixed bin(35));
call tssi_$get_file (dir_name, entryname, seg_ptr, aclinfo_ptr,
     fcb_ptr, code);


Arguments:
dir_name
   is the pathname of the containing directory.  (Input)
entryname
   is the entryname of the multisegment file.  (Input)
seg_ptr
   is a pointer to component 0 of the file.  (Output)
aclinfo_ptr
   is a pointer to ACL information (if any) needed by the
   tssi_$finish_file entry point.  (Output)
fcb_ptr
   is a pointer to the file control block needed by the msf_manager_
   subroutine.  (Output)
code
   is a storage system status code.  (Output)


:Entry:  finish_segment:  02/03/84 tssi_$finish_segment


Function:  This entry point sets the bit count on the segment after the
translator is finished with it.  It also terminates the segment and
resets the ACL.  See "Notes" below.


Syntax:
declare tssi_$finish_segment entry (ptr, fixed bin(24), bit(36)
     aligned, ptr, fixed bin(35));
call tssi_$finish_segment (seg_ptr, bc, mode, aclinfo_ptr, code);


Arguments:
seg_ptr
   is a pointer to the segment.  (Input)
bc
   is the bit count of the segment.  (Input)
mode
   is the access mode to be put on the segment.  (Input) It can be one
   of the following named constants (declared in
   access_mode_values.incl.pl1):
      "110"b   RE_ACCESS
      "101"b   RW_ACCESS


aclinfo_ptr
   is a pointer to the saved ACL information returned by the
   tssi_$get_segment entry point.  (Input)
code
   is a storage system status code.  (Output)


Notes: If the segment existed before the call to tssi_$get_segment,
the ACL is reset to the way it was before the tssi_$get_segment entry
point was called.  If no ACL existed for the current user, the mode is
set to "mode" for the current user.  If the segment was created, and
the "mode" parameter contains the "e" mode, all entries on the
segment's ACL (as derived from the containing directory's Initial ACL)
receive the "e" bit, as well as the other modes specified.  The
current user, if not specified on the Initial ACL, receives an ACL
term of "mode" on the segment.  Otherwise, the segment's Initial ACL
is restored, and, if the current user does not have an ACL term, the
segment receives an ACL term of "mode" for the user.


:Entry:  finish_file:  02/03/84 tssi_$finish_file


Function: This entry point sets the bit count on a multisegment file
after the translator is finished with it.  It also closes the file,
freeing the file control block.


Syntax:
declare tssi_$finish_file entry (ptr, fixed bin, fixed bin(24), bit(36)
     aligned, ptr, fixed bin(35));
call tssi_$finish_file (fcb_ptr, component, bc, mode, aclinfo_ptr,
     code);


Arguments:
fcb_ptr
   is a pointer to the file control block returned by the
   tssi_$get_file entry point.  (Input)
component
   is the highest-numbered component in the file.  (Input)
bc
   is the bit count of the highest-numbered component.  (Input)
mode
   is the access mode to be put on the multisegment file.  (Input) It
   can be one of the following named constants (declared in
   access_mode_values.incl.pl1):
      "110"b   RE_ACCESS
      "101"b   RW_ACCESS


aclinfo_ptr
   is a pointer to the saved ACL information returned by the
   tssi_$get_file entry point.  (Input)
code
   is a storage system status code.  (Output)


:Entry:  clean_up_segment:  02/03/84 tssi_$clean_up_segment


Function: frees the storage that the tssi_$get_segment entry point
allocated to save the old ACLs of the segments being translated.  It
is to be used in case the translation is aborted (e.g., by a quit
signal).

Programs that use the tssi_ subroutine must establish a cleanup
procedure that calls this entry point.  (For a discussion of cleanup
procedures see the Programmer's Reference Manual.) If more than one
call is made to the tssi_$get_segment entry point, the cleanup
procedure must make the appropriate call to the tssi_$clean_up_segment
entry point for each aclinfo_ptr.


Syntax:
declare tssi_$clean_up_segment entry (ptr);
call tssi_$clean_up_segment (aclinfo_ptr);


Arguments:
aclinfo_ptr
   is a pointer to the saved ACL information returned by the
   tssi_$get_segment entry point.  (Input)


:Entry:  clean_up_file:  02/03/84 tssi_$clean_up_file


Function:  This entry point is the cleanup entry point for multisegment
files.  In addition to freeing ACLs, it closes the file, freeing the
file control block.


Syntax:
declare tssi_$clean_up_file entry (ptr, ptr);
call tssi_$clean_up_file (fcb_ptr, aclinfo_ptr);


Arguments:
fcb_ptr
   is a pointer to the file control block returned by the
   tssi_$get_file entry point.  (Input)
aclinfo_ptr
   is a pointer to the saved ACL information returned by the
   tssi_$get_segment entry point.  (Input)
