08/04/86 Multics Pascal Terminal I/O

Terminal I/O is usually performed over three predefined file
variables, although other file variables can be attached to the
terminal by means of the io_call command or the nonstandard "fconnect"
statement (see the Multics Pascal User's Guide).

The three predefined file variables are named "input", "output", and
"error".  A program that uses any of these must include its name in
the parameter list of the program header.  These file variables are
not, however, to be declared in the "var" section of the main program.
Default attachments are:

	Pascal file name	I/O switch name	Attachment
	----------------	---------------	----------
	input		pascal_input_	syn_ user_input
	output		pascal_output_	syn_ user_output
	error		pascal_error_	syn_ error_output

All three files are, by default, open at the beginning of program
execution: reset(input), rewrite(output), rewrite(error).

The "error" file is an extension to standard Pascal. Its use requires
compilation with the default -full_extensions (-full) control argument.


Performing I/O: Input and output on the terminal are done using the
standard Pascal I/O statements.  Examples of their use with the
predefined file variables "input", "output", and "error" are given
here:


get (input);
   read a character into the file variable input^.
read (var_name1 {, ..., var_nameN})
   read variable values from "input".
readln (var_name1 {, ..., var_nameN})
   read variable values from "input" and position to a new line.
write (expression1 {, ..., expressionN})
   write expression values into a buffer to be printed on "output"
   with the next writeln to "output"
write (error, expression1 {, ..., expressionN})
   write expression values into a buffer to be printed on "error"
   with the next writeln to "error".


writeln (expression1 {, ..., expressionN})
   print on "output" any output buffered for "output" followed by
   the expression values followed by a newline character.
writeln (error, expression1 {, ..., expressionN})
   print on "error" any output buffered for "error" followed by
   the expression values followed by a newline character.


The following added statement is a Multics SOL extension:
flush (file_name);   (Pascal 8.02 extension. see NOTE (*) below)
   prints the contents of the output buffer for file_name (for example,
   for "output" or "error"), which contains the results of any
   previous "write" operations, without printing a newline. This
   statement is useful for interactive applications, as in:

	write ('Enter a number: ');
	flush (output);
	readln (number);  {reads on the same line as the question}


    (*) NOTE : This extension was useful with Pascal 8.02.  Since 8.03
    version, "flush" is implicit when file is attached through an IO
    module other than "vfile_".  So, it is no more mandatory for
    interactive applications.
   (see "pascal.changes.gi.info")


Prompting:
Characters read by "get" and variable values read by "read" and
"readln" are each prompted for by either the standard Pascal prompt
character "?" or whatever character has been set by the
pascal_set_prompt command. This command can turn prompting off
entirely with the -no_prompt control argument.

See "Interactive mode" below for a further discussion of prompting.


Interactive mode: Pascal compiler provides "-interactive" and
"-no_interactive" arguments.  "-interactive" is the default.
Following describes what is interactive and non interactive mode.


Non-interactive mode:
Since the "input" file variable is implicitly reset (opened) at the
start of the program in which it appears as a parameter, the user is
prompted for the first input character when the program begins
executing. This is done so that "input^", "eof", and "eoln" will have
values. Prompting is also done by "readln" to get the first character
of a new line of input. These automatic prompts are undesirable,
however, in the case of a program that prompts explicitly:

     program square_root (input, output);

       var number integer;

       begin	{implicit reset(input), rewrite(output)}
         write ('Give me an integer: ');
         readln (number);
         writeln ('The square root is ', sqrt (number));
     END.

When compiled with "-nint" control argument, this program produces the
following scenario:

	square_root
	?	(first character requested by "reset")
	Give me an integer: ?2
	?	(first character of new line requested by "readln")
	The square root is: 1.4142356237309505E+00


Interactive mode provides a way of suppressing the extra prompts.
When a program is compiled with the "-interactive" control argument
(default), prompts on a file are deferred until the first actual
reference to the file (get, read, readln, or reference to file_name^,
eoln, or eof).  Therefore when compiled in the default manner, the
same program operates as follows:

	square_root
	Give me an integer: ?2
	The square root is 1.4142356237309505E+00

  These compilation arguments have been provided because generated
code for interactive mode is less efficient.  So, if your application
does not interact with user terminal IO, use the -no_interactive
argument.
