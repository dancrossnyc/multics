08/22/83  Allocation Storage

The Multics system uses several areas (in the PL/I sense) for storage
of data by both system and user programs.  A certain class of problems
can be avoided by specifying which area is to be used for allocations
of a particular type.  In order to understand how to use the tools to
help avoid this class of problems, the following table is given
listing the various areas managed by the system and the type of
allocations done in each.

     AREA                 ALLOCATIONS

     Combined Linkage     linkage sections
                          reference names
                          LOT/ISOT


     Combined Static      static sections (separate static only)

     System Free          users of get_system_free_area_

     User Free            control tables for external variables
                          pl1 allocations with no "in" clause
                          pl1 controlled variables
                          pl1 external variables without $ in the name
                          fortran common blocks
                          cobol data
		      callers of get_user_free_area_

These areas are found via pointers in the stack header.


Initially, all pointers point to the same extensible area--one or more
segments in the process_dir named [unique].area.linker.

Hence, user allocations and system allocations are made in the same
area.  This is done to minimize paging and process directory segments.
However, if a user program has a bug such that it references beyond
the end of an allocated block (or references a block it has freed,
etc.), it is possible for the program to damage system data and, in
particular, the control data of the area manager.


The system data that can be damaged falls into four basic categories--

1)   links and linkage sections in general
2)   static storage of system programs
3)   allocated storage of system programs
4)   area control info (stored in the area itself)

If data in one of the first three classes is overwritten, fairly
random and unexpected behavior results; a new proc (or hangup) is the
only way out.  If the area control info is overwritten, the condition
"bad_area_format" is signaled the next time an allocation is
attempted.  In this case, the area_status command might be used to
determine which part of the area has been destroyed.


If it is suspected that the area has been damaged due to user program
bugs, the set_user_storage command can be used to force user data to
be allocated in a different area thereby probably protecting system
data so that the normal debugging tools could be used.  The easiest
way to do this is probably in the start_up.ec by first creating an
area (with the create_area command) and then telling the system to use
this area for user allocations (with the set_user_storage command).
This usually protects all system data from random user program bugs.

Note that it is convenient to create the user area in a nonprocess
directory segment so that it can be examined in the case of a process
termination.
