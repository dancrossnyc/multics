11/19/84    display, d

Syntax: d VIRTUAL-ADDR {EXP} {RANGE} {-ctl_args}
        [d VIRTUAL-ADDR {EXP} {RANGE} {-ctl_args}]

Function: displays a selected portion of a segment in the FDUMP.


Argument:
VIRTUAL-ADDR
   specifies the initial offset of the virtual address space to be
   dumped.  May be a segment number, name, or symbolic address (e.g.,
   64, prds, prds$am_data).    Do a 'help virtual_address' for more
   detailed information on acceptable virtual-address constructs.
EXP
   is an expression, which is either an octal value or a VIRTUAL-ADDR
   construct yielding an octal value.  This value can be positive or
   negative, specified by the plus or minus sign.
RANGE
   specifies the number of words to be dumped in octal.  If a range is
   not specified the default is one word (if the data to be dumped is
   an ITS pair two words will be dumped).


Control arguments (Mode Specifications):
-character, -ch, -ascii
   displays the selected number of characters in ascii.  Characters
   that cannot be printed are represented as periods.  As an active
   request, it returns the character representation of the requested
   address.
-instruction, -inst
   displays the selected number of words as instructions.  Usage as an
   active request is not allowed.
-octal, -oc 
   displays the selected number of characters in octal (Default).
   When used as an active request returns the octal value of the
   requested address.


-ptr, -p
   displays the selected number of word pairs as pointers.  When used
   as an active request returns the octal value of the form
   SEGNO|OFFSET.
-pptr, -pp
   displays the selected number of words as a packed-pointer.  When
   used as an active request returns the octal value of the form
   SEGNO|OFFSET.
-pptrx, -ppx 
   displays the selected number of words as packed-pointers and expands
   the segno|offset to a segment name.  Usage as an active request is
   not allowed.


-ptrx, -px
   displays the selected number of word pairs as pointers and expands
   the segno|offset to a segment name.  Usage as an active request is
   not allowed.


Control Arguments:
-as STRUCTURE_NAME
   displays the data as a hardcore PL/I structure defined by
   STRUCTURE_NAME.  The STRUCTURE_NAME is a hardcore system-defined
   include file.  The address given in the display request is taken as
   the address of the beginning of the structure.  If the whole
   structure is being displayed, that is the address where display
   begins.  If only certain elements are being displayed, that is the
   address used to compute offsets of the elements.  The structure
   reference following -as must be a single string, containing no
   spaces, and follows the syntax described below.  The single string
   is used to specify structure elements, array indexes, and substring
   matching.  Usage as an active request is not allowed.


-long, -lg
   displays each element of the structure on a separate line.  This
   control argument is only implemented with -as.


Structure syntax:
The structure reference is made up of two parts: a structure element
reference, and an optional set of match strings.  If no match strings
are supplied, no string matching is done.  The structure element
reference syntax consists of one or more element names, separated by
periods, and may contain subscripts following some of these element
names.  The first name in a structure element reference must be a level
one structure reference; partially qualified top level references are
not permitted.  Intermediate levels of qualification may be omitted as
long as there is no ambiguity.


All subscripts must be supplied as decimal integers.  The subscripts
may be cross-section references such as "(1:4)" to reference elements
one through four.  Asterisk bounds may not be used: if a cross-section
is desired, its upper and lower bounds must be given as decimal
constants.  If an element has more subscripts than are supplied, the
complete cross-section is printed for the remaining subscripts.  Also,
to eliminate the need for quoting, subscripts may be surrounded by
braces instead of parentheses.


In order to specify that only certain elements be displayed (such as
all those with names containing the string "time"), a set of match
strings may be given after the structure element reference.  Each match
string begins with a slash and is followed by the string itself.  The
final match string may be followed by a slash, but this is not
required.  If match strings are specified, any element which matches at
least one string will be displayed.


Examples of structure references:
pvt
   The whole structure "pvt".
pvt.n_entries
   The single element "n_entries" in the structure "pvt".
sst/time/,  sst/time
   Any elements in the structure "sst" containing the string "time".
   Note that the final slash is optional.
sst/time/meter/
   Any elements in the structure "sst" containing either the string
   "time" or the string "meter".
sst.space{3}
   element three of "sst.space".
sst.space{2:4}
   elements two, three, and four of "sst.space".


sst.space
   all elements of "sst.space".
sst.level{1}
   both elements of the "level" array for "sst.level{1}"
sst.level{1}.ausedp, sst.level.ausedp{1}
   the single element "ausedp" of the "level" array for "sst.level{1}"


Structure Output format:
The default output format is a compressed form, which places as many
values on a line as will fit within the line length.  The -long control
argument places one value on a line.  The short form, additionally,
collects all bit(1) flags and displays them at the end of the display
for each substructure or array element, in two groups: one listing all
the flags which were on ("1"b), and one for all the ones which were off
("0"b).


All PL/I datatypes are displayed in the same representations used by
probe. Additionally, the following special formats are used:

 1) Bit strings are displayed as octal, if the length is divisible by
    three, in hex if divisible by four and not three, and as bit
    strings otherwise.
 2) Character strings are displayed as a string concatenated with a
    repeated constant, if the string is padded on the right with more
    than sixteen nulls, spaces, or octal 777 characters.
 3) Large precision (> 51) fixed binary values are also displayed as
    clock readings, if their values represent clock readings within
    ten years of the present.


Display Examples:
d 75|560 2
   displays the two words in seg number 75 starting at offset 560.

d pds|560 2
   displays the two words in the segment named pds starting at 
   offset 560.

d pds$trace
   displays one word in the pds segment beginning at the offset 
   specified by $trace.


display 244|260 +20 4
   displays four words of segment number 244 starting at offset 300 
   octal.

d sp 20
   displays 20 octal words starting with the segment offset defined in
   the azm internal temporary pointer (see set request).


d sst$cmp,* +sst$cmesize sst$strsize
   causes the word at sst$cmp to be used as an indirect word, or an
   indirect pointer if the resultant address has ITS modification, to
   develop the starting virtual address.  The value derived from
   sst$cmesize will then be added to the starting offset for the
   'final' starting address.  The range, or number of words to be
   displayed, is specified by the value contained in sst$strsize.

d sst|2 -as apte
   displays the APTE entry at the given offset in the SST as it is
   defined by apte.incl.pl1.
