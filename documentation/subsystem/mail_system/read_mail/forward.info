10/11/83  read_mail request:  forward, for, fwd

Syntax:  fwd {message_specifier} {addresses} {-control_args}


Function:  redistributes a copy of the specified messages to the stated
recipients.


Arguments:
message_specifier
   identifies which messages are to be forwarded.  If no
   message_specifiers are supplied, the current message is forwarded.
   For more information on message specifiers, type:
         help message_specifiers.gi
addresses
   identifies the recipients of the forwarded copy of the specified
   messages.  Type:
         help addresses.gi -section control argument
   for a description of the syntax of addresses.


Control arguments:
-message message_specifier, -msg message_specifier
   identifies additional messages to be forwarded.
-add_comments
   specifies that the user wishes to add a comment to the messages
   before they are forwarded.  See "Notes on forwarding with comments"
   below for more information.
-no_add_comments
   specifies that comments are not to be added to the messages before
   forwarding.  (Default)


-acknowledge, -ack
   specifies that each recipient of the forwarded message will send an
   acknowledgement message after they have read the message to the user
   who forwarded the message.
-no_acknowledge, -nack
   specifies that the user forwarding the message does not want to
   receive acknowledgements.  (Default)
-notify, -nt
   specifies that the mail system should send a "You have mail."
   notification to each recipient of the forwarded message.  (Default)
-no_notify, -nnt
   specifies that the mail system should not send notification messages.


-brief, -bf
   suppresses those messages which indicate successful delivery of the
   forwarded message.
-long, -lg
   displays the messages indicating successful delivery.  (Default)
-include_deleted, -idl
   includes all messages in the mailbox whether or not they have been
   deleted when processing the message_specifiers to determine which
   messages will be forwarded.
-only_deleted, -odl
   includes only those messages which have been deleted.
-only_non_deleted, -ondl
   includes only those messages which have not been deleted.  (Default)


-delete, -dl
   marks the specified messages for deletion on exit from read_mail
   if all messages are successfully forwarded.
-no_delete, -ndl
   does not mark the messages for deletion.  (Default)
-reverse, -rv
   forwards the messages in descending numeric order.
-no_reverse, -nrv
   forwards the messages in ascending numeric order.  (Default)


Notes:
This request will acknowledge any messages requiring acknowledgement
unless -no_acknowledge is specified on the read_mail command line.

This request will add Redistributed-Date, Redistributed-From, and
Redistributed-To fields to the message before forwarding.  In addition,
if a comment is requested, it will be placed in the
Redistributed-Comment field.  These fields only appear in the copy of
the message that is forwarded; the original message is unchanged.  For
a detailed discussion of the format of a message, type:
     help message_format.gi


If it is desired to forward a set of messages which can not be
identified by a single message specifier, request line iteration and
the list active request may be used to avoid retyping the recipients.
For example:

      forward ([list 1 3 9 last-4:last]) Palter.PDO Sibert.Multics -dl


Notes on forwarding with comments:
When -add_comments is specified, the forward request will accept a
single multi-line comment from the user which is added to each message
forwarded by the request.  As mentioned above, this comment is placed
in the Redistributed-Comments field of the forwarded messages.

By default, the forward request displays the prompt "Comment:" and then
reads the text of the comment from the user's terminal.  If the user
terminates the text with a line containing just a period (.), the text of
the comment is reformatted and the messages are forwarded.  


If the user terminates the text with a line containing "\f" anywhere on
the line, the qedx editor is invoked to allow the user to edit the
comment.  Any text on the line after the "\f" will be executed as qedx
requests.  After exiting qedx, the comment text is reformatted and the
user is placed in a forward sub-request loop where he may issue
requests to print the comment, edit the comment, or forward the
messages with the edited comment.

If the user terminates the text with a line containing "\q" anywhere on
the line, the comment text is reformatted and the user is immediately
placed into the forward sub-request loop.  Any text on the line after
the "\q" is ignored with a suitable warning message.  The user is then
free to print or edit the comment or forward the messages as described
above.


The forward request provides several additional control arguments which
may be used to override the default behavior of the -add_comments
control argument described above.  These additional control arguments
may be used to read the comment text from a file instead of the
terminal, to suppress the automatic reformatting of the comment text,
and to automatically enter the sub-request loop even if the user ends
his input with a line containing just a period (.).

These additional control arguments may be specified even if the
-add_comments control argument is not used.


List of control arguments for forwarding with comments:
-terminal_input, -ti
   accepts the comment text from the terminal.  (Default)
-input_file path, -if path
   takes the comment text from the specified file.
-fill, -fi
   reformats the comment text according to "fill-on" and "align-left"
   modes in compose.  The message is reformatted after initial input is
   completed and after each execution of the qedx and apply requests.
   (Default for terminal input)
-no_fill, -nfi
   does not reformat the comment text unless the fill request of the
   "-fill" control argument of the qedx or apply requests is used.
   (Default for file input)


-line_length N, -ll N
   specifies the line length to use for reformatting the comment text.
   (Default is 62)
-auto_write
   specifies that the qedx request will automatically update the
   comment text when the user quits the editor.
-no_auto_write
   specifies that the qedx request will require the user to use the
   write request to update the comment text  before quitting the
   editor.  Any attempt to exit without writing will result in a query.
   (Default)
-abbrev, -ab
   enables abbreviation expansion of request lines.  The default is to
   use the same state of abbreviation processing as the read_mail
   invocation in which the forward request was executed.


-no_abbrev, -nab
   does not enable abbreviation expansion.
-profile path, -pf path
   specifies the pathname of the profile to use for abbreviation
   expansion.  The suffix "profile" is added if necessary.  This
   control argument implies "-abbrev".  The default is to use the same
   profile as the read_mail invocation in which the forward request was
   executed.
-prompt STR, -pmt STR
   sets the sub-request loop prompt to STR.  The default is:
         ^/read_mail (forward)^[ (^d)^]:^2x
-no_prompt, -npmt
   suppresses the prompt for request lines in the sub-request loop.


-request STR, -rq STR
   executes STR as a forward request line after reading the comment
   text but before entering the request loop.  This control argument
   implies "-request_loop".
-request_loop, -rql
   enters the forward sub-request loop after reading the comment text.
   (Default for file input)
-no_request_loop, -nrql
   attempts to forward the messages with the comment immediately upon
   completion of input unless input was from the terminal and was
   terminated by "\f" or "\q".  (Default for terminal input)


List of forward requests:
   In the following summary of forward requests, "-ca" is shorthand for
   "-control_args", "specs" is shorthand for "message_specifiers" and
   "-c/sa" is shorthand for "-control_args -selection_args": For a
   complete description of any request, issue the forward request:
         help request_name


.  prints a line identifying the forward sub-request loop.
?  prints a multi-columnar list of available requests.
abbrev {-ca}, ab {-ca}
   controls abbreviation processing of request lines.
answer STR -ca request_line
   provides preset answers to questions asked by another request.
apply {-ca} cmd_line, ap {-ca} cmd_line
   passes the comment text to a Multics command line for possible
   editing.
debug_mode {-ca}
   enables/disables the forward request's debugging facilities.
do rq_str {args}, [do rq_str args]
   executes/returns a request line with argument substitution.
exec_com ec_path {ec_args},
ec ec_path {ec_args},
[exec_com ec_path {ec_args}],
[ec ec_path {ec_args}]
   executes a file of forward requests which may return a value.
execute cmd_line,
e cmd_line,
[execute active_str],
[e active_str]
   executes a Multics command line/evaluates a Multics active string.
fill {-ca}, fi {-ca}
   reformats the comment text.
help {topics} {-ca}
   prints information about forward requests and other topics.
if expr -then line1 {-else line2},
[if expr -then STR1 {-else STR2}]
   conditionally executes/returns one of two request lines.
list_help {topics}, lh {topics}
   displays the name of all forward info segments on given topics.
list_requests {STRs} {-ca}, lr {STRs} {-ca}
   prints a brief description of selected forward requests.
print, pr, p
   prints the comment text.
print_original {specs} {-c/sa}, pro {specs} {-c/sa}
   prints the messages being forwarded.
qedx {-ca}, qx {-ca}
   edits the comment text using the Multics qedx editor.
quit {-ca}, q {-ca}
   exits the forward sub-request loop without forwarding the messages.
ready, rdy
   prints a Multics ready message.
ready_off, rdf
   disables printing of a ready message after each request line.
ready_on, rdn
   enables printing of a ready message after each request line.
send
   forwards the messages and exits the sub-request loop.
subsystem_name, [subsystem_name]
   prints/returns the name of this subsystem
subystem_version, [subsystem_version]
   prints/returns the version number of this subsystem.
