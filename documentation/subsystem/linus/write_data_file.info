9/29/88   write_data_file,  wdf

Syntax:  write_data_file pathname {-control_args}


Function:  retrieves the selected data and places it in an output file
in a format suitable for input to the store_from_data_file request.


Arguments:

pathname
   is the name of the file where the data will be written to.


Control arguments:

-column_delimiter X, -cdm X
   where X is a single ascii character which will be used to delimit
   the column values.  If this control argument isn't specified the
   default column delimiter is the tilde.

-create_columns STRING, -crc STRING
   new columns with null values are placed in the column positions
   specified by STRING.  STRING is a blank separated list of numbers.
   (See "Notes" below.)

-extend
   specifies that if the file already exists it should be extended
   rather than truncated.


-no_progress, -npg
   specifies that progress messages should not be printed. (DEFAULT)

-progress {N}, -pg {N}
   specifies that a progress message should be printed after N tuples
   have been processed, where N is any positive integer. If N is not
   specified the default is to print a progress message after 1000
   tuples.

-row_delimiter X, -rdm X
   where X is a single ascii character which will be used to delimit
   the row values.  If this control argument isn't specified the
   default row delimiter is the newline character.


-truncate
   specifies that if the file already exists it should be truncated.
   This is the default.


Notes:

The -create_columns control argument is provided to aid in the
restructuring of tables.  The column positions specified are the
positions in the output file where the null value will be placed.  To
create two new columns as the third and fifth columns in the output
file the string "-create_columns 3 5" would be used.  The null value is
provided by placing two column delimiters together without any
intervening characters, and the zero length character string is
converted according to the data type of the column when the
store_from_data_file request processes the input file.


Column values are examined to determine if they contain quotes, column
delimiters, or row delimiters.  If any of these are found the column
value is requoted before it is placed in the output file.  The
store_from_data_file request removes this layer of quotes when
processing the file.


Examples:

write_data_file employee_data
write_data_file employee_data -extend
write_data_file employee_data -create_columns 1 5
write_data_file employee_data -column_delimiter X
