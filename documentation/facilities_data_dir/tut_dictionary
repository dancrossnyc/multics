     A standard dictionary is incorporated in the Multics system; this
dictionary can be used to hyphenate words at the end of a line, and it can be
used to check spelling.  

     Hyphenation is preformed by the -hyphenate control argument to the
compose command.  Use of this control argument causes compose to compare words
in the composing document with the Multics dictionary and any of your own
dictionaries.  If a specific word is in a dictionary and can be hyphenated,
the compose command, if necessary, will use a portion of that hyphenated word
to fill a line.

     You can create your own dictionary with the add_dict_words command.  For
example:

add_dict_words mywords.dict brave fort con-ceived

where 'mywords.dict' (the suffix '.dict' is required) is the name of the
dictionary and 'brave,' 'fort,' and 'con-ceived' are words to be included in
it.  The hyphen in 'con-ceived' indicates that the word may be hyphenated there
if necessary.

     To have compose use your dictionary, you must include it in the "search
paths."  This is done with the add_search_paths command.  For example:

add_search_paths dict mywords.dict

This adds the dictionary named 'mywords.dict' to the search path named 'dict,'
which also contains the standard Multics dictionary.

     The first step toward checking the spelling of words in a document is to
create a list of all the words in the "segment" that stores the document.  You
create the list with the create_wordlist command.  For example:

create_wordlist letter_seg.compin

causes all the words in the segment named 'letter_seg.compin' to be counted
and all duplicated words to be discarded.  The remaining words are put in a
wordlist segment whose name is the name you gave the create_wordlist command
plus the suffix '.wl' (e.g., letter_seg.compin.wl).  Then you invoke the
trim_wordlist command with the wordlist you've just created.  This command
compares all the words in the wordlist with the words in the standard
dictionary and any dictionaries you've added to the dict search path and
discards from the wordlist all those words that appear in the dictionaries.

     Because words in the wordlist are compared to those in the dictionaries,
you can be sure that the discarded words are spelled correctly.  It is among
those that did not have an exact match with dictionary words that you may find
misspellings.  To check these remaining words, print them out with the
print_wordlist command.  The list printed by this command includes the words
only; it does not locate them in the text.  To do that, use the locate words
command.  For example, if you find the misspelled word 'tens,' you would type:

locate_words letter_seg.compin tens

You will then be told which line the word 'tens' appears on.

     You can correct spelling mistakes with the revise_words command.  For
example, to change the spelling of 'tens' to 'ten,' type:

revise_words letter_seg.compin tens ten

This command goes to the segment named on the command line and substitutes
every instance of the first word with the second word.  And the revise_words
command works on complete words only, so you needn't worry that any instance
of the characters named in the first position that appears correctly within
any word will be changed to the spelling of the second word.  For example, the
word 'intense' would not be changed to 'intene' by the above use of the
revise_words command.
