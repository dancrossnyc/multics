:Info: command: commands:

Commands are your principal means of telling Multics what to do.  A command is
used by typing its name when the computer is at command level, which indicated
by a ready message like: r 10:05 12.085 945.  Printing segments and reading
mail are some of the operations performed with commands.


:Info: command_level:

Command level is the level at which Multics accepts commands.  Command level
is indicated by a ready message like: r 10:05 12.086 945 appearing at the left
of the screen with the cursor, the moving light that marks your place, two
lines below at the left.


:Info: cursor:

The cursor is the moving light that marks your place on the terminal screen.


:Info: argument: arguments:

An argument is the name of a "segment" or some other information given to a
"command" when it is invoked.  Arguments are separated from the command, and
from each other when there is more than one, by at least one blank space.  For
example: command_name argument1 argument2


:Info: pathname:

A pathname is the name that indicates where certain information is stored in
the computer.  It can be either relative to the "working directory," in which
case it begins without a greater-than character (>), or absolute, in which
case it does begin with >.


:Info: control_argument: control_arguments:

A control argument is added to a command line, the line made up of a command
and all its accompanying information, to specify some variation in the way the
"command" normally performs its function.  Control arguments are preceded by a
hyphen, for example: -brief.


:Info: segment: segments:

A segment is a collection of information.  It is the basic unit of storage on
Multics, analagous to a file on many other systems.  A segment may be empty or
contain up to over a million printed characters.


:Info: directory: directories:

A directory is a catalog of segments, the basic units of storage on Multics.
It serves like a file drawer, with segments being the file folders in that
drawer.  Directories also catalog other directories, thereby creating
hierarchies of directories.


:Info: profile_segment:

A profile segment is a "segment" that contains the personal abbreviations the
user has established for use on the command line, the line made up of a
command and all its accompanying information.  This segment is stored in the
user's "home directory" with the user's name and suffix of .profile.


:Info: programs:

Programs are what make the computer run.  They are written in a variety of
programming languages (e.g., pl1, FORTRAN, COBOL, PASCAL) and then translated
into a machine language that the computer hardware can understand and execute.


:Info: subroutine:

A subroutine is a program; programs are what make the computer run.
Specifically, a subroutine is a program that is used by another program.  It
usually performs some operation independently from the program that is usuing
it and returns the results to the original program.


:Info: ready_message:

A ready message indicates that Multics is ready for you to give it a command
to tell it what to do.  It looks like: r 1504 12.23 105.  Users can also
create their own version of the ready message to replace this form.


:Info: macro: macros:

A macro is group of commands or other executable statements, such as requests
given to an editor, that are stored and executed together.


:Info: prompt:

A prompt is a request by the computer for some kind of information.  It may be
in the form of a question or of a phrase (usually followed by a colon, as in
the prompt: read_mail:).


:Info: user_name:

The user name is the name a user is known by on Multics.  Usually, it is the
person's last name, but it may have initials as well, e.g., JSmith.  A user
name may also be some sort of short name.  The user name is set by a project
administrator.


:Info: requests:

Requests direct the computer to perform some action.  They are like "commands"
in their basic function, but they are not issued from "command level." They
are issued when you are working in editors, reading mail, etc.


:Info: user_identification:

The user identification (abbreviated User_id) is the combined identification
of the user name, the name the user goes by on Multics, and the project name,
e.g., JSmith.Sales.  A user may have several user identifications if he or she
works on several projects.


:Info: entryname: entrynames:

An entryname is the name given to a segment, the basic unit of storage on
Multics, or a directory, the storage system unit used for cataloging segments.


:Info: working_directory:

The working directory is the part of the storage system you are working in at
any particular time.  It may be one of your personal "directories" or any
directory in the Multics system that you can go to.  When you first get on the
computer and are in your "home directory," that is your working directory.


:Info: log_out: logout:

Log out (or logout) is the process of getting off the computer.  It involves
simply issuing the logout command at command level (the level at which Multics
accepts commands, indicated by a ready message such as: r 12:34 23.45 678).


:Info: log_in: login:

Log in (or login) is the process of getting on the computer.  It involves
issuing the login command with your user name, the name Multics knows you by,
once Multics has been connected to your terminal.  After issuing the login
command with your user name, you will be asked to supply your password.


:Info: home_directory: home_directories:

The home directory is your primary working area.  It has your user name, the
name Multics knows you by, on it, and it is the source of all your other
"directories." It is also where you are first placed each time you get on the
computer.


:Info: directory_hierarchy:

The directory hierarchy is the arrangement pattern for directories, the
storage system units for cataloging information stored on Multics.  It is like
an inverted tree, with directories starting at the root and branching out from
there into multiple levels.


:Info: root_directory:

The root directory is the source from which all other directories, the storage
system units used for cataloging information, stem.  It does not have a name;
it is denoted simply by the greater-than character (>) at the beginning of a
path of directories, e.g., >udd>Multics>JSmith.


:Info: abbreviations:

Abbreviations, usually called abbrevs, are those symbols a user defines
specifically for personal use on the "command line." The term does not refer
to the short names for "commands" and "arguments" that everyone uses.


:Info: command_line: command_lines:

A command line is a line containing a command, the basic means of telling
Multics what to do, and any information that command needs to operate.  It is
always concluded by a carriage return.  A command line may consist of more
than one command.


:Info: text_editor: text_editors:

A text editor is a special environment in which you can write new text and
edit existing text.  An editor is invoked by typing the name of the particular
editor as a command.


:Info: search_path: search_paths:

A search path is the "pathname" of a "directory" that is to be searched under
certain circumstances.
